<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00074" kind="class" language="C++" prot="public">
    <compoundname>acme_segment</compoundname>
    <basecompoundref refid="a00050" prot="public" virt="non-virtual">acme_entity</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00074_1aab5d1dee7e2726697ce345e724a07387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::acme_segment</definition>
        <argsstring>(in varargin)</argsstring>
        <name>acme_segment</name>
        <param>
          <type>in</type>
          <declname>varargin</declname>
        </param>
        <briefdescription>
<para>Create a new C++ pointer to segment object instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Class container for ACME segment object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="35" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a3cc3c68a04012b29a4660ab4599ddbd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>function</type>
        <definition>function acme_segment::type</definition>
        <argsstring>(in self)</argsstring>
        <name>type</name>
        <reimplements refid="a00050_1adadea5f13cd73eeac368db18de967f49">type</reimplements>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Delete C++ pointer to segment object instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Get object type as string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="50" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1af5815448be7b57108fd56f1b7c1686fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::getVertex1</definition>
        <argsstring>(in self)</argsstring>
        <name>getVertex1</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get segment vertex 1 as ACME point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="58" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1aea81619a5bad56734806f6042e0c151f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::getVertex2</definition>
        <argsstring>(in self)</argsstring>
        <name>getVertex2</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get segment vertex 2 as ACME point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="67" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1af72e81b4cc6ce7f157ff46a194669288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::setVertex1</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>setVertex1</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Set segment vertex 1 with an ACME point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="76" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1ab0c703be0b25184da28ea7aa481495d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::setVertex2</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>setVertex2</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Set segment vertex 2 with an ACME point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="84" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a5714520c3ae76d4d8f4dcf161e91b231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::copy</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>copy</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Copy segment object from another segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="92" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a82c82e1825682dcc523fefa9df5bca1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::copyByHandle</definition>
        <argsstring>(in self, in handle)</argsstring>
        <name>copyByHandle</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Copy segment object from another segment handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="104" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a8fca39cd57580010cc212258582b361b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::translate</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>translate</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Translate segment by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="112" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a913490fdfa4152d7ab661f294981151f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::transform</definition>
        <argsstring>(in self, in varargin)</argsstring>
        <name>transform</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>varargin</declname>
        </param>
        <briefdescription>
<para>Transform segment by 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="120" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a9b7c24b4afe58e063d0b9e706a6ebef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isInside</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isInside</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if ACME point is inside the segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="128" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1acc19c1fadd9490d5fd7c84a532dc3629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isDegenerated</definition>
        <argsstring>(in self)</argsstring>
        <name>isDegenerated</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Check if segment is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="140" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a84e84100cd84482d18e7b01170378561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isApprox</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isApprox</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if segments are approximatively equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="148" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1ab825a090c50e2ca289a1cc9df1b77dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::centroid</definition>
        <argsstring>(in self)</argsstring>
        <name>centroid</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get segment centroid as ACME point objecty instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="160" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a476c3a623255655a3b067216b58fac0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::toVector</definition>
        <argsstring>(in self)</argsstring>
        <name>toVector</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Transform segment to vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="169" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1abda2f0542daacb661585b677b3b0892a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::toNormalizedVector</definition>
        <argsstring>(in self)</argsstring>
        <name>toNormalizedVector</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Transform segment to normalized vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="177" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a5008c30552cd3c43daffe24edb06a24e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::swap</definition>
        <argsstring>(in self)</argsstring>
        <name>swap</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Swap segment vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="185" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a7d74b985f89301eda4342f4ecd63feac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::clamp</definition>
        <argsstring>(in self)</argsstring>
        <name>clamp</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get segment minimum and maximum points of object instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="193" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a2ef125f755f3e8aebb096b2906b3f1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::length</definition>
        <argsstring>(in self)</argsstring>
        <name>length</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get segment length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="201" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1ae1a23724feccf1d89a2c04e9d47451f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isParallel</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isParallel</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if segment is parallel to an ACME object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="209" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1aa614d7530b0a218b5ac689132a805a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isOrthogonal</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if segment is orthogonal to an ACME object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="217" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a6c8e6d21a69ebc8d47453833c18d58fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isCollinear</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isCollinear</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if segment is collinear to an ACME object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="225" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1a451d0f9b5de566c8c92d86178178a0f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::isCoplanar</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Check if segment is coplanar to an ACME object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="233" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1ac180459ea2a25f5764d1cc7e7087d7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::intersection</definition>
        <argsstring>(in self, in other_obj)</argsstring>
        <name>intersection</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>other_obj</declname>
        </param>
        <briefdescription>
<para>Intersect segment with an ACME object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="241" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1aa3ba4569d36b88b2b925f00948700b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::disp</definition>
        <argsstring>(in self)</argsstring>
        <name>disp</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Display object data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="251" column="15"/>
      </memberdef>
      <memberdef kind="function" id="a00074_1adda93217d56a6d22252ebbd1f2123958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function acme_segment::plot</definition>
        <argsstring>(in self, in figure_name, in color)</argsstring>
        <name>plot</name>
        <param>
          <type>in</type>
          <declname>self</declname>
        </param>
        <param>
          <type>in</type>
          <declname>figure_name</declname>
        </param>
        <param>
          <type>in</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Plot segment object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_segment.m" line="259" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00050_1a419b052079bcfcfb4e813365d647cb51" prot="private" static="no" mutable="no">
        <type>Property</type>
        <definition>Property acme_entity::objectHandle</definition>
        <argsstring></argsstring>
        <name>objectHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Class container for ACME entity object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="acme_entity.m" line="34" column="10" bodyfile="acme_entity.m" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>acme_segment</label>
        <link refid="a00074"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>handle</label>
      </node>
      <node id="2">
        <label>acme_entity</label>
        <link refid="a00050"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>acme_segment</label>
        <link refid="a00074"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>handle</label>
      </node>
      <node id="2">
        <label>acme_entity</label>
        <link refid="a00050"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="acme_segment.m" line="26" column="1" bodyfile="acme_segment.m" bodystart="27" bodyend="274"/>
    <listofallmembers>
      <member refid="a00050_1aa9604c371b05fe29d288f8229d673d70" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>acme_entity</name></member>
      <member refid="a00074_1aab5d1dee7e2726697ce345e724a07387" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>acme_segment</name></member>
      <member refid="a00074_1ab825a090c50e2ca289a1cc9df1b77dc0" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>centroid</name></member>
      <member refid="a00074_1a7d74b985f89301eda4342f4ecd63feac" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>clamp</name></member>
      <member refid="a00074_1a5714520c3ae76d4d8f4dcf161e91b231" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>copy</name></member>
      <member refid="a00074_1a82c82e1825682dcc523fefa9df5bca1b" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>copyByHandle</name></member>
      <member refid="a00074_1aa3ba4569d36b88b2b925f00948700b4d" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>disp</name></member>
      <member refid="a00074_1af5815448be7b57108fd56f1b7c1686fe" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>getVertex1</name></member>
      <member refid="a00074_1aea81619a5bad56734806f6042e0c151f" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>getVertex2</name></member>
      <member refid="a00074_1ac180459ea2a25f5764d1cc7e7087d7e1" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>intersection</name></member>
      <member refid="a00074_1a84e84100cd84482d18e7b01170378561" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isApprox</name></member>
      <member refid="a00074_1a6c8e6d21a69ebc8d47453833c18d58fd" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isCollinear</name></member>
      <member refid="a00074_1a451d0f9b5de566c8c92d86178178a0f2" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isCoplanar</name></member>
      <member refid="a00074_1acc19c1fadd9490d5fd7c84a532dc3629" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isDegenerated</name></member>
      <member refid="a00074_1a9b7c24b4afe58e063d0b9e706a6ebef5" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isInside</name></member>
      <member refid="a00074_1aa614d7530b0a218b5ac689132a805a7c" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isOrthogonal</name></member>
      <member refid="a00074_1ae1a23724feccf1d89a2c04e9d47451f4" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>isParallel</name></member>
      <member refid="a00074_1a2ef125f755f3e8aebb096b2906b3f1eb" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>length</name></member>
      <member refid="a00050_1a419b052079bcfcfb4e813365d647cb51" prot="private" virt="non-virtual"><scope>acme_segment</scope><name>objectHandle</name></member>
      <member refid="a00074_1adda93217d56a6d22252ebbd1f2123958" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>plot</name></member>
      <member refid="a00074_1af72e81b4cc6ce7f157ff46a194669288" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>setVertex1</name></member>
      <member refid="a00074_1ab0c703be0b25184da28ea7aa481495d9" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>setVertex2</name></member>
      <member refid="a00074_1a5008c30552cd3c43daffe24edb06a24e" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>swap</name></member>
      <member refid="a00074_1abda2f0542daacb661585b677b3b0892a" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>toNormalizedVector</name></member>
      <member refid="a00074_1a476c3a623255655a3b067216b58fac0c" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>toVector</name></member>
      <member refid="a00074_1a913490fdfa4152d7ab661f294981151f" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>transform</name></member>
      <member refid="a00074_1a8fca39cd57580010cc212258582b361b" prot="public" virt="non-virtual"><scope>acme_segment</scope><name>translate</name></member>
      <member refid="a00074_1a3cc3c68a04012b29a4660ab4599ddbd1" prot="public" virt="virtual"><scope>acme_segment</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
