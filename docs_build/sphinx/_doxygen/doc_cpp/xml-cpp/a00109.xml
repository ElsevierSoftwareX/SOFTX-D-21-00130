<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00109" kind="class" language="C++" prot="public">
    <compoundname>acme::ray</compoundname>
    <basecompoundref refid="a00089" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00053" local="no">acme_ray.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00109_1ab873450e02f925bab72b19cb40426663" prot="private" static="no" mutable="no">
        <type><ref refid="a00105" kindref="compound">point</ref></type>
        <definition>point acme::ray::m_origin</definition>
        <argsstring></argsstring>
        <name>m_origin</name>
        <briefdescription>
<para>Ray origin point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="58" column="11" bodyfile="include/acme_ray.hh" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00109_1acf9b8d3a07661be458078a7575d7ab9f" prot="private" static="no" mutable="no">
        <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref></type>
        <definition>vec3 acme::ray::m_direction</definition>
        <argsstring></argsstring>
        <name>m_direction</name>
        <briefdescription>
<para>Ray direction vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="59" column="10" bodyfile="include/acme_ray.hh" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00109_1aabc35263c86842a40c75f737752506a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::ray::~ray</definition>
        <argsstring>()</argsstring>
        <name>~ray</name>
        <briefdescription>
<para>Ray class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="63" column="5" bodyfile="include/acme_ray.hh" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1ab28addfbb35c83e9db7e9476cc2214b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::ray::ray</definition>
        <argsstring>()</argsstring>
        <name>ray</name>
        <briefdescription>
<para>Ray class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="66" column="5" bodyfile="include/acme_ray.hh" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a07ca798442ced888b65d025a0db50254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ray::ray</definition>
        <argsstring>(ray const &amp;)=default</argsstring>
        <name>ray</name>
        <param>
          <type><ref refid="a00109" kindref="compound">ray</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Ray copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="69" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a5c6c77f7578828ed294c3898806444e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ray::ray</definition>
        <argsstring>(ray &amp;&amp;)=default</argsstring>
        <name>ray</name>
        <param>
          <type><ref refid="a00109" kindref="compound">ray</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Ray move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a18ac43142cbde50eee2d62fd2e2dca37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ray::ray</definition>
        <argsstring>(real origin_x, real origin_y, real origin_z, real direction_x, real direction_y, real direction_z)</argsstring>
        <name>ray</name>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>origin_x</declname>
          <briefdescription><para>Input x value of ray origin point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>origin_y</declname>
          <briefdescription><para>Input y value of ray origin point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>origin_z</declname>
          <briefdescription><para>Input z value of ray origin point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>direction_x</declname>
          <briefdescription><para>Input x value of ray direction </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>direction_y</declname>
          <briefdescription><para>Input y value of ray direction </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>direction_z</declname>
          <briefdescription><para>Input z value of ray direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Ray class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1affcaea5625930615f7a2569c180153fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ray::ray</definition>
        <argsstring>(point const &amp;origin, vec3 const &amp;direction)</argsstring>
        <name>ray</name>
        <param>
          <type><ref refid="a00105" kindref="compound">point</ref> const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Input ray origin point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Input ray direction vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Ray class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1abfb06f6aceeebcb1a6957c92852f8b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00109" kindref="compound">ray</ref> &amp;</type>
        <definition>ray&amp; acme::ray::operator=</definition>
        <argsstring>(ray const &amp;ray_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00109" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="92" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a7e2ccc39717508d5d4cc440f35267777" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::ray::isApprox</definition>
        <argsstring>(ray const &amp;ray_in, real tolerance=EPSILON) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00109" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray object </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00065_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="98" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a260eea5fe77dd3bb5446e6d2ed6810d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00105" kindref="compound">point</ref> const  &amp;</type>
        <definition>point const&amp; acme::ray::origin</definition>
        <argsstring>(void) const</argsstring>
        <name>origin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return ray origin point const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="105" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1ab4e14e638f19ab7406cbce3668a5c2c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const  &amp;</type>
        <definition>vec3 const&amp; acme::ray::direction</definition>
        <argsstring>(void) const</argsstring>
        <name>direction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return ray direction vector const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a4089b441a5d5239d6b579eac25e6f640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00105" kindref="compound">point</ref> &amp;</type>
        <definition>point&amp; acme::ray::origin</definition>
        <argsstring>(void)</argsstring>
        <name>origin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return ray origin point reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="115" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1adea24a169a2cd0c8cf56a9c19a58b211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
        <definition>vec3&amp; acme::ray::direction</definition>
        <argsstring>(void)</argsstring>
        <name>direction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return ray direction vector reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="119" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a4f13778f7d87e0bf5d6dc3679ba032de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::ray::normalize</definition>
        <argsstring>(void)</argsstring>
        <name>normalize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Normalize ray direction vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a733bcf0b4e0d637138a9ee65edeaa5c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref></type>
        <definition>vec3 acme::ray::toVector</definition>
        <argsstring>(void) const</argsstring>
        <name>toVector</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert ray to vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="127" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a99e179c60578da8df4aa24dad8eda30d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref></type>
        <definition>vec3 acme::ray::toUnitVector</definition>
        <argsstring>(void) const</argsstring>
        <name>toUnitVector</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Convert ray to normalized vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="132" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a89b1cdc44b984a069c70caf4841ca2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::ray::reverse</definition>
        <argsstring>(void)</argsstring>
        <name>reverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reverse ray direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="137" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a9f9b1f29f22a00ada792b1545e28ef13" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::ray::translate</definition>
        <argsstring>(vec3 const &amp;vector) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00089_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate ray by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="141" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a622b58b0b7c7ab26123b975f24a0caf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::ray::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00089_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00065_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform ray with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="147" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a195218497e08f9b0d87f3f67232420da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::ray::isInside</definition>
        <argsstring>(point const &amp;point_in, real tolerance=EPSILON) const</argsstring>
        <name>isInside</name>
        <param>
          <type><ref refid="a00105" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Query point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00065_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="153" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a8b6c49530f4255238d95e9e4e1fd19f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00089_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00065_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray is degenerated (null vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="160" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1aa86c179f19dab8ec8a4d6c80be74eee8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00065_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::ray::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00089_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="165" column="13" bodyfile="include/acme_ray.hh" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a9280d836624f54f5ff48a4e203d6d31f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::ray::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00089_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="168" column="17" bodyfile="include/acme_ray.hh" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a9773909aa54466cd40a2f1324ab48365" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00089_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="171" column="10" bodyfile="include/acme_ray.hh" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a37f43380781c077290b448c0e84aa0a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00089_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="174" column="10" bodyfile="include/acme_ray.hh" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1abe4ee14712f16d4f843937641c02a389" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00089_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="177" column="10" bodyfile="include/acme_ray.hh" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a5133ee41264e9dcd39caba6ec2a88412" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00089_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="180" column="10" bodyfile="include/acme_ray.hh" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1af20907970713fe16142fa72da2b47034" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00089_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="183" column="10" bodyfile="include/acme_ray.hh" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1ada57045083ee0b6d343b01a86e7becbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00089_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="186" column="10" bodyfile="include/acme_ray.hh" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1adb9c5dcbd4d11da396bbfebf1a05f76a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00089_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="189" column="10" bodyfile="include/acme_ray.hh" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a36341c7ae41a71ad64cd2755383b9e36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00089_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="192" column="10" bodyfile="include/acme_ray.hh" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1ae5bee342a6affe45e8fe3caaa5147d89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00089_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="195" column="10" bodyfile="include/acme_ray.hh" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a2c9c0e713017937f2da543d796a94105" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00089_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the ray is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="198" column="10" bodyfile="include/acme_ray.hh" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1aafa3becfdcc8a0254197a8f9e584c43e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00089_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the ray is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="201" column="10" bodyfile="include/acme_ray.hh" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1af496ab1255448d176ca8f491eef7f418" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::clamp</definition>
        <argsstring>(vec3 &amp;min, vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00089_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="205" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00109_1a9ff4c2021f70758f720408d5df31bf7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ray::clamp</definition>
        <argsstring>(real &amp;min_x, real &amp;min_y, real &amp;min_z, real &amp;max_x, real &amp;max_y, real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00089_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="212" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00089" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00089_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ray class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Infinite ray in 3D space and defined by any point lying on the line and a direction vector. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>acme::ray</label>
        <link refid="a00109"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00089"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>acme::ray</label>
        <link refid="a00109"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_origin</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00089"/>
      </node>
      <node id="3">
        <label>acme::point</label>
        <link refid="a00105"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_ray.hh" line="55" column="3" bodyfile="include/acme_ray.hh" bodystart="56" bodyend="221"/>
    <listofallmembers>
      <member refid="a00109_1af496ab1255448d176ca8f491eef7f418" prot="public" virt="virtual"><scope>acme::ray</scope><name>clamp</name></member>
      <member refid="a00109_1a9ff4c2021f70758f720408d5df31bf7a" prot="public" virt="virtual"><scope>acme::ray</scope><name>clamp</name></member>
      <member refid="a00109_1ab4e14e638f19ab7406cbce3668a5c2c1" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>direction</name></member>
      <member refid="a00109_1adea24a169a2cd0c8cf56a9c19a58b211" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>direction</name></member>
      <member refid="a00089_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>entity</name></member>
      <member refid="a00109_1a7e2ccc39717508d5d4cc440f35267777" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>isApprox</name></member>
      <member refid="a00109_1ae5bee342a6affe45e8fe3caaa5147d89" prot="public" virt="virtual"><scope>acme::ray</scope><name>isBall</name></member>
      <member refid="a00109_1a2c9c0e713017937f2da543d796a94105" prot="public" virt="virtual"><scope>acme::ray</scope><name>isClampable</name></member>
      <member refid="a00109_1a8b6c49530f4255238d95e9e4e1fd19f2" prot="public" virt="virtual"><scope>acme::ray</scope><name>isDegenerated</name></member>
      <member refid="a00109_1a36341c7ae41a71ad64cd2755383b9e36" prot="public" virt="virtual"><scope>acme::ray</scope><name>isDisk</name></member>
      <member refid="a00089_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>isEntity</name></member>
      <member refid="a00109_1a195218497e08f9b0d87f3f67232420da" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>isInside</name></member>
      <member refid="a00109_1abe4ee14712f16d4f843937641c02a389" prot="public" virt="virtual"><scope>acme::ray</scope><name>isLine</name></member>
      <member refid="a00109_1aafa3becfdcc8a0254197a8f9e584c43e" prot="public" virt="virtual"><scope>acme::ray</scope><name>isNonClampable</name></member>
      <member refid="a00109_1a9773909aa54466cd40a2f1324ab48365" prot="public" virt="virtual"><scope>acme::ray</scope><name>isNone</name></member>
      <member refid="a00109_1af20907970713fe16142fa72da2b47034" prot="public" virt="virtual"><scope>acme::ray</scope><name>isPlane</name></member>
      <member refid="a00109_1a37f43380781c077290b448c0e84aa0a6" prot="public" virt="virtual"><scope>acme::ray</scope><name>isPoint</name></member>
      <member refid="a00109_1a5133ee41264e9dcd39caba6ec2a88412" prot="public" virt="virtual"><scope>acme::ray</scope><name>isRay</name></member>
      <member refid="a00109_1ada57045083ee0b6d343b01a86e7becbb" prot="public" virt="virtual"><scope>acme::ray</scope><name>isSegment</name></member>
      <member refid="a00109_1adb9c5dcbd4d11da396bbfebf1a05f76a" prot="public" virt="virtual"><scope>acme::ray</scope><name>isTriangle</name></member>
      <member refid="a00109_1aa86c179f19dab8ec8a4d6c80be74eee8" prot="public" virt="virtual"><scope>acme::ray</scope><name>level</name></member>
      <member refid="a00109_1acf9b8d3a07661be458078a7575d7ab9f" prot="private" virt="non-virtual"><scope>acme::ray</scope><name>m_direction</name></member>
      <member refid="a00109_1ab873450e02f925bab72b19cb40426663" prot="private" virt="non-virtual"><scope>acme::ray</scope><name>m_origin</name></member>
      <member refid="a00109_1a4f13778f7d87e0bf5d6dc3679ba032de" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>normalize</name></member>
      <member refid="a00109_1abfb06f6aceeebcb1a6957c92852f8b17" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>operator=</name></member>
      <member refid="a00109_1a260eea5fe77dd3bb5446e6d2ed6810d6" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>origin</name></member>
      <member refid="a00109_1a4089b441a5d5239d6b579eac25e6f640" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>origin</name></member>
      <member refid="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ptr</name></member>
      <member refid="a00109_1ab28addfbb35c83e9db7e9476cc2214b1" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ray</name></member>
      <member refid="a00109_1a07ca798442ced888b65d025a0db50254" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ray</name></member>
      <member refid="a00109_1a5c6c77f7578828ed294c3898806444e1" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ray</name></member>
      <member refid="a00109_1a18ac43142cbde50eee2d62fd2e2dca37" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ray</name></member>
      <member refid="a00109_1affcaea5625930615f7a2569c180153fd" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>ray</name></member>
      <member refid="a00109_1a89b1cdc44b984a069c70caf4841ca2a3" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>reverse</name></member>
      <member refid="a00089_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>rotate</name></member>
      <member refid="a00109_1a99e179c60578da8df4aa24dad8eda30d" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>toUnitVector</name></member>
      <member refid="a00109_1a733bcf0b4e0d637138a9ee65edeaa5c7" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>toVector</name></member>
      <member refid="a00109_1a622b58b0b7c7ab26123b975f24a0caf3" prot="public" virt="virtual"><scope>acme::ray</scope><name>transform</name></member>
      <member refid="a00109_1a9f9b1f29f22a00ada792b1545e28ef13" prot="public" virt="virtual"><scope>acme::ray</scope><name>translate</name></member>
      <member refid="a00109_1a9280d836624f54f5ff48a4e203d6d31f" prot="public" virt="virtual"><scope>acme::ray</scope><name>type</name></member>
      <member refid="a00089_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>vecptr</name></member>
      <member refid="a00089_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::ray</scope><name>~entity</name></member>
      <member refid="a00109_1aabc35263c86842a40c75f737752506a0" prot="public" virt="non-virtual"><scope>acme::ray</scope><name>~ray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
