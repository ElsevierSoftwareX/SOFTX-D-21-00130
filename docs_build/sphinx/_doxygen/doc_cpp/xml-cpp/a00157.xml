<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00157" kind="class" language="C++" prot="public">
    <compoundname>acme::none</compoundname>
    <basecompoundref refid="a00149" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00038" local="no">acme_none.hh</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00157_1a8b578baaeb6735c7389e603494ab89a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::none::~none</definition>
        <argsstring>()</argsstring>
        <name>~none</name>
        <briefdescription>
<para>None class deconstructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="58" column="5" bodyfile="include/acme_none.hh" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a35f7fdb242daf65f2973a43d770a46e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::none::none</definition>
        <argsstring>()</argsstring>
        <name>none</name>
        <briefdescription>
<para>None class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="61" column="5" bodyfile="include/acme_none.hh" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a37cf583a25dc936f8356dff6a861f2ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void acme::none::translate</definition>
        <argsstring>(vec3 const &amp;vector_in) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00149_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate entity by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="65" column="5" bodyfile="include/acme_none.hh" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1aac3a7a6fb6774bb7ad4c3886375f5e74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void acme::none::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00149_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform entity with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="71" column="5" bodyfile="include/acme_none.hh" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1ae583594084f531cda37ee03847d11ca7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00149_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if entity is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="76" column="10" bodyfile="include/acme_none.hh" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1ad6fe01cff77e2b0303dc3dd833026fd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::none::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00149_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="84" column="13" bodyfile="include/acme_none.hh" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1aa1a118a43d94ba1788007d607a67f8f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::none::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00149_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="87" column="17" bodyfile="include/acme_none.hh" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1ad19fcba928042bf6c42f92573ee36b1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00149_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="90" column="10" bodyfile="include/acme_none.hh" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1aa96b10fa33c1a979d417ecd805cd9062" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00149_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="93" column="10" bodyfile="include/acme_none.hh" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a19697c3193560d86ac2b47a3506ff308" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00149_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="96" column="10" bodyfile="include/acme_none.hh" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a34cfce4bf9960bbf411a937a113e1143" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00149_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="99" column="10" bodyfile="include/acme_none.hh" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a34b7ede780d003c0ac019746165087c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00149_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="102" column="10" bodyfile="include/acme_none.hh" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a1de8deb64d59de6f55412054d16c0ca2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00149_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="105" column="10" bodyfile="include/acme_none.hh" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a0d976a3389193c2e633d4f56c2eb5b93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00149_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="108" column="10" bodyfile="include/acme_none.hh" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a9731dcd8bb08b07690fb02a73083a498" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00149_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="111" column="10" bodyfile="include/acme_none.hh" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a3146f63e21dca3c9b14d1da5d7ab81a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00149_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="114" column="10" bodyfile="include/acme_none.hh" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a759f1b27d65a62fa9671ef15f1fb1375" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00149_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the disk is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="117" column="10" bodyfile="include/acme_none.hh" bodystart="117" bodyend="117"/>
        <referencedby refid="a00157_1a209f92963757be088be5454d3cebb3b0" compoundref="a00098" startline="49" endline="55">clamp</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00157_1aaeb94eeed320419ab68a413b530927e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00149_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the disk is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="120" column="10" bodyfile="include/acme_none.hh" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1a209f92963757be088be5454d3cebb3b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::clamp</definition>
        <argsstring>(vec3 &amp;min, vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="124" column="5" bodyfile="src/acme_none.cc" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="a00157_1acd0543f6a457e9a690ec91ec1318bdfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::none::clamp</definition>
        <argsstring>(real &amp;min_x, real &amp;min_y, real &amp;min_z, real &amp;max_x, real &amp;max_y, real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="131" column="5" bodyfile="src/acme_none.cc" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5" bodyfile="src/acme_entity.cc" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10" bodyfile="src/acme_entity.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00149" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>None class container. </para>
    </briefdescription>
    <detaileddescription>
<para>This cass represent a empty geometrical entity. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::none</label>
        <link refid="a00157"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::none</label>
        <link refid="a00157"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_none.hh" line="54" column="3" bodyfile="include/acme_none.hh" bodystart="55" bodyend="140"/>
    <listofallmembers>
      <member refid="a00157_1a209f92963757be088be5454d3cebb3b0" prot="public" virt="virtual"><scope>acme::none</scope><name>clamp</name></member>
      <member refid="a00157_1acd0543f6a457e9a690ec91ec1318bdfe" prot="public" virt="virtual"><scope>acme::none</scope><name>clamp</name></member>
      <member refid="a00149_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::none</scope><name>entity</name></member>
      <member refid="a00157_1a3146f63e21dca3c9b14d1da5d7ab81a8" prot="public" virt="virtual"><scope>acme::none</scope><name>isBall</name></member>
      <member refid="a00157_1a759f1b27d65a62fa9671ef15f1fb1375" prot="public" virt="virtual"><scope>acme::none</scope><name>isClampable</name></member>
      <member refid="a00157_1ae583594084f531cda37ee03847d11ca7" prot="public" virt="virtual"><scope>acme::none</scope><name>isDegenerated</name></member>
      <member refid="a00157_1a9731dcd8bb08b07690fb02a73083a498" prot="public" virt="virtual"><scope>acme::none</scope><name>isDisk</name></member>
      <member refid="a00149_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::none</scope><name>isEntity</name></member>
      <member refid="a00157_1a19697c3193560d86ac2b47a3506ff308" prot="public" virt="virtual"><scope>acme::none</scope><name>isLine</name></member>
      <member refid="a00157_1aaeb94eeed320419ab68a413b530927e6" prot="public" virt="virtual"><scope>acme::none</scope><name>isNonClampable</name></member>
      <member refid="a00157_1ad19fcba928042bf6c42f92573ee36b1c" prot="public" virt="virtual"><scope>acme::none</scope><name>isNone</name></member>
      <member refid="a00157_1a34b7ede780d003c0ac019746165087c0" prot="public" virt="virtual"><scope>acme::none</scope><name>isPlane</name></member>
      <member refid="a00157_1aa96b10fa33c1a979d417ecd805cd9062" prot="public" virt="virtual"><scope>acme::none</scope><name>isPoint</name></member>
      <member refid="a00157_1a34cfce4bf9960bbf411a937a113e1143" prot="public" virt="virtual"><scope>acme::none</scope><name>isRay</name></member>
      <member refid="a00157_1a1de8deb64d59de6f55412054d16c0ca2" prot="public" virt="virtual"><scope>acme::none</scope><name>isSegment</name></member>
      <member refid="a00157_1a0d976a3389193c2e633d4f56c2eb5b93" prot="public" virt="virtual"><scope>acme::none</scope><name>isTriangle</name></member>
      <member refid="a00157_1ad6fe01cff77e2b0303dc3dd833026fd3" prot="public" virt="virtual"><scope>acme::none</scope><name>level</name></member>
      <member refid="a00157_1a35f7fdb242daf65f2973a43d770a46e3" prot="public" virt="non-virtual"><scope>acme::none</scope><name>none</name></member>
      <member refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::none</scope><name>ptr</name></member>
      <member refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::none</scope><name>rotate</name></member>
      <member refid="a00157_1aac3a7a6fb6774bb7ad4c3886375f5e74" prot="public" virt="virtual"><scope>acme::none</scope><name>transform</name></member>
      <member refid="a00157_1a37cf583a25dc936f8356dff6a861f2ae" prot="public" virt="virtual"><scope>acme::none</scope><name>translate</name></member>
      <member refid="a00157_1aa1a118a43d94ba1788007d607a67f8f9" prot="public" virt="virtual"><scope>acme::none</scope><name>type</name></member>
      <member refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::none</scope><name>vecptr</name></member>
      <member refid="a00149_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::none</scope><name>~entity</name></member>
      <member refid="a00157_1a8b578baaeb6735c7389e603494ab89a2" prot="public" virt="non-virtual"><scope>acme::none</scope><name>~none</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
