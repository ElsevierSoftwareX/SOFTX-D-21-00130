<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00125" kind="namespace" language="C++">
    <compoundname>acme</compoundname>
    <innerclass refid="a00129" prot="public">acme::aabb</innerclass>
    <innerclass refid="a00133" prot="public">acme::AABBtree</innerclass>
    <innerclass refid="a00137" prot="public">acme::ball</innerclass>
    <innerclass refid="a00141" prot="public">acme::collection</innerclass>
    <innerclass refid="a00145" prot="public">acme::disk</innerclass>
    <innerclass refid="a00149" prot="public">acme::entity</innerclass>
    <innerclass refid="a00153" prot="public">acme::line</innerclass>
    <innerclass refid="a00157" prot="public">acme::none</innerclass>
    <innerclass refid="a00161" prot="public">acme::plane</innerclass>
    <innerclass refid="a00165" prot="public">acme::point</innerclass>
    <innerclass refid="a00169" prot="public">acme::ray</innerclass>
    <innerclass refid="a00173" prot="public">acme::segment</innerclass>
    <innerclass refid="a00177" prot="public">acme::triangle</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="a00125_1a91745012989657825bc70313039f90a0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double acme::real</definition>
        <argsstring></argsstring>
        <name>real</name>
        <briefdescription>
<para>Real number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="79" column="18" bodyfile="include/acme.hh" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a9223400d01496dcba963b2f723c89d4a" prot="public" static="no">
        <type>int</type>
        <definition>typedef int acme::integer</definition>
        <argsstring></argsstring>
        <name>integer</name>
        <briefdescription>
<para>Integer number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="80" column="15" bodyfile="include/acme.hh" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" prot="public" static="no">
        <type>std::ostream</type>
        <definition>typedef std::ostream acme::out_stream</definition>
        <argsstring></argsstring>
        <name>out_stream</name>
        <briefdescription>
<para>Output stream type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="81" column="24" bodyfile="include/acme.hh" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 2, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 2, 1&gt; acme::vec2</definition>
        <argsstring></argsstring>
        <name>vec2</name>
        <briefdescription>
<para>2x1 vector type (column vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="83" column="25" bodyfile="include/acme.hh" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 2, 2 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 2, 2&gt; acme::mat2</definition>
        <argsstring></argsstring>
        <name>mat2</name>
        <briefdescription>
<para>2x2 matrix type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="84" column="25" bodyfile="include/acme.hh" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a57043673330479bace38d40b1d93edb0" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 3, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 3, 1&gt; acme::vec3</definition>
        <argsstring></argsstring>
        <name>vec3</name>
        <briefdescription>
<para>3x1 vector type (column vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="85" column="25" bodyfile="include/acme.hh" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1aece54448763fde47bc3f4c9a27801a1d" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 3, 3 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 3, 3&gt; acme::mat3</definition>
        <argsstring></argsstring>
        <name>mat3</name>
        <briefdescription>
<para>3x3 matrix type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="86" column="25" bodyfile="include/acme.hh" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 4, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 4, 1&gt; acme::vec4</definition>
        <argsstring></argsstring>
        <name>vec4</name>
        <briefdescription>
<para>4x1 vector type (column vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="87" column="25" bodyfile="include/acme.hh" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 4, 4 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, 4, 4&gt; acme::mat4</definition>
        <argsstring></argsstring>
        <name>mat4</name>
        <briefdescription>
<para>4x4 matrix type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="88" column="25" bodyfile="include/acme.hh" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a2e0ee896dd97d3dc46cbdee829fecd77" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, Eigen::Dynamic, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, Eigen::Dynamic, 1&gt; acme::vecN</definition>
        <argsstring></argsstring>
        <name>vecN</name>
        <briefdescription>
<para>Nx1 vector of real number type (column vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="89" column="25" bodyfile="include/acme.hh" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a8538c2f55cf0fac7621096a26147b1b7" prot="public" static="no">
        <type>Eigen::Matrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>typedef Eigen::Matrix&lt;real, Eigen::Dynamic, Eigen::Dynamic&gt; acme::matN</definition>
        <argsstring></argsstring>
        <name>matN</name>
        <briefdescription>
<para>NxN matrix of real number type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="90" column="25" bodyfile="include/acme.hh" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a4a747032a241699bb06b16d610c5b451" prot="public" static="no">
        <type>Eigen::DiagonalMatrix&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 3 &gt;</type>
        <definition>typedef Eigen::DiagonalMatrix&lt;real, 3&gt; acme::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <briefdescription>
<para>3D scaling transformation type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="92" column="33" bodyfile="include/acme.hh" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a0a8e3a569595ceedd47ac3a904cf9422" prot="public" static="no">
        <type>Eigen::Translation&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 3 &gt;</type>
        <definition>typedef Eigen::Translation&lt;real, 3&gt; acme::translate</definition>
        <argsstring></argsstring>
        <name>translate</name>
        <briefdescription>
<para>3D translation transformation type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="93" column="30" bodyfile="include/acme.hh" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a85e64489b44a0b6c25bae15453a4855d" prot="public" static="no">
        <type>Eigen::AngleAxis&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &gt;</type>
        <definition>typedef Eigen::AngleAxis&lt;real&gt; acme::angleaxis</definition>
        <argsstring></argsstring>
        <name>angleaxis</name>
        <briefdescription>
<para>3D rotation transformation type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="94" column="28" bodyfile="include/acme.hh" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" prot="public" static="no">
        <type>Eigen::Transform&lt; <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>, 3, Eigen::Affine &gt;</type>
        <definition>typedef Eigen::Transform&lt;real, 3, Eigen::Affine&gt; acme::affine</definition>
        <argsstring></argsstring>
        <name>affine</name>
        <briefdescription>
<para>3D affine transformation type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="95" column="28" bodyfile="include/acme.hh" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="a00125_1a4c7b35005ec47b384ff13e2e35402ce0" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::EPSILON_MACHINE</definition>
        <argsstring></argsstring>
        <name>EPSILON_MACHINE</name>
        <initializer>= std::numeric_limits&lt;<ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>&gt;::epsilon()</initializer>
        <briefdescription>
<para>Machine epsilon epsilon static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="106" column="21" bodyfile="include/acme.hh" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1af5f63fc180eef1645f8109c621cf33ac" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::EPSILON_HIGH</definition>
        <argsstring></argsstring>
        <name>EPSILON_HIGH</name>
        <initializer>= 1.0E-16</initializer>
        <briefdescription>
<para>High precision epsilon static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="107" column="21" bodyfile="include/acme.hh" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a53f892a05bf1a9bda84c04a5f4d4b406" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::EPSILON_MEDIUM</definition>
        <argsstring></argsstring>
        <name>EPSILON_MEDIUM</name>
        <initializer>= 1.0E-10</initializer>
        <briefdescription>
<para>Medium precision epsilon static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="108" column="21" bodyfile="include/acme.hh" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1aa498ffee2a74a203c6980a594c1e80d4" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::EPSILON_LOW</definition>
        <argsstring></argsstring>
        <name>EPSILON_LOW</name>
        <initializer>= 1.0E-07</initializer>
        <briefdescription>
<para>Low precision epsilon static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="109" column="21" bodyfile="include/acme.hh" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5be47678e6c38184c3795d1ea41c489d" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::EPSILON</definition>
        <argsstring></argsstring>
        <name>EPSILON</name>
        <initializer>= <ref refid="a00125_1a53f892a05bf1a9bda84c04a5f4d4b406" kindref="member">EPSILON_MEDIUM</ref></initializer>
        <briefdescription>
<para>Standard precision epsilon static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="110" column="21" bodyfile="include/acme.hh" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a3e93062bed3b13b374138dfc45c5cf98" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::INFTY</definition>
        <argsstring></argsstring>
        <name>INFTY</name>
        <initializer>= std::numeric_limits&lt;<ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>&gt;::infinity()</initializer>
        <briefdescription>
<para>Infinity static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="111" column="21" bodyfile="include/acme.hh" bodystart="111" bodyend="-1"/>
        <referencedby refid="a00133_1a894792ff9b95f86b71fd3527b1d1d678" compoundref="a00068" startline="316" endline="323">acme::AABBtree::selectMinimumDistance</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ac5e614706a51c842705ed61db8760b1b" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::QUIET_NAN</definition>
        <argsstring></argsstring>
        <name>QUIET_NAN</name>
        <initializer>= std::numeric_limits&lt;<ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>&gt;::quiet_NaN()</initializer>
        <briefdescription>
<para>Not-a-Number static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="112" column="21" bodyfile="include/acme.hh" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a217fe29f07d54a52e1fdbaf85ae10c86" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>= <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>(3.141592653589793238462643383279500)</initializer>
        <briefdescription>
<para>Pi static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="113" column="21" bodyfile="include/acme.hh" bodystart="113" bodyend="-1"/>
        <referencedby refid="a00137_1ac8876b45cd1659684d8fe5832d0dac47" compoundref="a00071" startline="135" endline="139">acme::ball::area</referencedby>
        <referencedby refid="a00145_1a95c21a733a382c69a3b0059f7b4ad9fb" compoundref="a00083" startline="210" endline="214">acme::disk::area</referencedby>
        <referencedby refid="a00145_1a9b12cd7fcd62ca41ca41aecd3d776d14" compoundref="a00083" startline="201" endline="205">acme::disk::perimeter</referencedby>
        <referencedby refid="a00137_1ac2e9343a80459a53dc0d0bbc1a9d1de3" compoundref="a00071" startline="144" endline="148">acme::ball::volume</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00125_1af4cad43dbb9c21a94fa14fa10f893e5d" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const</type>
        <definition>real const acme::PIDIV180</definition>
        <argsstring></argsstring>
        <name>PIDIV180</name>
        <initializer>= <ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref>(0.017453292519943295769236907684886)</initializer>
        <briefdescription>
<para>Pi/180 static constant value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="114" column="21" bodyfile="include/acme.hh" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a7edc4ceffc858803715fb6ad50a1ee4c" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref> const</type>
        <definition>vec2 const acme::UNITX_VEC2</definition>
        <argsstring></argsstring>
        <name>UNITX_VEC2</name>
        <initializer>= vec2::UnitX()</initializer>
        <briefdescription>
<para>X axis unit vec2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="116" column="21" bodyfile="include/acme.hh" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1aa10eda37ef77da1b7f7c72d553872981" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref> const</type>
        <definition>vec2 const acme::UNITY_VEC2</definition>
        <argsstring></argsstring>
        <name>UNITY_VEC2</name>
        <initializer>= vec2::UnitY()</initializer>
        <briefdescription>
<para>Y axis unit vec2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="117" column="21" bodyfile="include/acme.hh" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a172f3941a779497cb23f4d0502308773" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref> const</type>
        <definition>vec2 const acme::NAN_VEC2</definition>
        <argsstring></argsstring>
        <name>NAN_VEC2</name>
        <initializer>= vec2::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number vec2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="118" column="21" bodyfile="include/acme.hh" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ab3c2c4eebd739cd16a46f6054b38a532" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref> const</type>
        <definition>mat2 const acme::NAN_MAT2</definition>
        <argsstring></argsstring>
        <name>NAN_MAT2</name>
        <initializer>= mat2::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number mat2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="119" column="21" bodyfile="include/acme.hh" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ae9039ecfb43533521f28b5ad1a6abfa6" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref> const</type>
        <definition>vec2 const acme::ZEROS_VEC2</definition>
        <argsstring></argsstring>
        <name>ZEROS_VEC2</name>
        <initializer>= vec2::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros vec2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="120" column="21" bodyfile="include/acme.hh" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a8c6366a2a3d0d15a4a0eb7b96d1ceac6" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref> const</type>
        <definition>mat2 const acme::ZEROS_MAT2</definition>
        <argsstring></argsstring>
        <name>ZEROS_MAT2</name>
        <initializer>= mat2::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros mat2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="121" column="21" bodyfile="include/acme.hh" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a1d25012d300e6f7bcbd16b98882119ff" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref> const</type>
        <definition>vec2 const acme::ONES_VEC2</definition>
        <argsstring></argsstring>
        <name>ONES_VEC2</name>
        <initializer>= vec2::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones vec2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="122" column="21" bodyfile="include/acme.hh" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1acbb787b59ba423905c904f1a96d0df22" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref> const</type>
        <definition>mat2 const acme::ONES_MAT2</definition>
        <argsstring></argsstring>
        <name>ONES_MAT2</name>
        <initializer>= mat2::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones mat2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="123" column="21" bodyfile="include/acme.hh" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a098de970b2b24168e543af34b437c63b" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref> const</type>
        <definition>mat2 const acme::IDENTITY_MAT2</definition>
        <argsstring></argsstring>
        <name>IDENTITY_MAT2</name>
        <initializer>= mat2::Identity()</initializer>
        <briefdescription>
<para>Identity mat2 static constant object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="124" column="21" bodyfile="include/acme.hh" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a87950720395a59dc6603d977cfade879" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::UNITX_VEC3</definition>
        <argsstring></argsstring>
        <name>UNITX_VEC3</name>
        <initializer>= vec3::UnitX()</initializer>
        <briefdescription>
<para>X axis unit vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="126" column="21" bodyfile="include/acme.hh" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1af23856ded47320740287882c1144d557" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::UNITY_VEC3</definition>
        <argsstring></argsstring>
        <name>UNITY_VEC3</name>
        <initializer>= vec3::UnitY()</initializer>
        <briefdescription>
<para>Y axis unit vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="127" column="21" bodyfile="include/acme.hh" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1acc05a6ddd0287563cc778a167b417897" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::UNITZ_VEC3</definition>
        <argsstring></argsstring>
        <name>UNITZ_VEC3</name>
        <initializer>= vec3::UnitZ()</initializer>
        <briefdescription>
<para>Z axis unit vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="128" column="21" bodyfile="include/acme.hh" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5b7a1f55894719e3f3a288a3ec8231b1" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::NAN_VEC3</definition>
        <argsstring></argsstring>
        <name>NAN_VEC3</name>
        <initializer>= vec3::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="129" column="21" bodyfile="include/acme.hh" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a36f5b5cdb8230c98e116e77cf003f20c" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref> const</type>
        <definition>mat3 const acme::NAN_MAT3</definition>
        <argsstring></argsstring>
        <name>NAN_MAT3</name>
        <initializer>= mat3::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number mat3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="130" column="21" bodyfile="include/acme.hh" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad0a07c63b6de70dec8f5e3d73d35a31c" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::ZEROS_VEC3</definition>
        <argsstring></argsstring>
        <name>ZEROS_VEC3</name>
        <initializer>= vec3::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="131" column="21" bodyfile="include/acme.hh" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad21d8f43c0be175d4e01f6edf4ceabf3" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref> const</type>
        <definition>mat3 const acme::ZEROS_MAT3</definition>
        <argsstring></argsstring>
        <name>ZEROS_MAT3</name>
        <initializer>= mat3::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros mat3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="132" column="21" bodyfile="include/acme.hh" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ac407dd0617fad2d8dfb1a0ff5a1c8688" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
        <definition>vec3 const acme::ONES_VEC3</definition>
        <argsstring></argsstring>
        <name>ONES_VEC3</name>
        <initializer>= vec3::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones vec3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="133" column="21" bodyfile="include/acme.hh" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5b83c00749a89bc432fc677b929b49dc" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref> const</type>
        <definition>mat3 const acme::ONES_MAT3</definition>
        <argsstring></argsstring>
        <name>ONES_MAT3</name>
        <initializer>= mat3::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones mat3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="134" column="21" bodyfile="include/acme.hh" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a02b2f10d87170850ea5ca2e95be39ab4" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref> const</type>
        <definition>mat3 const acme::IDENTITY_MAT3</definition>
        <argsstring></argsstring>
        <name>IDENTITY_MAT3</name>
        <initializer>= mat3::Identity()</initializer>
        <briefdescription>
<para>Identity mat3 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="135" column="21" bodyfile="include/acme.hh" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1af9c70d43bc0af9b9f87107fad4e19d6e" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::UNITX_VEC4</definition>
        <argsstring></argsstring>
        <name>UNITX_VEC4</name>
        <initializer>= vec4::UnitX()</initializer>
        <briefdescription>
<para>X axis unit vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="137" column="21" bodyfile="include/acme.hh" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a10fb6a1b085b8e617ae202ff61dbd196" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::UNITY_VEC4</definition>
        <argsstring></argsstring>
        <name>UNITY_VEC4</name>
        <initializer>= vec4::UnitY()</initializer>
        <briefdescription>
<para>Y axis unit vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="138" column="21" bodyfile="include/acme.hh" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ae938fee23265131dbd78825fd4580c11" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::UNITZ_VEC4</definition>
        <argsstring></argsstring>
        <name>UNITZ_VEC4</name>
        <initializer>= vec4::UnitZ()</initializer>
        <briefdescription>
<para>Z axis unit vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="139" column="21" bodyfile="include/acme.hh" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a59a189caffc3e41e00d77446f7779fb1" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::UNITW_VEC4</definition>
        <argsstring></argsstring>
        <name>UNITW_VEC4</name>
        <initializer>= vec4::UnitW()</initializer>
        <briefdescription>
<para>W axis unit vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="140" column="21" bodyfile="include/acme.hh" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a2caaf69b48584d97f7d26752c8a44e8c" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::NAN_VEC4</definition>
        <argsstring></argsstring>
        <name>NAN_VEC4</name>
        <initializer>= vec4::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="141" column="21" bodyfile="include/acme.hh" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a3b4656df8206424b16d2fcf8758e2171" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref> const</type>
        <definition>mat4 const acme::NAN_MAT4</definition>
        <argsstring></argsstring>
        <name>NAN_MAT4</name>
        <initializer>= mat4::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number mat4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="142" column="21" bodyfile="include/acme.hh" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ab4d77f537ce7d4cae81f69fec7e4a448" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::ZEROS_VEC4</definition>
        <argsstring></argsstring>
        <name>ZEROS_VEC4</name>
        <initializer>= vec4::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="143" column="21" bodyfile="include/acme.hh" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a574c0f8dc10400bde5145eb12e512d3f" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref> const</type>
        <definition>mat4 const acme::ZEROS_MAT4</definition>
        <argsstring></argsstring>
        <name>ZEROS_MAT4</name>
        <initializer>= mat4::Constant(0.0)</initializer>
        <briefdescription>
<para>Zeros mat4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="144" column="21" bodyfile="include/acme.hh" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5c8839b58b24eb540c5189ee1e180222" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref> const</type>
        <definition>vec4 const acme::ONES_VEC4</definition>
        <argsstring></argsstring>
        <name>ONES_VEC4</name>
        <initializer>= vec4::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones vec4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="145" column="21" bodyfile="include/acme.hh" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1af5b18e3670bd50ead96981028c828f15" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref> const</type>
        <definition>mat4 const acme::ONES_MAT4</definition>
        <argsstring></argsstring>
        <name>ONES_MAT4</name>
        <initializer>= mat4::Constant(1.0)</initializer>
        <briefdescription>
<para>Ones mat4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="146" column="21" bodyfile="include/acme.hh" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a724591b4f2d2d2081be6ff93af5d5dbf" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref> const</type>
        <definition>mat4 const acme::IDENTITY_MAT4</definition>
        <argsstring></argsstring>
        <name>IDENTITY_MAT4</name>
        <initializer>= mat4::Identity()</initializer>
        <briefdescription>
<para>Identity mat4 type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="147" column="21" bodyfile="include/acme.hh" bodystart="147" bodyend="-1"/>
        <referencedby refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" compoundref="a00086" startline="49" endline="56">acme::entity::rotate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a946694977c95d8eb44d24c94037dee2e" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref></type>
        <definition>vec2 acme::THROWAWAY_VEC2</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_VEC2</name>
        <initializer>= <ref refid="a00125_1a23aa8cc4079ea5b126bc685da8e5f806" kindref="member">vec2</ref>(<ref refid="a00125_1a172f3941a779497cb23f4d0502308773" kindref="member">NAN_VEC2</ref>)</initializer>
        <briefdescription>
<para>Throwaway vec2 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="149" column="15" bodyfile="include/acme.hh" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a1da8a49a2231bdbdeb7de02a5d7cb395" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref></type>
        <definition>vec3 acme::THROWAWAY_VEC3</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_VEC3</name>
        <initializer>= <ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref>(<ref refid="a00125_1a5b7a1f55894719e3f3a288a3ec8231b1" kindref="member">NAN_VEC3</ref>)</initializer>
        <briefdescription>
<para>Throwaway vec3 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="150" column="15" bodyfile="include/acme.hh" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad163a6586b03946cb1110f15b73f1552" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref></type>
        <definition>vec4 acme::THROWAWAY_VEC4</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_VEC4</name>
        <initializer>= <ref refid="a00125_1a0a794f6473f4df06b89b677c0d07cbf8" kindref="member">vec4</ref>(<ref refid="a00125_1a2caaf69b48584d97f7d26752c8a44e8c" kindref="member">NAN_VEC4</ref>)</initializer>
        <briefdescription>
<para>Throwaway vec4 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="151" column="15" bodyfile="include/acme.hh" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5d591de8c2d81d8ed4a1d9b9be225339" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref></type>
        <definition>mat2 acme::THROWAWAY_MAT2</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_MAT2</name>
        <initializer>= <ref refid="a00125_1a9b319a9b15a9332f4c5c33dbb78c4ef0" kindref="member">mat2</ref>(<ref refid="a00125_1ab3c2c4eebd739cd16a46f6054b38a532" kindref="member">NAN_MAT2</ref>)</initializer>
        <briefdescription>
<para>Throwaway mat2 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="152" column="15" bodyfile="include/acme.hh" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a176425105109953b764b82a34d767596" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref></type>
        <definition>mat3 acme::THROWAWAY_MAT3</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_MAT3</name>
        <initializer>= <ref refid="a00125_1aece54448763fde47bc3f4c9a27801a1d" kindref="member">mat3</ref>(<ref refid="a00125_1a36f5b5cdb8230c98e116e77cf003f20c" kindref="member">NAN_MAT3</ref>)</initializer>
        <briefdescription>
<para>Throwaway mat3 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="153" column="15" bodyfile="include/acme.hh" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a360b530a66ff2b553d06a5419bd2682a" prot="public" static="yes" mutable="no">
        <type><ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref></type>
        <definition>mat4 acme::THROWAWAY_MAT4</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_MAT4</name>
        <initializer>= <ref refid="a00125_1ad9ff2d6f2d36e1c405f622c33a7f338a" kindref="member">mat4</ref>(<ref refid="a00125_1a3b4656df8206424b16d2fcf8758e2171" kindref="member">NAN_MAT4</ref>)</initializer>
        <briefdescription>
<para>Throwaway mat4 type static non-const object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme.hh" line="154" column="15" bodyfile="include/acme.hh" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad722a11bf680e3f6b11bf6ea55b71401" prot="public" static="yes" mutable="no">
        <type><ref refid="a00129" kindref="compound">aabb</ref> const</type>
        <definition>aabb const acme::NAN_AABB</definition>
        <argsstring></argsstring>
        <name>NAN_AABB</name>
        <initializer>= <ref refid="a00129" kindref="compound">aabb</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, 0, 0)</initializer>
        <briefdescription>
<para>Not-a-Number static const aabb object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_aabb.hh" line="263" column="21" bodyfile="include/acme_aabb.hh" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad5fa2d51ea11dbd586b857204be961de" prot="public" static="yes" mutable="no">
        <type><ref refid="a00129" kindref="compound">aabb</ref></type>
        <definition>aabb acme::THROWAWAY_AABB</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_AABB</name>
        <initializer>= <ref refid="a00129" kindref="compound">aabb</ref>(<ref refid="a00125_1ad722a11bf680e3f6b11bf6ea55b71401" kindref="member">NAN_AABB</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const aabb object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_aabb.hh" line="264" column="15" bodyfile="include/acme_aabb.hh" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a2a561608efbf0687a0b4c00bc24f72b0" prot="public" static="yes" mutable="no">
        <type><ref refid="a00137" kindref="compound">ball</ref> const</type>
        <definition>ball const acme::NAN_BALL</definition>
        <argsstring></argsstring>
        <name>NAN_BALL</name>
        <initializer>= <ref refid="a00137" kindref="compound">ball</ref>(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>, <ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const ball object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="209" column="21" bodyfile="include/acme_ball.hh" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a0098128802a093b00d2f88c75ffc4ddf" prot="public" static="yes" mutable="no">
        <type><ref refid="a00137" kindref="compound">ball</ref></type>
        <definition>ball acme::THROWAWAY_BALL</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_BALL</name>
        <initializer>= <ref refid="a00137" kindref="compound">ball</ref>(<ref refid="a00125_1a2a561608efbf0687a0b4c00bc24f72b0" kindref="member">NAN_BALL</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const ball object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="210" column="15" bodyfile="include/acme_ball.hh" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1abcb89cb12fcfd3351ae5fedd288e415f" prot="public" static="yes" mutable="no">
        <type><ref refid="a00145" kindref="compound">disk</ref> const</type>
        <definition>disk const acme::NAN_DISK</definition>
        <argsstring></argsstring>
        <name>NAN_DISK</name>
        <initializer>= <ref refid="a00145" kindref="compound">disk</ref>(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>, <ref refid="a00125_1afe55953618335bf624f833a12b656200" kindref="member">NAN_PLANE</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const disk object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="245" column="21" bodyfile="include/acme_disk.hh" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a5a1130468f34fb910772114deaef2e8c" prot="public" static="yes" mutable="no">
        <type><ref refid="a00145" kindref="compound">disk</ref></type>
        <definition>disk acme::THROWAWAY_DISK</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_DISK</name>
        <initializer>= <ref refid="a00145" kindref="compound">disk</ref>(<ref refid="a00125_1abcb89cb12fcfd3351ae5fedd288e415f" kindref="member">NAN_DISK</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const disk object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="246" column="15" bodyfile="include/acme_disk.hh" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a31b86ff96c355ec12f4b562c1e4d227b" prot="public" static="yes" mutable="no">
        <type><ref refid="a00153" kindref="compound">line</ref> const</type>
        <definition>line const acme::NAN_LINE</definition>
        <argsstring></argsstring>
        <name>NAN_LINE</name>
        <initializer>= <ref refid="a00153" kindref="compound">line</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a5b7a1f55894719e3f3a288a3ec8231b1" kindref="member">NAN_VEC3</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const line object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_line.hh" line="219" column="21" bodyfile="include/acme_line.hh" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ae9e7fbf006da30585f40caa59b80c50f" prot="public" static="yes" mutable="no">
        <type><ref refid="a00153" kindref="compound">line</ref></type>
        <definition>line acme::THROWAWAY_LINE</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_LINE</name>
        <initializer>= <ref refid="a00153" kindref="compound">line</ref>(<ref refid="a00125_1a31b86ff96c355ec12f4b562c1e4d227b" kindref="member">NAN_LINE</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const line object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_line.hh" line="220" column="15" bodyfile="include/acme_line.hh" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" prot="public" static="yes" mutable="no">
        <type><ref refid="a00157" kindref="compound">none</ref></type>
        <definition>none acme::THROWAWAY_NONE</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_NONE</name>
        <initializer>= <ref refid="a00157" kindref="compound">none</ref>()</initializer>
        <briefdescription>
<para>Throwaway static non-const none object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_none.hh" line="142" column="15" bodyfile="include/acme_none.hh" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1afe55953618335bf624f833a12b656200" prot="public" static="yes" mutable="no">
        <type><ref refid="a00161" kindref="compound">plane</ref> const</type>
        <definition>plane const acme::NAN_PLANE</definition>
        <argsstring></argsstring>
        <name>NAN_PLANE</name>
        <initializer>= <ref refid="a00161" kindref="compound">plane</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a5b7a1f55894719e3f3a288a3ec8231b1" kindref="member">NAN_VEC3</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const plane object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_plane.hh" line="236" column="22" bodyfile="include/acme_plane.hh" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a6bf42c7afbb107efe10a40041683664a" prot="public" static="yes" mutable="no">
        <type><ref refid="a00161" kindref="compound">plane</ref></type>
        <definition>plane acme::plane_goat</definition>
        <argsstring></argsstring>
        <name>plane_goat</name>
        <initializer>= <ref refid="a00161" kindref="compound">plane</ref>(<ref refid="a00125_1afe55953618335bf624f833a12b656200" kindref="member">NAN_PLANE</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const plane object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_plane.hh" line="237" column="16" bodyfile="include/acme_plane.hh" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a0446c1588541e734a2b46f2b7311ee9b" prot="public" static="yes" mutable="no">
        <type><ref refid="a00165" kindref="compound">point</ref> const</type>
        <definition>point const acme::NAN_POINT</definition>
        <argsstring></argsstring>
        <name>NAN_POINT</name>
        <initializer>= point::Constant(<ref refid="a00125_1ac5e614706a51c842705ed61db8760b1b" kindref="member">QUIET_NAN</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="167" column="22" bodyfile="include/acme_point.hh" bodystart="167" bodyend="-1"/>
        <referencedby refid="a00129_1a322b0336f6697532d2a6f442d6266b20" compoundref="a00065" startline="126" endline="131">acme::aabb::clear</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" prot="public" static="yes" mutable="no">
        <type><ref refid="a00165" kindref="compound">point</ref></type>
        <definition>point acme::THROWAWAY_POINT</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_POINT</name>
        <initializer>= <ref refid="a00165" kindref="compound">point</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="168" column="16" bodyfile="include/acme_point.hh" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a4739e877fa165de009fd274c575c67c6" prot="public" static="yes" mutable="no">
        <type><ref refid="a00169" kindref="compound">ray</ref> const</type>
        <definition>ray const acme::NAN_RAY</definition>
        <argsstring></argsstring>
        <name>NAN_RAY</name>
        <initializer>= <ref refid="a00169" kindref="compound">ray</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a5b7a1f55894719e3f3a288a3ec8231b1" kindref="member">NAN_VEC3</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const ray object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="223" column="20" bodyfile="include/acme_ray.hh" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1adafacf4c96252ebc2f319ba83b7f527d" prot="public" static="yes" mutable="no">
        <type><ref refid="a00169" kindref="compound">ray</ref></type>
        <definition>ray acme::THROWAWAY_RAY</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_RAY</name>
        <initializer>= <ref refid="a00169" kindref="compound">ray</ref>(<ref refid="a00125_1a4739e877fa165de009fd274c575c67c6" kindref="member">NAN_RAY</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const ray object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ray.hh" line="224" column="14" bodyfile="include/acme_ray.hh" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a94afc8ab4a2a571683fac3e55ddf45e6" prot="public" static="yes" mutable="no">
        <type><ref refid="a00173" kindref="compound">segment</ref> const</type>
        <definition>segment const acme::NAN_SEGMENT</definition>
        <argsstring></argsstring>
        <name>NAN_SEGMENT</name>
        <initializer>= <ref refid="a00173" kindref="compound">segment</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const segment object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_segment.hh" line="235" column="24" bodyfile="include/acme_segment.hh" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a6862af316bb171dbdc0c922650a2a689" prot="public" static="yes" mutable="no">
        <type><ref refid="a00173" kindref="compound">segment</ref></type>
        <definition>segment acme::THROWAWAY_SEGMENT</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_SEGMENT</name>
        <initializer>= <ref refid="a00173" kindref="compound">segment</ref>(<ref refid="a00125_1a94afc8ab4a2a571683fac3e55ddf45e6" kindref="member">NAN_SEGMENT</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const segment object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_segment.hh" line="236" column="18" bodyfile="include/acme_segment.hh" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1a204c9826191fb15faccc0002e787f5bd" prot="public" static="yes" mutable="no">
        <type><ref refid="a00177" kindref="compound">triangle</ref> const</type>
        <definition>triangle const acme::NAN_TRIANGLE</definition>
        <argsstring></argsstring>
        <name>NAN_TRIANGLE</name>
        <initializer>= <ref refid="a00177" kindref="compound">triangle</ref>(<ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>, <ref refid="a00125_1a0446c1588541e734a2b46f2b7311ee9b" kindref="member">NAN_POINT</ref>)</initializer>
        <briefdescription>
<para>Not-a-Number static const triangle object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="264" column="25" bodyfile="include/acme_triangle.hh" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00125_1ad9264f64a9af5b0cc2eee576e235abd3" prot="public" static="yes" mutable="no">
        <type><ref refid="a00177" kindref="compound">triangle</ref></type>
        <definition>triangle acme::THROWAWAY_TRIANGLE</definition>
        <argsstring></argsstring>
        <name>THROWAWAY_TRIANGLE</name>
        <initializer>= <ref refid="a00177" kindref="compound">triangle</ref>(<ref refid="a00125_1a204c9826191fb15faccc0002e787f5bd" kindref="member">NAN_TRIANGLE</ref>)</initializer>
        <briefdescription>
<para>Throwaway static non-const triangle object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="265" column="19" bodyfile="include/acme_triangle.hh" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00125_1a55838adca5f8e3fa074c75e3fab8ed0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(entity const *entity0_in, entity const *entity1_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity0_in</declname>
          <briefdescription><para>Input entity 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity1_in</declname>
          <briefdescription><para>Input entity 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if entitys are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="44" column="3" bodyfile="src/acme_collinear.cc" bodystart="44" bodyend="120" declfile="include/acme_collinear.hh" declline="55" declcolumn="3"/>
        <referencedby refid="a00125_1a4f3aa0d08639ad27d58912bae991b08a" compoundref="a00089" startline="49" endline="1017">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a07b1a8a65930414065deafdfff49801d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if lines are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="125" column="3" bodyfile="src/acme_collinear.cc" bodystart="125" bodyend="132" declfile="include/acme_collinear.hh" declline="63" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2db3cf0f0e12a37c83ad08598e7e3cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if rays are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="137" column="3" bodyfile="src/acme_collinear.cc" bodystart="137" bodyend="144" declfile="include/acme_collinear.hh" declline="71" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a9cb0e3572b6f83f2f06be5d9ea7f39b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segments are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="149" column="3" bodyfile="src/acme_collinear.cc" bodystart="149" bodyend="156" declfile="include/acme_collinear.hh" declline="79" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af0cfa4285d2e32b70333ab2dc38c7469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and ray are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="161" column="3" bodyfile="src/acme_collinear.cc" bodystart="161" bodyend="168" declfile="include/acme_collinear.hh" declline="87" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a00c2c05a21f9bb6f72d256d8725ca6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and segment are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="173" column="3" bodyfile="src/acme_collinear.cc" bodystart="173" bodyend="180" declfile="include/acme_collinear.hh" declline="95" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad4c33bc0498dfbf308ad99766a16b8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCollinear</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isCollinear</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and segment are collinear. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_collinear.cc" line="185" column="3" bodyfile="src/acme_collinear.cc" bodystart="185" bodyend="192" declfile="include/acme_collinear.hh" declline="103" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aee3f21b0a5d33078516c8f475e7ba049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(entity const *entity0_in, entity const *entity1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity0_in</declname>
          <briefdescription><para>Input entity 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity1_in</declname>
          <briefdescription><para>Input entity 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if entitys are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="49" column="3" bodyfile="src/acme_coplanar.cc" bodystart="49" bodyend="293" declfile="include/acme_coplanar.hh" declline="59" declcolumn="3"/>
        <referencedby refid="a00125_1a4f3aa0d08639ad27d58912bae991b08a" compoundref="a00089" startline="49" endline="1017">intersection</referencedby>
        <referencedby refid="a00125_1aa3b4a4c7d5960f62494c8ec60b422b46" compoundref="a00080" startline="343" endline="351">isCoplanar</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3445180e2f20c222a04c6a5210877a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if lines are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="298" column="3" bodyfile="src/acme_coplanar.cc" bodystart="298" bodyend="304" declfile="include/acme_coplanar.hh" declline="67" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1adcb3e202aefc6327f595758039d083d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if rays are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="309" column="3" bodyfile="src/acme_coplanar.cc" bodystart="309" bodyend="315" declfile="include/acme_coplanar.hh" declline="75" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a08ed2f0943964862922a2fb3807844a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if planes are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="320" column="3" bodyfile="src/acme_coplanar.cc" bodystart="320" bodyend="327" declfile="include/acme_coplanar.hh" declline="83" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a0f90b6a569a74de5b8c41fd018a332f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segments are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="332" column="3" bodyfile="src/acme_coplanar.cc" bodystart="332" bodyend="338" declfile="include/acme_coplanar.hh" declline="91" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aa3b4a4c7d5960f62494c8ec60b422b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(triangle const &amp;triangle0_in, triangle const &amp;triangle1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle0_in</declname>
          <briefdescription><para>Input triangle 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle1_in</declname>
          <briefdescription><para>Input triangle 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangles layng planes are are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="343" column="3" bodyfile="src/acme_coplanar.cc" bodystart="343" bodyend="351" declfile="include/acme_coplanar.hh" declline="99" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a47cb7b64855d2fc20f7d1f47159f413b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(disk const &amp;disk0_in, disk const &amp;disk1_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk0_in</declname>
          <briefdescription><para>Input disk 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk1_in</declname>
          <briefdescription><para>Input disk 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disks layng planes are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="356" column="3" bodyfile="src/acme_coplanar.cc" bodystart="356" bodyend="364" declfile="include/acme_coplanar.hh" declline="107" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a53239bc4ba816d4c8cd3021b2a515987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and ray are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="369" column="3" bodyfile="src/acme_coplanar.cc" bodystart="369" bodyend="375" declfile="include/acme_coplanar.hh" declline="115" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af6ecb108bf336a9e21f73a1ce0583690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and plane are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="380" column="3" bodyfile="src/acme_coplanar.cc" bodystart="380" bodyend="387" declfile="include/acme_coplanar.hh" declline="123" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aacb3764f2b60ca1e4fb5cc961f502019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and segment are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="392" column="3" bodyfile="src/acme_coplanar.cc" bodystart="392" bodyend="398" declfile="include/acme_coplanar.hh" declline="131" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a6ff10d885fdd91a70ab7b96c9f26b894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and tringle laying plane are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="403" column="3" bodyfile="src/acme_coplanar.cc" bodystart="403" bodyend="411" declfile="include/acme_coplanar.hh" declline="139" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aca4c9b8b80a48a31714b688108896b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(line const &amp;line_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and disk are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="416" column="3" bodyfile="src/acme_coplanar.cc" bodystart="416" bodyend="424" declfile="include/acme_coplanar.hh" declline="147" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a8af25f82f8344c3f76f154e21d8862d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(ray const &amp;ray_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and plane are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="429" column="3" bodyfile="src/acme_coplanar.cc" bodystart="429" bodyend="436" declfile="include/acme_coplanar.hh" declline="155" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4ed007a16301ace0b250d6a5bd8ed1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and segment are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="441" column="3" bodyfile="src/acme_coplanar.cc" bodystart="441" bodyend="447" declfile="include/acme_coplanar.hh" declline="163" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a536c8a475151cb07c0503e51b384b32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(ray const &amp;ray_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and triangle are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="452" column="3" bodyfile="src/acme_coplanar.cc" bodystart="452" bodyend="460" declfile="include/acme_coplanar.hh" declline="171" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a326351696945a6952d43ddbb4b72ef2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(ray const &amp;ray_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and disk are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="465" column="3" bodyfile="src/acme_coplanar.cc" bodystart="465" bodyend="473" declfile="include/acme_coplanar.hh" declline="179" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aded3cee52648dd0c9e1a4817e27984c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(plane const &amp;plane_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and plane are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="478" column="3" bodyfile="src/acme_coplanar.cc" bodystart="478" bodyend="485" declfile="include/acme_coplanar.hh" declline="187" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ab1cc79fb1d33e7681f50260c28c61c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(plane const &amp;plane_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and triangle are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="490" column="3" bodyfile="src/acme_coplanar.cc" bodystart="490" bodyend="498" declfile="include/acme_coplanar.hh" declline="195" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3e810b9b97dcc3fcee29c1479f7236dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(plane const &amp;plane_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and disk layng plane are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="503" column="3" bodyfile="src/acme_coplanar.cc" bodystart="503" bodyend="511" declfile="include/acme_coplanar.hh" declline="203" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a7a9b8dfb48f390920372695bf9cf1e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(segment const &amp;segment_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and triangle are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="516" column="3" bodyfile="src/acme_coplanar.cc" bodystart="516" bodyend="524" declfile="include/acme_coplanar.hh" declline="211" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a7a38008d5aeb9870d72dff99051c80f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(segment const &amp;segment_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and disk are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="529" column="3" bodyfile="src/acme_coplanar.cc" bodystart="529" bodyend="537" declfile="include/acme_coplanar.hh" declline="219" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad5b733d699b4488d4d3912c681708120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isCoplanar</definition>
        <argsstring>(triangle const &amp;triangle_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isCoplanar</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangle and disk are coplanar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_coplanar.cc" line="542" column="3" bodyfile="src/acme_coplanar.cc" bodystart="542" bodyend="550" declfile="include/acme_coplanar.hh" declline="227" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4f3aa0d08639ad27d58912bae991b08a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00149" kindref="compound">entity</ref> *</type>
        <definition>entity * acme::intersection</definition>
        <argsstring>(entity const *entity0_in, entity const *entity1_in, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity0_in</declname>
          <briefdescription><para>Input entity 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity1_in</declname>
          <briefdescription><para>Input entity 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between two geometrical entities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="49" column="3" bodyfile="src/acme_intersection.cc" bodystart="49" bodyend="1017" declfile="include/acme_intersection.hh" declline="62" declcolumn="3"/>
        <referencedby refid="a00141_1aedbcc7c8d43b3da0e464d3d564a4d70d" compoundref="a00074" startline="1053" endline="1065">acme::collection::intersection</referencedby>
        <referencedby refid="a00125_1a35fa92fe8a8e1318904c3c26f2d44e0b" compoundref="a00089" startline="1781" endline="1840">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4de9d4f4c00bcfd45707ee26586c2d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point0_in, point const &amp;point1_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point0_in</declname>
          <briefdescription><para>Input point 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point1_in</declname>
          <briefdescription><para>Input point 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between two points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1336" column="3" bodyfile="src/acme_intersection.cc" bodystart="1336" bodyend="1351" declfile="include/acme_intersection.hh" declline="79" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2071067f97b9872ec7fb13282ff4feb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, line const &amp;line_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1356" column="3" bodyfile="src/acme_intersection.cc" bodystart="1356" bodyend="1371" declfile="include/acme_intersection.hh" declline="88" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ac82eee0db2eea0f261334db7ce30fcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, ray const &amp;ray_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1376" column="3" bodyfile="src/acme_intersection.cc" bodystart="1376" bodyend="1391" declfile="include/acme_intersection.hh" declline="97" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1addaa11f01c4c981002932a52f462ebee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, plane const &amp;plane_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1396" column="3" bodyfile="src/acme_intersection.cc" bodystart="1396" bodyend="1411" declfile="include/acme_intersection.hh" declline="106" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a530df653cd7af440c44ec2a583a8b7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, segment const &amp;segment_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1416" column="3" bodyfile="src/acme_intersection.cc" bodystart="1416" bodyend="1431" declfile="include/acme_intersection.hh" declline="115" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a69d35a46abbd3ff950d3d6c4460456d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, triangle const &amp;triangle_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1436" column="3" bodyfile="src/acme_intersection.cc" bodystart="1436" bodyend="1451" declfile="include/acme_intersection.hh" declline="124" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af5b1955c7a3182f037a15e85be10e22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(point const &amp;point_in, disk const &amp;disk_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between point and disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1456" column="3" bodyfile="src/acme_intersection.cc" bodystart="1456" bodyend="1471" declfile="include/acme_intersection.hh" declline="133" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a08b26a67dc63b5bfdb42fe9899731eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, line &amp;line_out=THROWAWAY_LINE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> &amp;</type>
          <declname>line_out</declname>
          <defval><ref refid="a00125_1ae9e7fbf006da30585f40caa59b80c50f" kindref="member">THROWAWAY_LINE</ref></defval>
          <briefdescription><para>Output line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two lines <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1033" column="3" bodyfile="src/acme_intersection.cc" bodystart="1033" bodyend="1048" declfile="include/acme_intersection.hh" declline="152" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a8bb494297eb5a22e42b90ac4d8cad84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, ray &amp;ray_out=THROWAWAY_RAY, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> &amp;</type>
          <declname>ray_out</declname>
          <defval><ref refid="a00125_1adafacf4c96252ebc2f319ba83b7f527d" kindref="member">THROWAWAY_RAY</ref></defval>
          <briefdescription><para>Output ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two rays <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1053" column="3" bodyfile="src/acme_intersection.cc" bodystart="1053" bodyend="1081" declfile="include/acme_intersection.hh" declline="162" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a26f5b3d0b10bb372552e31a6ec69ae17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two opposite rays <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1086" column="3" bodyfile="src/acme_intersection.cc" bodystart="1086" bodyend="1111" declfile="include/acme_intersection.hh" declline="172" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a6cc3c890b92aacbb74f5a444220cdce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two segments <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1116" column="3" bodyfile="src/acme_intersection.cc" bodystart="1116" bodyend="1236" declfile="include/acme_intersection.hh" declline="182" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a84b0fb25e18a7e0d748963c837852e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, ray &amp;ray_out=THROWAWAY_RAY, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> &amp;</type>
          <declname>ray_out</declname>
          <defval><ref refid="a00125_1adafacf4c96252ebc2f319ba83b7f527d" kindref="member">THROWAWAY_RAY</ref></defval>
          <briefdescription><para>Output ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between line and ray <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1241" column="3" bodyfile="src/acme_intersection.cc" bodystart="1241" bodyend="1256" declfile="include/acme_intersection.hh" declline="192" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2ad9de3ed122c6a79b11dfcf91ce9392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between line and segment <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1261" column="3" bodyfile="src/acme_intersection.cc" bodystart="1261" bodyend="1276" declfile="include/acme_intersection.hh" declline="202" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aeb14efc30906c82cfcbb66236b64bfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between ray and segment <linebreak/>
WARNING: This function only support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1281" column="3" bodyfile="src/acme_intersection.cc" bodystart="1281" bodyend="1320" declfile="include/acme_intersection.hh" declline="212" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ac723eb11178d5d2a0e49f71856c5892e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two lines <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1485" column="3" bodyfile="src/acme_intersection.cc" bodystart="1485" bodyend="1508" declfile="include/acme_intersection.hh" declline="231" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a092d4530ee29de02e7faec8862082836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two rays <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1513" column="3" bodyfile="src/acme_intersection.cc" bodystart="1513" bodyend="1544" declfile="include/acme_intersection.hh" declline="241" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a8909d20403784d6efd29a328bb521aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two segments <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1549" column="3" bodyfile="src/acme_intersection.cc" bodystart="1549" bodyend="1580" declfile="include/acme_intersection.hh" declline="251" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3db55f9cb04ea2ebeabf44c980d38ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with ray <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1585" column="3" bodyfile="src/acme_intersection.cc" bodystart="1585" bodyend="1615" declfile="include/acme_intersection.hh" declline="261" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae5a015e4e7591d6e6b9ab67eb4184365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with segment <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1620" column="3" bodyfile="src/acme_intersection.cc" bodystart="1620" bodyend="1650" declfile="include/acme_intersection.hh" declline="271" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a57b7e1bf30ff6c31e9ce175ae2d07dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with segment <linebreak/>
WARNING: This function does not support collinear objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1655" column="3" bodyfile="src/acme_intersection.cc" bodystart="1655" bodyend="1686" declfile="include/acme_intersection.hh" declline="281" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a5bbe21bfb8f376f6b68e9277322a85b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, plane &amp;plane_out=plane_goat, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> &amp;</type>
          <declname>plane_out</declname>
          <defval><ref refid="a00125_1a6bf42c7afbb107efe10a40041683664a" kindref="member">plane_goat</ref></defval>
          <briefdescription><para>Output plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between planes <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1702" column="3" bodyfile="src/acme_intersection.cc" bodystart="1702" bodyend="1717" declfile="include/acme_intersection.hh" declline="300" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aaadf604446f360ccd37fda97bd9b3cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(triangle const &amp;triangle0_in, triangle const &amp;triangle1_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle0_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle1_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection triangle with disk <linebreak/>
WARNING: This function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1722" column="3" bodyfile="src/acme_intersection.cc" bodystart="1722" bodyend="1730" declfile="include/acme_intersection.hh" declline="310" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a9b3bb1eacbea1492701d2f758d04dd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(disk const &amp;disk0_in, disk const &amp;disk1_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk0_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk1_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection triangle with disk <linebreak/>
WARNING: This function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1735" column="3" bodyfile="src/acme_intersection.cc" bodystart="1735" bodyend="1743" declfile="include/acme_intersection.hh" declline="320" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1abde409713fe340488a86f1299881abb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, plane const &amp;plane_in, line &amp;line_out=THROWAWAY_LINE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> &amp;</type>
          <declname>line_out</declname>
          <defval><ref refid="a00125_1ae9e7fbf006da30585f40caa59b80c50f" kindref="member">THROWAWAY_LINE</ref></defval>
          <briefdescription><para>Output line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with plane <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1761" column="3" bodyfile="src/acme_intersection.cc" bodystart="1761" bodyend="1776" declfile="include/acme_intersection.hh" declline="330" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a35fa92fe8a8e1318904c3c26f2d44e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, triangle const &amp;triangle_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with triangle <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1781" column="3" bodyfile="src/acme_intersection.cc" bodystart="1781" bodyend="1840" declfile="include/acme_intersection.hh" declline="340" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a603ee7d2cd68febafd6c5dc74651a87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, disk const &amp;disk_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with disk <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1845" column="3" bodyfile="src/acme_intersection.cc" bodystart="1845" bodyend="1877" declfile="include/acme_intersection.hh" declline="350" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a6a2003f4eee8dc7e0d46ef8dbb1b7eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, plane const &amp;plane_in, ray &amp;ray_out=THROWAWAY_RAY, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> &amp;</type>
          <declname>ray_out</declname>
          <defval><ref refid="a00125_1adafacf4c96252ebc2f319ba83b7f527d" kindref="member">THROWAWAY_RAY</ref></defval>
          <briefdescription><para>Output ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with plane <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1882" column="3" bodyfile="src/acme_intersection.cc" bodystart="1882" bodyend="1897" declfile="include/acme_intersection.hh" declline="360" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a9939d607409190af51b3045c56d44b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, triangle const &amp;triangle_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with triangle <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1902" column="3" bodyfile="src/acme_intersection.cc" bodystart="1902" bodyend="1916" declfile="include/acme_intersection.hh" declline="370" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a92d2fe977e9715cfc1c067bc9a46a9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, disk const &amp;disk_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with disk <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1921" column="3" bodyfile="src/acme_intersection.cc" bodystart="1921" bodyend="1962" declfile="include/acme_intersection.hh" declline="380" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a73c7007f8f087dea3bbe1ed139437601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, segment const &amp;segment_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with plane <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1967" column="3" bodyfile="src/acme_intersection.cc" bodystart="1967" bodyend="1982" declfile="include/acme_intersection.hh" declline="390" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af3a54e0a1846794c76fc5a4ac59a3735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, triangle const &amp;triangle_in, triangle &amp;triangle_out=THROWAWAY_TRIANGLE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> &amp;</type>
          <declname>triangle_out</declname>
          <defval><ref refid="a00125_1ad9264f64a9af5b0cc2eee576e235abd3" kindref="member">THROWAWAY_TRIANGLE</ref></defval>
          <briefdescription><para>Output triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane with triangle <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1987" column="3" bodyfile="src/acme_intersection.cc" bodystart="1987" bodyend="2002" declfile="include/acme_intersection.hh" declline="400" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1acd5cbb18bddf0a3f51154cf3b5c78aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, disk const &amp;disk_in, disk &amp;disk_out=THROWAWAY_DISK, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> &amp;</type>
          <declname>disk_out</declname>
          <defval><ref refid="a00125_1a5a1130468f34fb910772114deaef2e8c" kindref="member">THROWAWAY_DISK</ref></defval>
          <briefdescription><para>Output disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane with disk <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2007" column="3" bodyfile="src/acme_intersection.cc" bodystart="2007" bodyend="2022" declfile="include/acme_intersection.hh" declline="410" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a17ed9f5ea9c19dd332241b7ab6600351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment_in, triangle const &amp;triangle_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection segment with triangle <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2027" column="3" bodyfile="src/acme_intersection.cc" bodystart="2027" bodyend="2039" declfile="include/acme_intersection.hh" declline="420" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a43718eeae0711eb9f9e872982ad7b74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment_in, disk const &amp;disk_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection segment with disk <linebreak/>
WARNING: This function does only support coplanar objects! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2044" column="3" bodyfile="src/acme_intersection.cc" bodystart="2044" bodyend="2086" declfile="include/acme_intersection.hh" declline="430" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a77ec46ac75e040d63c5e2ee901e5c6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(triangle const &amp;triangle_in, disk const &amp;disk_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection triangle with disk <linebreak/>
WARNING: This function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2091" column="3" bodyfile="src/acme_intersection.cc" bodystart="2091" bodyend="2099" declfile="include/acme_intersection.hh" declline="440" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad4526d05f99f04aaffb03c5e055b8e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, line &amp;line_out=THROWAWAY_LINE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> &amp;</type>
          <declname>line_out</declname>
          <defval><ref refid="a00125_1ae9e7fbf006da30585f40caa59b80c50f" kindref="member">THROWAWAY_LINE</ref></defval>
          <briefdescription><para>Output line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between two planes <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2115" column="3" bodyfile="src/acme_intersection.cc" bodystart="2115" bodyend="2142" declfile="include/acme_intersection.hh" declline="459" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a33e01a332e007dfbd27753e232bc1f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, plane const &amp;plane2_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane2_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between three planes <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2147" column="3" bodyfile="src/acme_intersection.cc" bodystart="2147" bodyend="2173" declfile="include/acme_intersection.hh" declline="469" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a5daf84b1a693cc6fe32c5aaef0dcd06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(triangle const &amp;triangle0_in, triangle const &amp;triangle1_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle0_in</declname>
          <briefdescription><para>Input triangle 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle1_in</declname>
          <briefdescription><para>Input triangle 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between triangles <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2178" column="3" bodyfile="src/acme_intersection.cc" bodystart="2178" bodyend="2199" declfile="include/acme_intersection.hh" declline="480" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4dd6727e9decd72de99dc5fa3ccba3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(disk const &amp;disk0_in, disk const &amp;disk1_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk0_in</declname>
          <briefdescription><para>Input disk 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk1_in</declname>
          <briefdescription><para>Input disk 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between disks <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2204" column="3" bodyfile="src/acme_intersection.cc" bodystart="2204" bodyend="2225" declfile="include/acme_intersection.hh" declline="490" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a38f85be07527604d48f8402c00b6a692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ball const &amp;ball0_in, ball const &amp;ball1_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball0_in</declname>
          <briefdescription><para>Input ball 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball1_in</declname>
          <briefdescription><para>Input ball 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection between balls <linebreak/>
WARNING: This function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="1748" column="3" bodyfile="src/acme_intersection.cc" bodystart="1748" bodyend="1756" declfile="include/acme_intersection.hh" declline="500" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3d6b9a3230eb379038b1278023055d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, plane const &amp;plane_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with plane <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2230" column="3" bodyfile="src/acme_intersection.cc" bodystart="2230" bodyend="2249" declfile="include/acme_intersection.hh" declline="510" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aee09fa5593575d0145839d708403f7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, triangle const &amp;triangle_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line with triangle <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2254" column="3" bodyfile="src/acme_intersection.cc" bodystart="2254" bodyend="2286" declfile="include/acme_intersection.hh" declline="520" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a715a78327eb1ab837df9c0a777b6760e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, disk const &amp;disk_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line and disk <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2291" column="3" bodyfile="src/acme_intersection.cc" bodystart="2291" bodyend="2304" declfile="include/acme_intersection.hh" declline="530" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae9f996d69e33e62da7e8c6a0094eca81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(line const &amp;line_in, ball const &amp;ball_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection line and ball <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2309" column="3" bodyfile="src/acme_intersection.cc" bodystart="2309" bodyend="2332" declfile="include/acme_intersection.hh" declline="540" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af617ffacdbf8f212924fbe3b02638c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, plane const &amp;plane_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with plane <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2337" column="3" bodyfile="src/acme_intersection.cc" bodystart="2337" bodyend="2363" declfile="include/acme_intersection.hh" declline="550" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a34a365f22f9c9b97718ffe3579de718c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, triangle const &amp;triangle_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with triangle <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2368" column="3" bodyfile="src/acme_intersection.cc" bodystart="2368" bodyend="2405" declfile="include/acme_intersection.hh" declline="560" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4f4cc6bb37f3a5c3bd225e06130d16d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, disk const &amp;disk_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with disk <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2410" column="3" bodyfile="src/acme_intersection.cc" bodystart="2410" bodyend="2423" declfile="include/acme_intersection.hh" declline="570" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a416428477a8dc38457b69649f9236f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(ray const &amp;ray_in, ball const &amp;ball_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray and ball <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2428" column="3" bodyfile="src/acme_intersection.cc" bodystart="2428" bodyend="2457" declfile="include/acme_intersection.hh" declline="580" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aa97014fe93b38c38303c5fa69f94a0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, segment const &amp;segment, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane with segment <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2462" column="3" bodyfile="src/acme_intersection.cc" bodystart="2462" bodyend="2488" declfile="include/acme_intersection.hh" declline="590" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3d77e9440ff541d3d050c478f3001929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, triangle const &amp;triangle_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane with triangle <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2493" column="3" bodyfile="src/acme_intersection.cc" bodystart="2493" bodyend="2507" declfile="include/acme_intersection.hh" declline="600" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a90d8c878e2e6c58be5b3fe5f23c0ea48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, disk const &amp;disk_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane with disk <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2512" column="3" bodyfile="src/acme_intersection.cc" bodystart="2512" bodyend="2526" declfile="include/acme_intersection.hh" declline="610" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ade00216e2db7ee64adbd722942b1d0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(plane const &amp;plane_in, ball const &amp;ball_in, disk &amp;disk_out=THROWAWAY_DISK, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> &amp;</type>
          <declname>disk_out</declname>
          <defval><ref refid="a00125_1a5a1130468f34fb910772114deaef2e8c" kindref="member">THROWAWAY_DISK</ref></defval>
          <briefdescription><para>Output disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection plane and ball <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2531" column="3" bodyfile="src/acme_intersection.cc" bodystart="2531" bodyend="2551" declfile="include/acme_intersection.hh" declline="620" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ab3ae966be3419c66da06317aa4eb6ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment_in, triangle const &amp;triangle_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection ray with triangle <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2556" column="3" bodyfile="src/acme_intersection.cc" bodystart="2556" bodyend="2593" declfile="include/acme_intersection.hh" declline="630" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a147591baa79e5bbacc3be7c0b21d1cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment_in, disk const &amp;disk_in, point &amp;point_out=THROWAWAY_POINT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
          <declname>point_out</declname>
          <defval><ref refid="a00125_1adc9f9051f7af6c16ff803d0ce3da9140" kindref="member">THROWAWAY_POINT</ref></defval>
          <briefdescription><para>Output point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection segment with disk <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2598" column="3" bodyfile="src/acme_intersection.cc" bodystart="2598" bodyend="2611" declfile="include/acme_intersection.hh" declline="640" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aeddcdef79e5d43675a599c5e351835f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(segment const &amp;segment_in, ball const &amp;ball_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection segment and ball <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2616" column="3" bodyfile="src/acme_intersection.cc" bodystart="2616" bodyend="2648" declfile="include/acme_intersection.hh" declline="650" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1adb0161445d8881a363552b55f185b875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(triangle const &amp;triangle_in, disk const &amp;disk_in, segment &amp;segment_out=THROWAWAY_SEGMENT, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> &amp;</type>
          <declname>segment_out</declname>
          <defval><ref refid="a00125_1a6862af316bb171dbdc0c922650a2a689" kindref="member">THROWAWAY_SEGMENT</ref></defval>
          <briefdescription><para>Output segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection triangle with disk <linebreak/>
WARNING: This function does not support coplanarity! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2653" column="3" bodyfile="src/acme_intersection.cc" bodystart="2653" bodyend="2667" declfile="include/acme_intersection.hh" declline="660" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1afe9c27c34952584ad01066facd6ab80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(triangle const &amp;triangle_in, ball const &amp;ball_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection triangle and ball <linebreak/>
WARNING: Function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2672" column="3" bodyfile="src/acme_intersection.cc" bodystart="2672" bodyend="2680" declfile="include/acme_intersection.hh" declline="670" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a68730fef3d103634c171bf5907e4880e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(disk const &amp;disk_in, ball const &amp;ball_in, none &amp;none_out=THROWAWAY_NONE, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00157" kindref="compound">none</ref> &amp;</type>
          <declname>none_out</declname>
          <defval><ref refid="a00125_1aa9ec027793a45ec4432ddec9d7be05ad" kindref="member">THROWAWAY_NONE</ref></defval>
          <briefdescription><para>Output none </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersection disk and ball <linebreak/>
WARNING: Function not supported! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2685" column="3" bodyfile="src/acme_intersection.cc" bodystart="2685" bodyend="2693" declfile="include/acme_intersection.hh" declline="680" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a05c47271783a707eafa17cde4a9c730b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::intersection</definition>
        <argsstring>(aabb const &amp;aabb0_in, aabb const &amp;aabb1_in, aabb &amp;aabb_out=THROWAWAY_AABB, real tolerance=EPSILON)</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00129" kindref="compound">aabb</ref> const &amp;</type>
          <declname>aabb0_in</declname>
          <briefdescription><para>Input aabb 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00129" kindref="compound">aabb</ref> const &amp;</type>
          <declname>aabb1_in</declname>
          <briefdescription><para>Input aabb 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00129" kindref="compound">aabb</ref> &amp;</type>
          <declname>aabb_out</declname>
          <defval><ref refid="a00125_1ad5fa2d51ea11dbd586b857204be961de" kindref="member">THROWAWAY_AABB</ref></defval>
          <briefdescription><para>Output aabb </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersection between two axis aligned boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_intersection.cc" line="2709" column="3" bodyfile="src/acme_intersection.cc" bodystart="2709" bodyend="2730" declfile="include/acme_intersection.hh" declline="698" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1abc9f6af85bf2b5e67880a7e86ca16aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isApprox</definition>
        <argsstring>(real value0_in, real value1_in, real tolerance=EPSILON)</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>value0_in</declname>
          <briefdescription><para>Input value 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>value1_in</declname>
          <briefdescription><para>Input value 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Checks if elements are almost equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_math.cc" line="49" column="3" bodyfile="src/acme_math.cc" bodystart="49" bodyend="55" declfile="include/acme_math.hh" declline="53" declcolumn="3"/>
        <referencedby refid="a00125_1ad4526d05f99f04aaffb03c5e055b8e45" compoundref="a00089" startline="2115" endline="2142">intersection</referencedby>
        <referencedby refid="a00137_1a1e6a81d0e6d715fa932cabdbc62f14cd" compoundref="a00071" startline="89" endline="96">acme::ball::isApprox</referencedby>
        <referencedby refid="a00145_1a51d74b07a9773afc818a87215f18e066" compoundref="a00083" startline="104" endline="112">acme::disk::isApprox</referencedby>
        <referencedby refid="a00125_1a08ed2f0943964862922a2fb3807844a3" compoundref="a00080" startline="320" endline="327">isCoplanar</referencedby>
        <referencedby refid="a00137_1a23df275e226d2cd1830523802a9baad5" compoundref="a00071" startline="182" endline="187">acme::ball::isDegenerated</referencedby>
        <referencedby refid="a00145_1a16cb41e8ccb60067dc79dd8b2e5eb3d2" compoundref="a00083" startline="249" endline="255">acme::disk::isDegenerated</referencedby>
        <referencedby refid="a00153_1a93c0adcb1d5edcc4fca9480264b55d18" compoundref="a00092" startline="203" endline="208">acme::line::isDegenerated</referencedby>
        <referencedby refid="a00161_1a567cf25d27e6136f7f1b1b968fbbca67" compoundref="a00107" startline="230" endline="235">acme::plane::isDegenerated</referencedby>
        <referencedby refid="a00169_1a8b6c49530f4255238d95e9e4e1fd19f2" compoundref="a00113" startline="203" endline="208">acme::ray::isDegenerated</referencedby>
        <referencedby refid="a00173_1ab06846d10f2eb624f675a92130feec36" compoundref="a00116" startline="227" endline="232">acme::segment::isDegenerated</referencedby>
        <referencedby refid="a00177_1a65ea29ad558880936a38ec30cc81c3ab" compoundref="a00119" startline="303" endline="310">acme::triangle::isDegenerated</referencedby>
        <referencedby refid="a00153_1a835ccfb6831aa5442690be49abff3380" compoundref="a00092" startline="190" endline="198">acme::line::isInside</referencedby>
        <referencedby refid="a00169_1a195218497e08f9b0d87f3f67232420da" compoundref="a00113" startline="190" endline="198">acme::ray::isInside</referencedby>
        <referencedby refid="a00125_1ad001ff73693b6ba8d8a082fd17351e95" compoundref="a00101" startline="297" endline="303">isOrthogonal</referencedby>
        <referencedby refid="a00125_1a44c333d531305f9ee5df36fe2df264ec" compoundref="a00104" startline="297" endline="303">isParallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1aea8300be04384eb5dd02734f300c4584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::transform</definition>
        <argsstring>(vec3 &amp;vector, affine const &amp;matrix)</argsstring>
        <name>transform</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>vector</declname>
          <briefdescription><para>Input vector to be transformed </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>4x4 transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform ve3 with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_math.cc" line="60" column="3" bodyfile="src/acme_math.cc" bodystart="60" bodyend="65" declfile="include/acme_math.hh" declline="61" declcolumn="3"/>
        <referencedby refid="a00153_1ac9b972d058f2213626bca350abcb71e5" compoundref="a00092" startline="180" endline="185">acme::line::transform</referencedby>
        <referencedby refid="a00161_1a1931313d9ffce1cf743c98f2c964f9d3" compoundref="a00107" startline="209" endline="214">acme::plane::transform</referencedby>
        <referencedby refid="a00169_1a622b58b0b7c7ab26123b975f24a0caf3" compoundref="a00113" startline="180" endline="185">acme::ray::transform</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a166956f7dd6f726b7d917c7bd1b2a231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::angle</definition>
        <argsstring>(vec3 const vector0_in, vec3 const vector1_in)</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
          <declname>vector0_in</declname>
          <briefdescription><para>Input vector 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const</type>
          <declname>vector1_in</declname>
          <briefdescription><para>Input vector 1 </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Angle between vectors [rad]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_math.hh" line="68" column="3" declfile="include/acme_math.hh" declline="68" declcolumn="3"/>
        <referencedby refid="a00141_1ae239f2487ee776be285b6d6711253785" compoundref="a00074" startline="119" endline="125">acme::collection::rotate</referencedby>
        <referencedby refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" compoundref="a00086" startline="49" endline="56">acme::entity::rotate</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a3a6447b7a23ecdc47bb6f557a8a5e9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(entity const *entity0_in, entity const *entity1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity0_in</declname>
          <briefdescription><para>Input entity 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity1_in</declname>
          <briefdescription><para>Input entity 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if geometrical entities are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="49" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="49" bodyend="292" declfile="include/acme_orthogonal.hh" declline="59" declcolumn="3"/>
        <referencedby refid="a00125_1abf7c73891be5f67539bc637d46b008ca" compoundref="a00101" startline="308" endline="314">isOrthogonal</referencedby>
        <referencedby refid="a00125_1a27ab02fd6515c27eae619d27322e33d3" compoundref="a00104" startline="330" endline="336">isParallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad001ff73693b6ba8d8a082fd17351e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector0_in, vec3 const &amp;vector1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector0_in</declname>
          <briefdescription><para>Input vector 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector1_in</declname>
          <briefdescription><para>Input vector 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vectors are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="297" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="297" bodyend="303" declfile="include/acme_orthogonal.hh" declline="67" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1abf7c73891be5f67539bc637d46b008ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, line const &amp;line_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and line are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="308" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="308" bodyend="314" declfile="include/acme_orthogonal.hh" declline="75" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a91331fb1dbd41bd185a6aaa328d16d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and ray are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="319" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="319" bodyend="325" declfile="include/acme_orthogonal.hh" declline="83" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1afe01940c7eed39607923fd05d2cc8362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and plane are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="330" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="330" bodyend="336" declfile="include/acme_orthogonal.hh" declline="91" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad7f4cf9369f8097d0fe5cb4b11d577dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and segment are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="341" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="341" bodyend="347" declfile="include/acme_orthogonal.hh" declline="99" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ad42537de4093cfca4cc960426354fab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and triangle are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="352" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="352" bodyend="358" declfile="include/acme_orthogonal.hh" declline="107" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2df2bf8e56452e7097c01f36b242a773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(vec3 const &amp;vector_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and disk are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="363" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="363" bodyend="369" declfile="include/acme_orthogonal.hh" declline="115" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2a7fc7b5b42bab8b688a4acfe15c54ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if lines are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="374" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="374" bodyend="380" declfile="include/acme_orthogonal.hh" declline="123" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a21afaf957bd666822ab0ddba0b15c3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if rays are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="385" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="385" bodyend="391" declfile="include/acme_orthogonal.hh" declline="131" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae8f0e117f01d4b19bd2038b200fb5c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if planes are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="396" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="396" bodyend="402" declfile="include/acme_orthogonal.hh" declline="139" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2c919b0ec9dd44543f05f5b47e50ee56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segments are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="407" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="407" bodyend="413" declfile="include/acme_orthogonal.hh" declline="147" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1af55538ed1839b0dc79742ef362a2820a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(triangle const &amp;triangle0_in, triangle const &amp;triangle1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle0_in</declname>
          <briefdescription><para>Input triangle 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle1_in</declname>
          <briefdescription><para>Input triangle 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangles layng planes are are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="418" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="418" bodyend="424" declfile="include/acme_orthogonal.hh" declline="155" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a5c5f90b52250e556e0e5e9f69e3749dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(disk const &amp;disk0_in, disk const &amp;disk1_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk0_in</declname>
          <briefdescription><para>Input disk 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk1_in</declname>
          <briefdescription><para>Input disk 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disks layng planes are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="429" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="429" bodyend="435" declfile="include/acme_orthogonal.hh" declline="163" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a5d78e3b72cad956e4759958ffccb6dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and ray are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="440" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="440" bodyend="446" declfile="include/acme_orthogonal.hh" declline="171" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae6d46951dee69e9ea8bd2262af1412a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and plane are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="451" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="451" bodyend="457" declfile="include/acme_orthogonal.hh" declline="179" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae2523422864a88bb71ce5f9c1cbbba56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and segment are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="462" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="462" bodyend="468" declfile="include/acme_orthogonal.hh" declline="187" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2b0cbdc0e66c6bdd1d58b75991acaf5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and triangle are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="473" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="473" bodyend="479" declfile="include/acme_orthogonal.hh" declline="195" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aba6cb36b709d5bf443b6675ab1f57a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(line const &amp;line_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and disk are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="484" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="484" bodyend="490" declfile="include/acme_orthogonal.hh" declline="203" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1adc6aef00436e8d2a5bf0ec455d550a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(ray const &amp;ray_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and plane are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="495" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="495" bodyend="501" declfile="include/acme_orthogonal.hh" declline="211" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a00a871b6d8b50d0fc5397dfb9f2d63c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and segment are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="506" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="506" bodyend="512" declfile="include/acme_orthogonal.hh" declline="219" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a809402c83799f4b9dc31c86756fd321c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(ray const &amp;ray_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and triangle are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="517" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="517" bodyend="523" declfile="include/acme_orthogonal.hh" declline="227" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ac69e935d91e5bbcd51fd28bd6b93897c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(ray const &amp;ray_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and disk are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="528" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="528" bodyend="534" declfile="include/acme_orthogonal.hh" declline="235" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1adcc88c6953629489002592d25c20d996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(plane const &amp;plane_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and plane are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="539" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="539" bodyend="545" declfile="include/acme_orthogonal.hh" declline="243" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a4d8000032410f24484cbfbe4d00845bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(plane const &amp;plane_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and triangle are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="550" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="550" bodyend="556" declfile="include/acme_orthogonal.hh" declline="251" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aaaba9350952fef3f83fc398fea3d481a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(plane const &amp;plane_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and disk layng plane are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="561" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="561" bodyend="567" declfile="include/acme_orthogonal.hh" declline="259" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1adda9fa0864228df8c2aee33472c6c048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(segment const &amp;segment_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and triangle are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="572" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="572" bodyend="578" declfile="include/acme_orthogonal.hh" declline="267" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1abced0da5daececbf9174b5ef76b072e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(segment const &amp;segment_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and disk are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="583" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="583" bodyend="589" declfile="include/acme_orthogonal.hh" declline="275" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a9a9221b21faec883bf96e9281aa2f096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isOrthogonal</definition>
        <argsstring>(triangle const &amp;triangle_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isOrthogonal</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangle and disk are orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_orthogonal.cc" line="594" column="3" bodyfile="src/acme_orthogonal.cc" bodystart="594" bodyend="600" declfile="include/acme_orthogonal.hh" declline="283" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aa10a7f7d9a941da19af1f151e926edd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(entity const *entity0_in, entity const *entity1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity0_in</declname>
          <briefdescription><para>Input entity 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00149" kindref="compound">entity</ref> const *</type>
          <declname>entity1_in</declname>
          <briefdescription><para>Input entity 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if geometrical entities are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="49" column="3" bodyfile="src/acme_parallel.cc" bodystart="49" bodyend="292" declfile="include/acme_parallel.hh" declline="59" declcolumn="3"/>
        <referencedby refid="a00125_1ac723eb11178d5d2a0e49f71856c5892e" compoundref="a00089" startline="1485" endline="1508">intersection</referencedby>
        <referencedby refid="a00125_1a07b1a8a65930414065deafdfff49801d" compoundref="a00077" startline="125" endline="132">isCollinear</referencedby>
        <referencedby refid="a00125_1a08ed2f0943964862922a2fb3807844a3" compoundref="a00080" startline="320" endline="327">isCoplanar</referencedby>
        <referencedby refid="a00125_1afe01940c7eed39607923fd05d2cc8362" compoundref="a00101" startline="330" endline="336">isOrthogonal</referencedby>
        <referencedby refid="a00125_1a88b6e039d8ca836b0f618923b991e1e6" compoundref="a00104" startline="308" endline="314">isParallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00125_1a44c333d531305f9ee5df36fe2df264ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector0_in, vec3 const &amp;vector1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector0_in</declname>
          <briefdescription><para>Input vector 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector1_in</declname>
          <briefdescription><para>Input vector 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vectors are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="297" column="3" bodyfile="src/acme_parallel.cc" bodystart="297" bodyend="303" declfile="include/acme_parallel.hh" declline="67" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a88b6e039d8ca836b0f618923b991e1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, line const &amp;line_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and line are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="308" column="3" bodyfile="src/acme_parallel.cc" bodystart="308" bodyend="314" declfile="include/acme_parallel.hh" declline="75" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2645aeefc6edea5a9b6bafe6a61ea8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and ray are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="319" column="3" bodyfile="src/acme_parallel.cc" bodystart="319" bodyend="325" declfile="include/acme_parallel.hh" declline="83" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a27ab02fd6515c27eae619d27322e33d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and plane are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="330" column="3" bodyfile="src/acme_parallel.cc" bodystart="330" bodyend="336" declfile="include/acme_parallel.hh" declline="91" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a628e2c56c17c79fadb5d51cd864a7239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and segment are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="341" column="3" bodyfile="src/acme_parallel.cc" bodystart="341" bodyend="347" declfile="include/acme_parallel.hh" declline="99" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a63fce624afab00787fafe14518f37f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and triangle are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="352" column="3" bodyfile="src/acme_parallel.cc" bodystart="352" bodyend="358" declfile="include/acme_parallel.hh" declline="107" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a13640619c63d3147e60cfa2042688dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(vec3 const &amp;vector_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if vector and disk are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="363" column="3" bodyfile="src/acme_parallel.cc" bodystart="363" bodyend="369" declfile="include/acme_parallel.hh" declline="115" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a92753820fce8e4e1ddab0c19cc284c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line0_in, line const &amp;line1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line0_in</declname>
          <briefdescription><para>Input line 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line1_in</declname>
          <briefdescription><para>Input line 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if lines are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="372" column="3" bodyfile="src/acme_parallel.cc" bodystart="372" bodyend="378" declfile="include/acme_parallel.hh" declline="123" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ac233b82c5d9333d40662edd9d645d20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(ray const &amp;ray0_in, ray const &amp;ray1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray0_in</declname>
          <briefdescription><para>Input ray 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray1_in</declname>
          <briefdescription><para>Input ray 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if rays are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="383" column="3" bodyfile="src/acme_parallel.cc" bodystart="383" bodyend="389" declfile="include/acme_parallel.hh" declline="131" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a15c0895c8fa5c9bf45d4eb05dc2c06cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(plane const &amp;plane0_in, plane const &amp;plane1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane0_in</declname>
          <briefdescription><para>Input plane 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane1_in</declname>
          <briefdescription><para>Input plane 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if planes are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="394" column="3" bodyfile="src/acme_parallel.cc" bodystart="394" bodyend="400" declfile="include/acme_parallel.hh" declline="139" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a27ecb5cb7d6f06c6380f274c9fc7238e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(segment const &amp;segment0_in, segment const &amp;segment1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment0_in</declname>
          <briefdescription><para>Input segment 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment1_in</declname>
          <briefdescription><para>Input segment 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segments are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="405" column="3" bodyfile="src/acme_parallel.cc" bodystart="405" bodyend="411" declfile="include/acme_parallel.hh" declline="147" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ab4e019bf29015e912eebe0c54f8bfaa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(triangle const &amp;triangle0_in, triangle const &amp;triangle1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle0_in</declname>
          <briefdescription><para>Input triangle 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle1_in</declname>
          <briefdescription><para>Input triangle 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangles layng planes are are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="415" column="3" bodyfile="src/acme_parallel.cc" bodystart="415" bodyend="421" declfile="include/acme_parallel.hh" declline="155" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ab26c13d8baf87e8375653df281f30fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(disk const &amp;disk0_in, disk const &amp;disk1_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk0_in</declname>
          <briefdescription><para>Input disk 0 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk1_in</declname>
          <briefdescription><para>Input disk 1 </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disks layng planes are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="426" column="3" bodyfile="src/acme_parallel.cc" bodystart="426" bodyend="432" declfile="include/acme_parallel.hh" declline="163" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a8a30e6e9a3779ee8782726e2a0632182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line_in, ray const &amp;ray_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and ray are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="437" column="3" bodyfile="src/acme_parallel.cc" bodystart="437" bodyend="443" declfile="include/acme_parallel.hh" declline="171" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a99b25066ec2f1a29ef383a5ce6c4695c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and plane are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="448" column="3" bodyfile="src/acme_parallel.cc" bodystart="448" bodyend="454" declfile="include/acme_parallel.hh" declline="179" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a0140f4791ec14d2c4addf98339efb6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and segment are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="459" column="3" bodyfile="src/acme_parallel.cc" bodystart="459" bodyend="465" declfile="include/acme_parallel.hh" declline="187" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a69dc3d0001b30ce12630c02c2cdf42bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and triangle are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="470" column="3" bodyfile="src/acme_parallel.cc" bodystart="470" bodyend="476" declfile="include/acme_parallel.hh" declline="195" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a72003439091c5a9354abc81055f157cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(line const &amp;line_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>line_in</declname>
          <briefdescription><para>Input line </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if line and disk are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="481" column="3" bodyfile="src/acme_parallel.cc" bodystart="481" bodyend="487" declfile="include/acme_parallel.hh" declline="203" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aaac307858c5a2b3d75acc0aa32f219ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(ray const &amp;ray_in, plane const &amp;plane_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and plane are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="492" column="3" bodyfile="src/acme_parallel.cc" bodystart="492" bodyend="498" declfile="include/acme_parallel.hh" declline="211" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a1564307cee85e7a327b2c6d15c96891e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(ray const &amp;ray_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and segment are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="503" column="3" bodyfile="src/acme_parallel.cc" bodystart="503" bodyend="509" declfile="include/acme_parallel.hh" declline="219" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aae55abdbbba53fdd2f92fba0f135c9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(ray const &amp;ray_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and triangle are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="514" column="3" bodyfile="src/acme_parallel.cc" bodystart="514" bodyend="520" declfile="include/acme_parallel.hh" declline="227" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1ae3fefc24998da6a0b860b18011c0fdb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(ray const &amp;ray_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>ray_in</declname>
          <briefdescription><para>Input ray </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ray and disk are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="525" column="3" bodyfile="src/acme_parallel.cc" bodystart="525" bodyend="531" declfile="include/acme_parallel.hh" declline="235" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a371e7a4c458720e1c5f4a6dbdbe1d805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(plane const &amp;plane_in, segment const &amp;segment_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and plane are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="536" column="3" bodyfile="src/acme_parallel.cc" bodystart="536" bodyend="542" declfile="include/acme_parallel.hh" declline="243" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1add095a71c023f3975bdbf5ae4ffa2480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(plane const &amp;plane_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and triangle are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="547" column="3" bodyfile="src/acme_parallel.cc" bodystart="547" bodyend="553" declfile="include/acme_parallel.hh" declline="251" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1abd2d7cc995fe89682d9d7f40064a9499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(plane const &amp;plane_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane_in</declname>
          <briefdescription><para>Input plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if plane and disk layng plane are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="558" column="3" bodyfile="src/acme_parallel.cc" bodystart="558" bodyend="564" declfile="include/acme_parallel.hh" declline="259" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a6059e609f81d9a899ffa3f6203bbcc3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(segment const &amp;segment_in, triangle const &amp;triangle_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segmentz </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and triangle are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="569" column="3" bodyfile="src/acme_parallel.cc" bodystart="569" bodyend="575" declfile="include/acme_parallel.hh" declline="267" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1affaa6242b59187bd22930e786ebfec85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(segment const &amp;segment_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if segment and disk are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="580" column="3" bodyfile="src/acme_parallel.cc" bodystart="580" bodyend="586" declfile="include/acme_parallel.hh" declline="275" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aaabc19203f586fcc042a6073fb009a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::isParallel</definition>
        <argsstring>(triangle const &amp;triangle_in, disk const &amp;disk_in, real tolerance=EPSILON)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangle and disk are parallel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_parallel.cc" line="591" column="3" bodyfile="src/acme_parallel.cc" bodystart="591" bodyend="597" declfile="include/acme_parallel.hh" declline="283" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a619acaa2ac398ffa344ee7905199b0d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, vec3 const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Point vec3 </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for vec3 object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="58" column="3" declfile="include/acme_utils.hh" declline="58" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a332f0202ef51f78e913eede38ae93845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, point const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Point object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for point object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="65" column="3" declfile="include/acme_utils.hh" declline="65" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1aa031558a7ca7bb712469cb7756ac1835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, line const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00153" kindref="compound">line</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Line object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for line object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="72" column="3" declfile="include/acme_utils.hh" declline="72" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a17204f69f4b6c775b062d24c30e9bd90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, ray const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00169" kindref="compound">ray</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Ray object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for ray object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="79" column="3" declfile="include/acme_utils.hh" declline="79" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a7efc4906d761be06598eedfafd9274fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, plane const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Plane object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for plane object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="86" column="3" declfile="include/acme_utils.hh" declline="86" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2266b0d19ffda4bdcfb3bc4c62486b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, segment const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00173" kindref="compound">segment</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Segment object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for segment object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="93" column="3" declfile="include/acme_utils.hh" declline="93" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a93118aaa3654de1b05aa10c1f4ac8a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, aabb const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00129" kindref="compound">aabb</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Box object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for aabb object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="100" column="3" declfile="include/acme_utils.hh" declline="100" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a9f896ca6a94336f7372d54db3e9587c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, triangle const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Triangle object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for triangle object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="107" column="3" declfile="include/acme_utils.hh" declline="107" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a6a47e794096c09118be045e772ef3087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, disk const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Disk object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for disk object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="114" column="3" declfile="include/acme_utils.hh" declline="114" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a2dc7b43d437a9da4b1a03b18f0f4b523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, ball const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Ball object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for ball object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="121" column="3" declfile="include/acme_utils.hh" declline="121" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a335875aed4afaf2fa0c5ac99bca343c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
        <definition>out_stream&amp; acme::operator&lt;&lt;</definition>
        <argsstring>(out_stream &amp;os, affine const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="a00125_1ad5eedfe3a832e21ca67cbce7d047f46b" kindref="member">out_stream</ref> &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>obj</declname>
          <briefdescription><para>Affine object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Stream out operator for affine object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_utils.hh" line="128" column="3" declfile="include/acme_utils.hh" declline="128" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="a00125_1a8f3a23e9c381cf076839dded2516b512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::angle</definition>
        <argsstring>(vec3 const &amp;vector0_in, vec3 const &amp;vector1_in)</argsstring>
        <name>angle</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector0_in</declname>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector1_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/acme_math.cc" line="70" column="3" bodyfile="src/acme_math.cc" bodystart="70" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace containing all acme typedefs, classes and routines. </para>
    </briefdescription>
    <detaileddescription>
<para>file: <ref refid="a00005" kindref="compound">acme_aabb.hh</ref></para>
<para>file: <ref refid="a00008" kindref="compound">acme_aabbTree.hh</ref></para>
<para>file: <ref refid="a00011" kindref="compound">acme_ball.hh</ref></para>
<para>file: <ref refid="a00014" kindref="compound">acme_collection.hh</ref></para>
<para>file: <ref refid="a00017" kindref="compound">acme_collinear.hh</ref></para>
<para>file: <ref refid="a00020" kindref="compound">acme_coplanar.hh</ref></para>
<para>file: <ref refid="a00023" kindref="compound">acme_disk.hh</ref></para>
<para>file: <ref refid="a00026" kindref="compound">acme_entity.hh</ref></para>
<para>file: <ref refid="a00029" kindref="compound">acme_intersection.hh</ref></para>
<para>file: <ref refid="a00032" kindref="compound">acme_line.hh</ref></para>
<para>file: <ref refid="a00035" kindref="compound">acme_math.hh</ref></para>
<para>file: <ref refid="a00038" kindref="compound">acme_none.hh</ref></para>
<para>file: <ref refid="a00041" kindref="compound">acme_orthogonal.hh</ref></para>
<para>file: <ref refid="a00044" kindref="compound">acme_parallel.hh</ref></para>
<para>file: <ref refid="a00047" kindref="compound">acme_plane.hh</ref></para>
<para>file: <ref refid="a00050" kindref="compound">acme_point.hh</ref></para>
<para>file: <ref refid="a00053" kindref="compound">acme_ray.hh</ref></para>
<para>file: <ref refid="a00056" kindref="compound">acme_segment.hh</ref></para>
<para>file: <ref refid="a00059" kindref="compound">acme_triangle.hh</ref></para>
<para>file: <ref refid="a00062" kindref="compound">acme_utils.hh</ref></para>
<para>file: <ref refid="a00065" kindref="compound">acme_aabb.cc</ref></para>
<para>file: <ref refid="a00068" kindref="compound">acme_AABBtree.cc</ref></para>
<para>file: <ref refid="a00071" kindref="compound">acme_ball.cc</ref></para>
<para>file: <ref refid="a00074" kindref="compound">acme_collection.cc</ref></para>
<para>file: <ref refid="a00077" kindref="compound">acme_collinear.cc</ref></para>
<para>file: <ref refid="a00080" kindref="compound">acme_coplanar.cc</ref></para>
<para>file: <ref refid="a00083" kindref="compound">acme_disk.cc</ref></para>
<para>file: <ref refid="a00086" kindref="compound">acme_entity.cc</ref></para>
<para>file: <ref refid="a00089" kindref="compound">acme_intersection.cc</ref></para>
<para>file: <ref refid="a00092" kindref="compound">acme_line.cc</ref></para>
<para>file: <ref refid="a00095" kindref="compound">acme_math.cc</ref></para>
<para>file: <ref refid="a00098" kindref="compound">acme_none.cc</ref></para>
<para>file: <ref refid="a00101" kindref="compound">acme_orthogonal.cc</ref></para>
<para>file: <ref refid="a00104" kindref="compound">acme_parallel.cc</ref></para>
<para>file: <ref refid="a00107" kindref="compound">acme_plane.cc</ref></para>
<para>file: <ref refid="a00110" kindref="compound">acme_point.cc</ref></para>
<para>file: acme_ray.ccc</para>
<para>file: <ref refid="a00116" kindref="compound">acme_segment.cc</ref></para>
<para>file: <ref refid="a00119" kindref="compound">acme_triangle.cc</ref> </para>
    </detaileddescription>
    <location file="include/acme.hh" line="67" column="1"/>
  </compounddef>
</doxygen>
