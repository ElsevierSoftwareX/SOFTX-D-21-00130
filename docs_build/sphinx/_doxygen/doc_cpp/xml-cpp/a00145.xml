<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00145" kind="class" language="C++" prot="public">
    <compoundname>acme::disk</compoundname>
    <basecompoundref refid="a00149" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00023" local="no">acme_disk.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00145_1a46696a5ed70c58193543ad8862dd23c8" prot="private" static="no" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::disk::m_radius</definition>
        <argsstring></argsstring>
        <name>m_radius</name>
        <briefdescription>
<para>Disk radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="59" column="10" bodyfile="include/acme_disk.hh" bodystart="59" bodyend="-1"/>
        <referencedby refid="a00145_1a95c21a733a382c69a3b0059f7b4ad9fb" compoundref="a00083" startline="210" endline="214">area</referencedby>
        <referencedby refid="a00145_1a569374f488585ec71fe995bcaace635b" compoundref="a00083" startline="260" endline="273">clamp</referencedby>
        <referencedby refid="a00145_1a51d74b07a9773afc818a87215f18e066" compoundref="a00083" startline="104" endline="112">isApprox</referencedby>
        <referencedby refid="a00145_1a16cb41e8ccb60067dc79dd8b2e5eb3d2" compoundref="a00083" startline="249" endline="255">isDegenerated</referencedby>
        <referencedby refid="a00145_1a1b3cd80cf8fd95c076b5ea160579a7a2" compoundref="a00083" startline="237" endline="244">isInside</referencedby>
        <referencedby refid="a00145_1a44306c65798b1361a6bc723a32f9ed4a" compoundref="a00083" startline="86" endline="99">operator=</referencedby>
        <referencedby refid="a00145_1a9b12cd7fcd62ca41ca41aecd3d776d14" compoundref="a00083" startline="201" endline="205">perimeter</referencedby>
        <referencedby refid="a00145_1ac0c929a7ec4555954f86c3e7f1e3d6cb" compoundref="a00083" startline="117" endline="121">radius</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00145_1a0e8feebfc35fc309be8f0692c3418743" prot="private" static="no" mutable="no">
        <type><ref refid="a00161" kindref="compound">plane</ref></type>
        <definition>plane acme::disk::m_plane</definition>
        <argsstring></argsstring>
        <name>m_plane</name>
        <briefdescription>
<para>Disk plane (disk center + normal vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="60" column="11" bodyfile="include/acme_disk.hh" bodystart="60" bodyend="-1"/>
        <referencedby refid="a00145_1add56db0aa6ea3baa218ea5c8b3f4a098" compoundref="a00083" startline="134" endline="138">center</referencedby>
        <referencedby refid="a00145_1a569374f488585ec71fe995bcaace635b" compoundref="a00083" startline="260" endline="273">clamp</referencedby>
        <referencedby refid="a00145_1a51d74b07a9773afc818a87215f18e066" compoundref="a00083" startline="104" endline="112">isApprox</referencedby>
        <referencedby refid="a00145_1a16cb41e8ccb60067dc79dd8b2e5eb3d2" compoundref="a00083" startline="249" endline="255">isDegenerated</referencedby>
        <referencedby refid="a00145_1a1b3cd80cf8fd95c076b5ea160579a7a2" compoundref="a00083" startline="237" endline="244">isInside</referencedby>
        <referencedby refid="a00145_1a4e2e07db219ba56b675770fc81c8c44b" compoundref="a00083" startline="168" endline="172">layingPlane</referencedby>
        <referencedby refid="a00145_1ab58a4899383a3a19ab92b53a23d63b52" compoundref="a00083" startline="151" endline="155">normal</referencedby>
        <referencedby refid="a00145_1a9d8be108b28dcc18a1ced371bf58c7b8" compoundref="a00083" startline="185" endline="188">normalize</referencedby>
        <referencedby refid="a00145_1a44306c65798b1361a6bc723a32f9ed4a" compoundref="a00083" startline="86" endline="99">operator=</referencedby>
        <referencedby refid="a00145_1a81fd14841280df839703360214831f4d" compoundref="a00083" startline="193" endline="196">reverse</referencedby>
        <referencedby refid="a00145_1a95977bb8b412e0298ff34770f4e36e5b" compoundref="a00083" startline="228" endline="232">transform</referencedby>
        <referencedby refid="a00145_1a14ddecf475ad030fd8c2cb0fc2f6ca34" compoundref="a00083" startline="219" endline="223">translate</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00145_1a82c573a689b996c9a9ee208ca643c306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::disk::~disk</definition>
        <argsstring>()</argsstring>
        <name>~disk</name>
        <briefdescription>
<para>Disk class deconstructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="64" column="5" bodyfile="include/acme_disk.hh" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1abf51440e6f5d6bdafd6e07d237aec293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>()</argsstring>
        <name>disk</name>
        <briefdescription>
<para>Disk class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="67" column="5" bodyfile="include/acme_disk.hh" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1adb6a6f997da30f1bd7a7a74547a7a793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>(disk const &amp;)=default</argsstring>
        <name>disk</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Disk copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a2daf29f03ca54fe324a83acec9356c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>(disk &amp;&amp;)=default</argsstring>
        <name>disk</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Disk move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a05724d4d984926429ff35853056cf73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>(real radius, plane const &amp;plane)</argsstring>
        <name>disk</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>radius</declname>
          <briefdescription><para>Input disk radius </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00161" kindref="compound">plane</ref> const &amp;</type>
          <declname>plane</declname>
          <briefdescription><para>Input disk laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Disk class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="76" column="5" bodyfile="src/acme_disk.cc" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a7832218351ede9860a5e2a2e97d6a804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>(real radius, point const &amp;center, vec3 const &amp;normal)</argsstring>
        <name>disk</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>radius</declname>
          <briefdescription><para>Input disk radius </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>center</declname>
          <briefdescription><para>Input disk center </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Input disk normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Disk class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="82" column="5" bodyfile="src/acme_disk.cc" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a715737d88c33f2d1705d61161da6d376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::disk::disk</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z, real normal_x, real normal_y, real normal_z)</argsstring>
        <name>disk</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>radius</declname>
          <briefdescription><para>Input disk radius </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_x</declname>
          <briefdescription><para>Input disk center x value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_y</declname>
          <briefdescription><para>Input disk center y value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_z</declname>
          <briefdescription><para>Input disk center z value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>normal_x</declname>
          <briefdescription><para>Input disk normal x value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>normal_y</declname>
          <briefdescription><para>Input disk normal y value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>normal_z</declname>
          <briefdescription><para>Input disk normal z value to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Disk class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="89" column="5" bodyfile="src/acme_disk.cc" bodystart="69" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a44306c65798b1361a6bc723a32f9ed4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00145" kindref="compound">disk</ref> &amp;</type>
        <definition>disk &amp; acme::disk::operator=</definition>
        <argsstring>(disk const &amp;disk_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="101" column="5" bodyfile="src/acme_disk.cc" bodystart="86" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a51d74b07a9773afc818a87215f18e066" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::disk::isApprox</definition>
        <argsstring>(disk const &amp;disk_in, real tolerance=EPSILON) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00145" kindref="compound">disk</ref> const &amp;</type>
          <declname>disk_in</declname>
          <briefdescription><para>Input disk object </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disks are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="107" column="5" bodyfile="src/acme_disk.cc" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1ac0c929a7ec4555954f86c3e7f1e3d6cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const  &amp;</type>
        <definition>real const  &amp; acme::disk::radius</definition>
        <argsstring>(void) const</argsstring>
        <name>radius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk radius const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="114" column="5" bodyfile="src/acme_disk.cc" bodystart="117" bodyend="121"/>
        <referencedby refid="a00125_1a603ee7d2cd68febafd6c5dc74651a87f" compoundref="a00089" startline="1845" endline="1877">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1ae0e3ebda7c650028f795b4f53f7ab903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
        <definition>real &amp; acme::disk::radius</definition>
        <argsstring>(void)</argsstring>
        <name>radius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk radius reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="118" column="5" bodyfile="src/acme_disk.cc" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1add56db0aa6ea3baa218ea5c8b3f4a098" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> const  &amp;</type>
        <definition>point const  &amp; acme::disk::center</definition>
        <argsstring>(void) const</argsstring>
        <name>center</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk center point const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="122" column="5" bodyfile="src/acme_disk.cc" bodystart="134" bodyend="138"/>
        <referencedby refid="a00125_1a603ee7d2cd68febafd6c5dc74651a87f" compoundref="a00089" startline="1845" endline="1877">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1ae4f33be0e39db1be6da3dd404533a833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; acme::disk::center</definition>
        <argsstring>(void)</argsstring>
        <name>center</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk center point reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="126" column="5" bodyfile="src/acme_disk.cc" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1ab58a4899383a3a19ab92b53a23d63b52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const  &amp;</type>
        <definition>vec3 const  &amp; acme::disk::normal</definition>
        <argsstring>(void) const</argsstring>
        <name>normal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk laying plane normal vector const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="130" column="5" bodyfile="src/acme_disk.cc" bodystart="151" bodyend="155"/>
        <referencedby refid="a00125_1ade00216e2db7ee64adbd722942b1d0d4" compoundref="a00089" startline="2531" endline="2551">acme::intersection</referencedby>
        <referencedby refid="a00125_1a2df2bf8e56452e7097c01f36b242a773" compoundref="a00101" startline="363" endline="369">acme::isOrthogonal</referencedby>
        <referencedby refid="a00125_1a13640619c63d3147e60cfa2042688dac" compoundref="a00104" startline="363" endline="369">acme::isParallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1a29696a2d3879579cb314a5f3f0eb20f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
        <definition>vec3 &amp; acme::disk::normal</definition>
        <argsstring>(void)</argsstring>
        <name>normal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get disk laying plane normal vector reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="134" column="5" bodyfile="src/acme_disk.cc" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a4e2e07db219ba56b675770fc81c8c44b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00161" kindref="compound">plane</ref> const  &amp;</type>
        <definition>acme::plane const  &amp; acme::disk::layingPlane</definition>
        <argsstring>(void) const</argsstring>
        <name>layingPlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get cicle laying plane const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="138" column="5" bodyfile="src/acme_disk.cc" bodystart="168" bodyend="172"/>
        <referencedby refid="a00125_1a4dd6727e9decd72de99dc5fa3ccba3c2" compoundref="a00089" startline="2204" endline="2225">acme::intersection</referencedby>
        <referencedby refid="a00125_1a47cb7b64855d2fc20f7d1f47159f413b" compoundref="a00080" startline="356" endline="364">acme::isCoplanar</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1acff74d44976396f15738cfa496e4b41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00161" kindref="compound">plane</ref> &amp;</type>
        <definition>acme::plane &amp; acme::disk::layingPlane</definition>
        <argsstring>(void)</argsstring>
        <name>layingPlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get cicle laying plane reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="142" column="5" bodyfile="src/acme_disk.cc" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a9d8be108b28dcc18a1ced371bf58c7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::disk::normalize</definition>
        <argsstring>(void)</argsstring>
        <name>normalize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Normalize disk normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="146" column="5" bodyfile="src/acme_disk.cc" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a81fd14841280df839703360214831f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::disk::reverse</definition>
        <argsstring>(void)</argsstring>
        <name>reverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reverse disk normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="150" column="5" bodyfile="src/acme_disk.cc" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a9b12cd7fcd62ca41ca41aecd3d776d14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::disk::perimeter</definition>
        <argsstring>(void) const</argsstring>
        <name>perimeter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate disk circumference length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="154" column="5" bodyfile="src/acme_disk.cc" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a95c21a733a382c69a3b0059f7b4ad9fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::disk::area</definition>
        <argsstring>(void) const</argsstring>
        <name>area</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate disk area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="159" column="5" bodyfile="src/acme_disk.cc" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a14ddecf475ad030fd8c2cb0fc2f6ca34" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::disk::translate</definition>
        <argsstring>(vec3 const &amp;vector_in) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00149_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="163" column="5" bodyfile="src/acme_disk.cc" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a95977bb8b412e0298ff34770f4e36e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::disk::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00149_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform disk with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="169" column="5" bodyfile="src/acme_disk.cc" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a1b3cd80cf8fd95c076b5ea160579a7a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::disk::isInside</definition>
        <argsstring>(point const &amp;point_in, real tolerance=EPSILON) const</argsstring>
        <name>isInside</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Query point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="175" column="5" bodyfile="src/acme_disk.cc" bodystart="237" bodyend="244"/>
        <referencedby refid="a00125_1af5b1955c7a3182f037a15e85be10e22d" compoundref="a00089" startline="1456" endline="1471">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1a16cb41e8ccb60067dc79dd8b2e5eb3d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00149_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disk is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="182" column="5" bodyfile="src/acme_disk.cc" bodystart="249" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1af879f24fe959bcc1ea48d21ff717ab3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::disk::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00149_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="187" column="13" bodyfile="include/acme_disk.hh" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1ac2ecc7c9d7cda0c6c3ddd31ad15af137" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::disk::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00149_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="190" column="17" bodyfile="include/acme_disk.hh" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a46dac95d0af8df01b4638aab14a4aebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00149_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="193" column="10" bodyfile="include/acme_disk.hh" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a98535fea48a7fcdeccce8682026a5f2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00149_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="196" column="10" bodyfile="include/acme_disk.hh" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a0aeb5df0ffce6d019e3fd9c500e78c0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00149_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="199" column="10" bodyfile="include/acme_disk.hh" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1aad8a129cb74d4de535635079c8bd0d27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00149_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="202" column="10" bodyfile="include/acme_disk.hh" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a75dc057eb68809ee10faaf0661ef49b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00149_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="205" column="10" bodyfile="include/acme_disk.hh" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a0f8fd86a75d8d300aea89c9d9663209d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00149_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="208" column="10" bodyfile="include/acme_disk.hh" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a547fdb98009c3b5f499358ee17b03dc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00149_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="211" column="10" bodyfile="include/acme_disk.hh" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a9baf40eb60c9710f9801a2babd2e52c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00149_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="214" column="10" bodyfile="include/acme_disk.hh" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a545bcd284e489887c99eadcb8a5907ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00149_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="217" column="10" bodyfile="include/acme_disk.hh" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1aa58adee99e6200117368615f4f34dd9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00149_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the disk is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="220" column="10" bodyfile="include/acme_disk.hh" bodystart="220" bodyend="220"/>
        <referencedby refid="a00145_1a569374f488585ec71fe995bcaace635b" compoundref="a00083" startline="260" endline="273">clamp</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00145_1a6e2b619c9b00f5bfa1d08d6bb1dc0128" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00149_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the disk is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="223" column="10" bodyfile="include/acme_disk.hh" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a569374f488585ec71fe995bcaace635b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::clamp</definition>
        <argsstring>(vec3 &amp;min, vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="227" column="5" bodyfile="src/acme_disk.cc" bodystart="260" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="a00145_1a1a327a46909396efffe0efd16300600d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::disk::clamp</definition>
        <argsstring>(real &amp;min_x, real &amp;min_y, real &amp;min_z, real &amp;max_x, real &amp;max_y, real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_disk.hh" line="234" column="5" bodyfile="src/acme_disk.cc" bodystart="278" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5" bodyfile="src/acme_entity.cc" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10" bodyfile="src/acme_entity.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00149" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Disk class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Disk in 3D space and defined by a radius and a plane (disk center + normal vector). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::disk</label>
        <link refid="a00145"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="3">
        <label>acme::plane</label>
        <link refid="a00161"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_origin</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>acme::point</label>
        <link refid="a00165"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>acme::disk</label>
        <link refid="a00145"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_plane</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_disk.hh" line="56" column="3" bodyfile="include/acme_disk.hh" bodystart="57" bodyend="243"/>
    <listofallmembers>
      <member refid="a00145_1a95c21a733a382c69a3b0059f7b4ad9fb" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>area</name></member>
      <member refid="a00145_1add56db0aa6ea3baa218ea5c8b3f4a098" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>center</name></member>
      <member refid="a00145_1ae4f33be0e39db1be6da3dd404533a833" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>center</name></member>
      <member refid="a00145_1a569374f488585ec71fe995bcaace635b" prot="public" virt="virtual"><scope>acme::disk</scope><name>clamp</name></member>
      <member refid="a00145_1a1a327a46909396efffe0efd16300600d" prot="public" virt="virtual"><scope>acme::disk</scope><name>clamp</name></member>
      <member refid="a00145_1abf51440e6f5d6bdafd6e07d237aec293" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00145_1adb6a6f997da30f1bd7a7a74547a7a793" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00145_1a2daf29f03ca54fe324a83acec9356c07" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00145_1a05724d4d984926429ff35853056cf73d" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00145_1a7832218351ede9860a5e2a2e97d6a804" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00145_1a715737d88c33f2d1705d61161da6d376" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>disk</name></member>
      <member refid="a00149_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>entity</name></member>
      <member refid="a00145_1a51d74b07a9773afc818a87215f18e066" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>isApprox</name></member>
      <member refid="a00145_1a545bcd284e489887c99eadcb8a5907ab" prot="public" virt="virtual"><scope>acme::disk</scope><name>isBall</name></member>
      <member refid="a00145_1aa58adee99e6200117368615f4f34dd9e" prot="public" virt="virtual"><scope>acme::disk</scope><name>isClampable</name></member>
      <member refid="a00145_1a16cb41e8ccb60067dc79dd8b2e5eb3d2" prot="public" virt="virtual"><scope>acme::disk</scope><name>isDegenerated</name></member>
      <member refid="a00145_1a9baf40eb60c9710f9801a2babd2e52c6" prot="public" virt="virtual"><scope>acme::disk</scope><name>isDisk</name></member>
      <member refid="a00149_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>isEntity</name></member>
      <member refid="a00145_1a1b3cd80cf8fd95c076b5ea160579a7a2" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>isInside</name></member>
      <member refid="a00145_1a0aeb5df0ffce6d019e3fd9c500e78c0e" prot="public" virt="virtual"><scope>acme::disk</scope><name>isLine</name></member>
      <member refid="a00145_1a6e2b619c9b00f5bfa1d08d6bb1dc0128" prot="public" virt="virtual"><scope>acme::disk</scope><name>isNonClampable</name></member>
      <member refid="a00145_1a46dac95d0af8df01b4638aab14a4aebe" prot="public" virt="virtual"><scope>acme::disk</scope><name>isNone</name></member>
      <member refid="a00145_1a75dc057eb68809ee10faaf0661ef49b3" prot="public" virt="virtual"><scope>acme::disk</scope><name>isPlane</name></member>
      <member refid="a00145_1a98535fea48a7fcdeccce8682026a5f2b" prot="public" virt="virtual"><scope>acme::disk</scope><name>isPoint</name></member>
      <member refid="a00145_1aad8a129cb74d4de535635079c8bd0d27" prot="public" virt="virtual"><scope>acme::disk</scope><name>isRay</name></member>
      <member refid="a00145_1a0f8fd86a75d8d300aea89c9d9663209d" prot="public" virt="virtual"><scope>acme::disk</scope><name>isSegment</name></member>
      <member refid="a00145_1a547fdb98009c3b5f499358ee17b03dc4" prot="public" virt="virtual"><scope>acme::disk</scope><name>isTriangle</name></member>
      <member refid="a00145_1a4e2e07db219ba56b675770fc81c8c44b" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>layingPlane</name></member>
      <member refid="a00145_1acff74d44976396f15738cfa496e4b41a" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>layingPlane</name></member>
      <member refid="a00145_1af879f24fe959bcc1ea48d21ff717ab3d" prot="public" virt="virtual"><scope>acme::disk</scope><name>level</name></member>
      <member refid="a00145_1a0e8feebfc35fc309be8f0692c3418743" prot="private" virt="non-virtual"><scope>acme::disk</scope><name>m_plane</name></member>
      <member refid="a00145_1a46696a5ed70c58193543ad8862dd23c8" prot="private" virt="non-virtual"><scope>acme::disk</scope><name>m_radius</name></member>
      <member refid="a00145_1ab58a4899383a3a19ab92b53a23d63b52" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>normal</name></member>
      <member refid="a00145_1a29696a2d3879579cb314a5f3f0eb20f2" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>normal</name></member>
      <member refid="a00145_1a9d8be108b28dcc18a1ced371bf58c7b8" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>normalize</name></member>
      <member refid="a00145_1a44306c65798b1361a6bc723a32f9ed4a" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>operator=</name></member>
      <member refid="a00145_1a9b12cd7fcd62ca41ca41aecd3d776d14" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>perimeter</name></member>
      <member refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>ptr</name></member>
      <member refid="a00145_1ac0c929a7ec4555954f86c3e7f1e3d6cb" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>radius</name></member>
      <member refid="a00145_1ae0e3ebda7c650028f795b4f53f7ab903" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>radius</name></member>
      <member refid="a00145_1a81fd14841280df839703360214831f4d" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>reverse</name></member>
      <member refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>rotate</name></member>
      <member refid="a00145_1a95977bb8b412e0298ff34770f4e36e5b" prot="public" virt="virtual"><scope>acme::disk</scope><name>transform</name></member>
      <member refid="a00145_1a14ddecf475ad030fd8c2cb0fc2f6ca34" prot="public" virt="virtual"><scope>acme::disk</scope><name>translate</name></member>
      <member refid="a00145_1ac2ecc7c9d7cda0c6c3ddd31ad15af137" prot="public" virt="virtual"><scope>acme::disk</scope><name>type</name></member>
      <member refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>vecptr</name></member>
      <member refid="a00145_1a82c573a689b996c9a9ee208ca643c306" prot="public" virt="non-virtual"><scope>acme::disk</scope><name>~disk</name></member>
      <member refid="a00149_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::disk</scope><name>~entity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
