<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00141" kind="class" language="C++" prot="public">
    <compoundname>acme::collection</compoundname>
    <includes refid="a00014" local="no">acme_collection.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00141_1a76d7d962eb280c60081db06902432d49" prot="private" static="no" mutable="no">
        <type><ref refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" kindref="member">entity::vecptr</ref></type>
        <definition>entity::vecptr acme::collection::m_entities</definition>
        <argsstring></argsstring>
        <name>m_entities</name>
        <briefdescription>
<para>Vector of shared pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="61" column="20" bodyfile="include/acme_collection.hh" bodystart="61" bodyend="-1"/>
        <referencedby refid="a00141_1a28ec5025e6d428c6c4574c1d6f8f4017" compoundref="a00074" startline="674" endline="683">areBall</referencedby>
        <referencedby refid="a00141_1ae9f82162eb5b009eecbc6936a99e49b3" compoundref="a00074" startline="809" endline="818">areClampable</referencedby>
        <referencedby refid="a00141_1af6fbfa2f20b271f2489701a82a9c8ac5" compoundref="a00074" startline="740" endline="750">areDegenerated</referencedby>
        <referencedby refid="a00141_1a682eb08b6e66dff09667052a9fa09d8f" compoundref="a00074" startline="609" endline="618">areDisk</referencedby>
        <referencedby refid="a00141_1a09b314a685cac443bc8f1a44d6cf4d2d" compoundref="a00074" startline="284" endline="293">areLine</referencedby>
        <referencedby refid="a00141_1af715a46ba307dc56433d019ae55468d6" compoundref="a00074" startline="874" endline="883">areNonClampable</referencedby>
        <referencedby refid="a00141_1a7df0547c1bb1b8bcf507a71f8e8e0526" compoundref="a00074" startline="154" endline="163">areNone</referencedby>
        <referencedby refid="a00141_1a14a8fe4561c19fa62d7d9432a97242c6" compoundref="a00074" startline="414" endline="423">arePlane</referencedby>
        <referencedby refid="a00141_1ace1975382b16ba2d425569bb13a1ec31" compoundref="a00074" startline="219" endline="228">arePoint</referencedby>
        <referencedby refid="a00141_1a5df467fd92645db124a3d922688358dc" compoundref="a00074" startline="349" endline="358">areRay</referencedby>
        <referencedby refid="a00141_1a3ff60938e98a2c350b0135293da739c5" compoundref="a00074" startline="479" endline="488">areSegment</referencedby>
        <referencedby refid="a00141_1a6ddea160cd063150abafcc2645a923f5" compoundref="a00074" startline="544" endline="553">areTriangle</referencedby>
        <referencedby refid="a00141_1ad83e78415297c52b6088677d65e997c0" compoundref="a00074" startline="955" endline="969">clamp</referencedby>
        <referencedby refid="a00141_1a7d1d35e9b34c5ddb8fe76c18e9203a9e" compoundref="a00074" startline="65" endline="68">clear</referencedby>
        <referencedby refid="a00141_1a164f898e95ee9557bad7a868b9d15712" compoundref="a00074" startline="55" endline="60">collection</referencedby>
        <referencedby refid="a00141_1a23582c6ebeb1a72b19d16b76e68fdc7e" compoundref="a00074" startline="660" endline="669">containBall</referencedby>
        <referencedby refid="a00141_1a0f76aee7dee0d1a6ead3bf2ea401b8e9" compoundref="a00074" startline="795" endline="804">containClampable</referencedby>
        <referencedby refid="a00141_1a8ddf36976681acfd09f96d271775de61" compoundref="a00074" startline="725" endline="735">containDegenerated</referencedby>
        <referencedby refid="a00141_1a9ca37739749ce2e7d4648208aede203e" compoundref="a00074" startline="595" endline="604">containDisk</referencedby>
        <referencedby refid="a00141_1a502bf656c0bf17bc52c29c6b8b890500" compoundref="a00074" startline="270" endline="279">containLine</referencedby>
        <referencedby refid="a00141_1a5eb3919f95c1a04d823f409de8e3d3f4" compoundref="a00074" startline="860" endline="869">containNonClampable</referencedby>
        <referencedby refid="a00141_1a5618af1573664ebb1676ea8dc2354cb7" compoundref="a00074" startline="140" endline="149">containNone</referencedby>
        <referencedby refid="a00141_1a43921e97780f912aff296f122f88881f" compoundref="a00074" startline="400" endline="409">containPlane</referencedby>
        <referencedby refid="a00141_1a8f64e6f73a8bf7c9d3815c7e544dd633" compoundref="a00074" startline="205" endline="214">containPoint</referencedby>
        <referencedby refid="a00141_1aea89f20da0c42193514dce154d7c01c8" compoundref="a00074" startline="335" endline="344">containRay</referencedby>
        <referencedby refid="a00141_1a6bf36cf6fcb20f8e2bc83d16a7dc2384" compoundref="a00074" startline="465" endline="474">containSegment</referencedby>
        <referencedby refid="a00141_1a411eb7006e3890908e35678f7599866d" compoundref="a00074" startline="530" endline="539">containTriangle</referencedby>
        <referencedby refid="a00141_1a8fa554b66cecb86c6b44be8a697277c5" compoundref="a00074" startline="710" endline="720">countBall</referencedby>
        <referencedby refid="a00141_1ae054501f8d171abb06a958c7935f8cdf" compoundref="a00074" startline="845" endline="855">countClampable</referencedby>
        <referencedby refid="a00141_1a4df1a17bd2c58c215e4e3d5267ec16e6" compoundref="a00074" startline="779" endline="790">countDegenerated</referencedby>
        <referencedby refid="a00141_1a2c352878015e00d4504960bb9acbe227" compoundref="a00074" startline="645" endline="655">countDisk</referencedby>
        <referencedby refid="a00141_1a8a0101f8236a434c889f77994ee2e19c" compoundref="a00074" startline="320" endline="330">countLine</referencedby>
        <referencedby refid="a00141_1ac0b6314c5e2ecbd950e772c4c70fbf37" compoundref="a00074" startline="910" endline="920">countNonClampable</referencedby>
        <referencedby refid="a00141_1a5582716d9944e1d8efea6fdbaa93d542" compoundref="a00074" startline="190" endline="200">countNone</referencedby>
        <referencedby refid="a00141_1a7512c96440cbec19ac56946d60dcb046" compoundref="a00074" startline="450" endline="460">countPlane</referencedby>
        <referencedby refid="a00141_1a24be45419115c12bae3e688d2dc3b140" compoundref="a00074" startline="255" endline="265">countPoint</referencedby>
        <referencedby refid="a00141_1a8483c9f1e3b0350da6c787a8a21f0813" compoundref="a00074" startline="385" endline="395">countRay</referencedby>
        <referencedby refid="a00141_1ad977ddee9270a4fecab72ca98f1d52dd" compoundref="a00074" startline="515" endline="525">countSegment</referencedby>
        <referencedby refid="a00141_1aa89bf294b11cb8b711ba75cd59459f1a" compoundref="a00074" startline="580" endline="590">countTriangle</referencedby>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
        <referencedby refid="a00141_1a10961ec0f21f3ad71bd7435281c93d60" compoundref="a00074" startline="688" endline="693">isBall</referencedby>
        <referencedby refid="a00141_1a4850e3574b6a39f787b15d7e9e37138c" compoundref="a00074" startline="823" endline="828">isClampable</referencedby>
        <referencedby refid="a00141_1aa5084996b357d0f3168cdef890f35149" compoundref="a00074" startline="755" endline="761">isDegenerated</referencedby>
        <referencedby refid="a00141_1a7547abd98c281f856bbba8885c87c977" compoundref="a00074" startline="623" endline="628">isDisk</referencedby>
        <referencedby refid="a00141_1ad1344851c4187d7317c7cb89743399b6" compoundref="a00074" startline="298" endline="303">isLine</referencedby>
        <referencedby refid="a00141_1a332a75b3b2daa36433c615b21b42f5de" compoundref="a00074" startline="888" endline="893">isNonClampable</referencedby>
        <referencedby refid="a00141_1adb2f3249e5beec63bc3dee4360f032da" compoundref="a00074" startline="168" endline="173">isNone</referencedby>
        <referencedby refid="a00141_1a2d978081afbeb703d3d53cc43aaab962" compoundref="a00074" startline="428" endline="433">isPlane</referencedby>
        <referencedby refid="a00141_1a5cb1bc74f58b39f9f604dd2bedc5eea0" compoundref="a00074" startline="233" endline="238">isPoint</referencedby>
        <referencedby refid="a00141_1a0c0c0ee482c401a7a19c04a053ad2c96" compoundref="a00074" startline="363" endline="368">isRay</referencedby>
        <referencedby refid="a00141_1a1451ad4ec5f384e2eb26116816a71133" compoundref="a00074" startline="493" endline="498">isSegment</referencedby>
        <referencedby refid="a00141_1acb545002ec6c2d874e04bb58ad996a44" compoundref="a00074" startline="558" endline="563">isTriangle</referencedby>
        <referencedby refid="a00141_1ad8063c8a727d695a61bc9a52a70e123c" compoundref="a00074" startline="90" endline="94">operator[]</referencedby>
        <referencedby refid="a00141_1ae8b6f7ee5aa4448bcc91d083e600e4aa" compoundref="a00074" startline="82" endline="86">push_back</referencedby>
        <referencedby refid="a00141_1a9e7caf309caacc1f96d298fa67fc8be1" compoundref="a00074" startline="698" endline="705">removeBall</referencedby>
        <referencedby refid="a00141_1a44577592c034a090c148bcc0e572a169" compoundref="a00074" startline="833" endline="840">removeClampable</referencedby>
        <referencedby refid="a00141_1a302973e99a9e591ccb30f4a62bc660cb" compoundref="a00074" startline="766" endline="774">removeDegenerated</referencedby>
        <referencedby refid="a00141_1abf2b91de3ef46de60b46dbad8c7db3df" compoundref="a00074" startline="633" endline="640">removeDisk</referencedby>
        <referencedby refid="a00141_1acd81df1dc2a6fa7ddc99dd7d19c96651" compoundref="a00074" startline="308" endline="315">removeLine</referencedby>
        <referencedby refid="a00141_1a6e3e447aefe1d475393206ff70353117" compoundref="a00074" startline="898" endline="905">removeNonClampable</referencedby>
        <referencedby refid="a00141_1a0df56279a58a7b32ab033ab102918075" compoundref="a00074" startline="178" endline="185">removeNone</referencedby>
        <referencedby refid="a00141_1adae6e3b8c3b7f19583569eaff3a34fe2" compoundref="a00074" startline="438" endline="445">removePlane</referencedby>
        <referencedby refid="a00141_1ac47886e5569493f7dbd092040c4207f8" compoundref="a00074" startline="243" endline="250">removePoint</referencedby>
        <referencedby refid="a00141_1abfb9f55452390f63c2a8f3c1208075aa" compoundref="a00074" startline="373" endline="380">removeRay</referencedby>
        <referencedby refid="a00141_1a6ef98b5a347c64ccd05a21870751d3d5" compoundref="a00074" startline="503" endline="510">removeSegment</referencedby>
        <referencedby refid="a00141_1a9d559550af559f8dd06cb08a288c5517" compoundref="a00074" startline="568" endline="575">removeTriangle</referencedby>
        <referencedby refid="a00141_1ac17e91e662c98c16010753f5cccb47dc" compoundref="a00074" startline="73" endline="77">resize</referencedby>
        <referencedby refid="a00141_1ae239f2487ee776be285b6d6711253785" compoundref="a00074" startline="119" endline="125">rotate</referencedby>
        <referencedby refid="a00141_1acc08235b7f571ab8a2fc52bf5b61e4f9" compoundref="a00074" startline="925" endline="929">size</referencedby>
        <referencedby refid="a00141_1aa3fa51524f831b815fe90b49b7c27cf2" compoundref="a00074" startline="130" endline="135">transform</referencedby>
        <referencedby refid="a00141_1a83373686cbb312a3645c23bb6226eedf" compoundref="a00074" startline="109" endline="114">translate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00141_1ac62e24eb22f8669c3e4e2cad6245bee9" prot="private" static="no" mutable="no">
        <type><ref refid="a00133_1a7d335513f3bdca20441084d20d272e13" kindref="member">AABBtree::ptr</ref></type>
        <definition>AABBtree::ptr acme::collection::m_AABBtree</definition>
        <argsstring></argsstring>
        <name>m_AABBtree</name>
        <briefdescription>
<para>Collection AABB tree pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="62" column="19" bodyfile="include/acme_collection.hh" bodystart="62" bodyend="-1"/>
        <referencedby refid="a00141_1ad8944c2684db588e6441d85534e24cd7" compoundref="a00074" startline="974" endline="979">buildAABBtree</referencedby>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
        <referencedby refid="a00141_1a8c5a112a68340345ce6ffc9b0d5b4cec" compoundref="a00074" startline="984" endline="987">ptrAABBtree</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00141_1a2c5b3f0337d52f04d1e984c259cb5cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::collection::~collection</definition>
        <argsstring>()</argsstring>
        <name>~collection</name>
        <briefdescription>
<para>Collection class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="66" column="5" bodyfile="include/acme_collection.hh" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1adfef8df4f2f523271bbebd5e5ff2830d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::collection::collection</definition>
        <argsstring>(collection const &amp;)=default</argsstring>
        <name>collection</name>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Collection copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="69" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6483e581f14d993934a432bd5719e374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::collection::collection</definition>
        <argsstring>(collection &amp;&amp;)=default</argsstring>
        <name>collection</name>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Collection move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1aab6c771e5a27bb30f26f753268f0b662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::collection::collection</definition>
        <argsstring>()</argsstring>
        <name>collection</name>
        <briefdescription>
<para>Collection class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="75" column="5" bodyfile="src/acme_collection.cc" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a164f898e95ee9557bad7a868b9d15712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::collection::collection</definition>
        <argsstring>(entity::vecptr &amp;entities)</argsstring>
        <name>collection</name>
        <param>
          <type><ref refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" kindref="member">entity::vecptr</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>Vector of shared pointers to entity objects </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Collection class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="78" column="5" bodyfile="src/acme_collection.cc" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a7d1d35e9b34c5ddb8fe76c18e9203a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear all collection object data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="83" column="10" bodyfile="src/acme_collection.cc" bodystart="65" bodyend="68"/>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ac17e91e662c98c16010753f5cccb47dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input size </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Resize collection shared pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="87" column="5" bodyfile="src/acme_collection.cc" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ae8b6f7ee5aa4448bcc91d083e600e4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::push_back</definition>
        <argsstring>(entity::ptr entity)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">entity::ptr</ref></type>
          <declname>entity</declname>
          <briefdescription><para>Input shared pointer to entity </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Adds a new element at the end of the collection shared pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="93" column="5" bodyfile="src/acme_collection.cc" bodystart="82" bodyend="86"/>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ad8063c8a727d695a61bc9a52a70e123c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">entity::ptr</ref> &amp;</type>
        <definition>entity::ptr &amp; acme::collection::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th entity object shared pointer reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="99" column="5" bodyfile="src/acme_collection.cc" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ac4d8384ecfca8428b1f917f6e29d9bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">entity::ptr</ref> const  &amp;</type>
        <definition>entity::ptr const  &amp; acme::collection::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th entity object shared pointer const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="105" column="5" bodyfile="src/acme_collection.cc" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a83373686cbb312a3645c23bb6226eedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::translate</definition>
        <argsstring>(vec3 const &amp;input)</argsstring>
        <name>translate</name>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>input</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate collection by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="111" column="5" bodyfile="src/acme_collection.cc" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ae239f2487ee776be285b6d6711253785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate collection by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="117" column="5" bodyfile="src/acme_collection.cc" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a197c9fbf279a4492df39e40da8c14214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::rotate</definition>
        <argsstring>(real angle, std::string const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate tire by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="124" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1aa3fa51524f831b815fe90b49b7c27cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::transform</definition>
        <argsstring>(affine const &amp;matrix)</argsstring>
        <name>transform</name>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform collection with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="131" column="5" bodyfile="src/acme_collection.cc" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a5618af1573664ebb1676ea8dc2354cb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containNone</definition>
        <argsstring>(void) const</argsstring>
        <name>containNone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any none entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="137" column="5" bodyfile="src/acme_collection.cc" bodystart="140" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a7df0547c1bb1b8bcf507a71f8e8e0526" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areNone</definition>
        <argsstring>(void) const</argsstring>
        <name>areNone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by none entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="141" column="5" bodyfile="src/acme_collection.cc" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1adb2f3249e5beec63bc3dee4360f032da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isNone</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isNone</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a none entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="145" column="5" bodyfile="src/acme_collection.cc" bodystart="168" bodyend="173"/>
        <referencedby refid="a00141_1a7df0547c1bb1b8bcf507a71f8e8e0526" compoundref="a00074" startline="154" endline="163">areNone</referencedby>
        <referencedby refid="a00141_1a5618af1573664ebb1676ea8dc2354cb7" compoundref="a00074" startline="140" endline="149">containNone</referencedby>
        <referencedby refid="a00141_1a5582716d9944e1d8efea6fdbaa93d542" compoundref="a00074" startline="190" endline="200">countNone</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a0df56279a58a7b32ab033ab102918075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeNone</definition>
        <argsstring>(void)</argsstring>
        <name>removeNone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all none entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="151" column="5" bodyfile="src/acme_collection.cc" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a5582716d9944e1d8efea6fdbaa93d542" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countNone</definition>
        <argsstring>(void) const</argsstring>
        <name>countNone</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all none entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="155" column="5" bodyfile="src/acme_collection.cc" bodystart="190" bodyend="200"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8f64e6f73a8bf7c9d3815c7e544dd633" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containPoint</definition>
        <argsstring>(void) const</argsstring>
        <name>containPoint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any point entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="159" column="5" bodyfile="src/acme_collection.cc" bodystart="205" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ace1975382b16ba2d425569bb13a1ec31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::arePoint</definition>
        <argsstring>(void) const</argsstring>
        <name>arePoint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by point entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="163" column="5" bodyfile="src/acme_collection.cc" bodystart="219" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a5cb1bc74f58b39f9f604dd2bedc5eea0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isPoint</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isPoint</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a point entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="167" column="5" bodyfile="src/acme_collection.cc" bodystart="233" bodyend="238"/>
        <referencedby refid="a00141_1ace1975382b16ba2d425569bb13a1ec31" compoundref="a00074" startline="219" endline="228">arePoint</referencedby>
        <referencedby refid="a00141_1a8f64e6f73a8bf7c9d3815c7e544dd633" compoundref="a00074" startline="205" endline="214">containPoint</referencedby>
        <referencedby refid="a00141_1a24be45419115c12bae3e688d2dc3b140" compoundref="a00074" startline="255" endline="265">countPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ac47886e5569493f7dbd092040c4207f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removePoint</definition>
        <argsstring>(void)</argsstring>
        <name>removePoint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all point entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="173" column="5" bodyfile="src/acme_collection.cc" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a24be45419115c12bae3e688d2dc3b140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countPoint</definition>
        <argsstring>(void) const</argsstring>
        <name>countPoint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all point entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="177" column="5" bodyfile="src/acme_collection.cc" bodystart="255" bodyend="265"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a502bf656c0bf17bc52c29c6b8b890500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containLine</definition>
        <argsstring>(void) const</argsstring>
        <name>containLine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any line entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="181" column="5" bodyfile="src/acme_collection.cc" bodystart="270" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a09b314a685cac443bc8f1a44d6cf4d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areLine</definition>
        <argsstring>(void) const</argsstring>
        <name>areLine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by line entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="185" column="5" bodyfile="src/acme_collection.cc" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ad1344851c4187d7317c7cb89743399b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isLine</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isLine</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a line entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="189" column="5" bodyfile="src/acme_collection.cc" bodystart="298" bodyend="303"/>
        <referencedby refid="a00141_1a09b314a685cac443bc8f1a44d6cf4d2d" compoundref="a00074" startline="284" endline="293">areLine</referencedby>
        <referencedby refid="a00141_1a502bf656c0bf17bc52c29c6b8b890500" compoundref="a00074" startline="270" endline="279">containLine</referencedby>
        <referencedby refid="a00141_1a8a0101f8236a434c889f77994ee2e19c" compoundref="a00074" startline="320" endline="330">countLine</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1acd81df1dc2a6fa7ddc99dd7d19c96651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeLine</definition>
        <argsstring>(void)</argsstring>
        <name>removeLine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all line entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="195" column="5" bodyfile="src/acme_collection.cc" bodystart="308" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8a0101f8236a434c889f77994ee2e19c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countLine</definition>
        <argsstring>(void) const</argsstring>
        <name>countLine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all line entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="199" column="5" bodyfile="src/acme_collection.cc" bodystart="320" bodyend="330"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1aea89f20da0c42193514dce154d7c01c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containRay</definition>
        <argsstring>(void) const</argsstring>
        <name>containRay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any ray entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="203" column="5" bodyfile="src/acme_collection.cc" bodystart="335" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a5df467fd92645db124a3d922688358dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areRay</definition>
        <argsstring>(void) const</argsstring>
        <name>areRay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by ray entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="207" column="5" bodyfile="src/acme_collection.cc" bodystart="349" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a0c0c0ee482c401a7a19c04a053ad2c96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isRay</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isRay</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a ray entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="211" column="5" bodyfile="src/acme_collection.cc" bodystart="363" bodyend="368"/>
        <referencedby refid="a00141_1a5df467fd92645db124a3d922688358dc" compoundref="a00074" startline="349" endline="358">areRay</referencedby>
        <referencedby refid="a00141_1aea89f20da0c42193514dce154d7c01c8" compoundref="a00074" startline="335" endline="344">containRay</referencedby>
        <referencedby refid="a00141_1a8483c9f1e3b0350da6c787a8a21f0813" compoundref="a00074" startline="385" endline="395">countRay</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1abfb9f55452390f63c2a8f3c1208075aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeRay</definition>
        <argsstring>(void)</argsstring>
        <name>removeRay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all ray entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="217" column="5" bodyfile="src/acme_collection.cc" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8483c9f1e3b0350da6c787a8a21f0813" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countRay</definition>
        <argsstring>(void) const</argsstring>
        <name>countRay</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all ray entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="221" column="5" bodyfile="src/acme_collection.cc" bodystart="385" bodyend="395"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a43921e97780f912aff296f122f88881f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containPlane</definition>
        <argsstring>(void) const</argsstring>
        <name>containPlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any plane entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="225" column="5" bodyfile="src/acme_collection.cc" bodystart="400" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a14a8fe4561c19fa62d7d9432a97242c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::arePlane</definition>
        <argsstring>(void) const</argsstring>
        <name>arePlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by plane entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="229" column="5" bodyfile="src/acme_collection.cc" bodystart="414" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a2d978081afbeb703d3d53cc43aaab962" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isPlane</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isPlane</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a plane entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="233" column="5" bodyfile="src/acme_collection.cc" bodystart="428" bodyend="433"/>
        <referencedby refid="a00141_1a14a8fe4561c19fa62d7d9432a97242c6" compoundref="a00074" startline="414" endline="423">arePlane</referencedby>
        <referencedby refid="a00141_1a43921e97780f912aff296f122f88881f" compoundref="a00074" startline="400" endline="409">containPlane</referencedby>
        <referencedby refid="a00141_1a7512c96440cbec19ac56946d60dcb046" compoundref="a00074" startline="450" endline="460">countPlane</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1adae6e3b8c3b7f19583569eaff3a34fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removePlane</definition>
        <argsstring>(void)</argsstring>
        <name>removePlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all plane entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="239" column="5" bodyfile="src/acme_collection.cc" bodystart="438" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a7512c96440cbec19ac56946d60dcb046" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countPlane</definition>
        <argsstring>(void) const</argsstring>
        <name>countPlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all plane entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="243" column="5" bodyfile="src/acme_collection.cc" bodystart="450" bodyend="460"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6bf36cf6fcb20f8e2bc83d16a7dc2384" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containSegment</definition>
        <argsstring>(void) const</argsstring>
        <name>containSegment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any segment entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="247" column="5" bodyfile="src/acme_collection.cc" bodystart="465" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a3ff60938e98a2c350b0135293da739c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areSegment</definition>
        <argsstring>(void) const</argsstring>
        <name>areSegment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by segment entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="251" column="5" bodyfile="src/acme_collection.cc" bodystart="479" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a1451ad4ec5f384e2eb26116816a71133" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isSegment</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isSegment</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a segment entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="255" column="5" bodyfile="src/acme_collection.cc" bodystart="493" bodyend="498"/>
        <referencedby refid="a00141_1a6bf36cf6fcb20f8e2bc83d16a7dc2384" compoundref="a00074" startline="465" endline="474">containSegment</referencedby>
        <referencedby refid="a00141_1ad977ddee9270a4fecab72ca98f1d52dd" compoundref="a00074" startline="515" endline="525">countSegment</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6ef98b5a347c64ccd05a21870751d3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeSegment</definition>
        <argsstring>(void)</argsstring>
        <name>removeSegment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all segment entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="261" column="5" bodyfile="src/acme_collection.cc" bodystart="503" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ad977ddee9270a4fecab72ca98f1d52dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countSegment</definition>
        <argsstring>(void) const</argsstring>
        <name>countSegment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all segment entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="265" column="5" bodyfile="src/acme_collection.cc" bodystart="515" bodyend="525"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a411eb7006e3890908e35678f7599866d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containTriangle</definition>
        <argsstring>(void) const</argsstring>
        <name>containTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any triangle entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="269" column="5" bodyfile="src/acme_collection.cc" bodystart="530" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6ddea160cd063150abafcc2645a923f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areTriangle</definition>
        <argsstring>(void) const</argsstring>
        <name>areTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by triangle entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="273" column="5" bodyfile="src/acme_collection.cc" bodystart="544" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1acb545002ec6c2d874e04bb58ad996a44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isTriangle</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isTriangle</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a triangle entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="277" column="5" bodyfile="src/acme_collection.cc" bodystart="558" bodyend="563"/>
        <referencedby refid="a00141_1a6ddea160cd063150abafcc2645a923f5" compoundref="a00074" startline="544" endline="553">areTriangle</referencedby>
        <referencedby refid="a00141_1a411eb7006e3890908e35678f7599866d" compoundref="a00074" startline="530" endline="539">containTriangle</referencedby>
        <referencedby refid="a00141_1aa89bf294b11cb8b711ba75cd59459f1a" compoundref="a00074" startline="580" endline="590">countTriangle</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a9d559550af559f8dd06cb08a288c5517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeTriangle</definition>
        <argsstring>(void)</argsstring>
        <name>removeTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all triangle entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="283" column="5" bodyfile="src/acme_collection.cc" bodystart="568" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1aa89bf294b11cb8b711ba75cd59459f1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countTriangle</definition>
        <argsstring>(void) const</argsstring>
        <name>countTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all triangle entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="287" column="5" bodyfile="src/acme_collection.cc" bodystart="580" bodyend="590"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a9ca37739749ce2e7d4648208aede203e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containDisk</definition>
        <argsstring>(void) const</argsstring>
        <name>containDisk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any disk entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="291" column="5" bodyfile="src/acme_collection.cc" bodystart="595" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a682eb08b6e66dff09667052a9fa09d8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areDisk</definition>
        <argsstring>(void) const</argsstring>
        <name>areDisk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by disk entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="295" column="5" bodyfile="src/acme_collection.cc" bodystart="609" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a7547abd98c281f856bbba8885c87c977" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isDisk</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isDisk</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a disk entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="299" column="5" bodyfile="src/acme_collection.cc" bodystart="623" bodyend="628"/>
        <referencedby refid="a00141_1a682eb08b6e66dff09667052a9fa09d8f" compoundref="a00074" startline="609" endline="618">areDisk</referencedby>
        <referencedby refid="a00141_1a9ca37739749ce2e7d4648208aede203e" compoundref="a00074" startline="595" endline="604">containDisk</referencedby>
        <referencedby refid="a00141_1a2c352878015e00d4504960bb9acbe227" compoundref="a00074" startline="645" endline="655">countDisk</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1abf2b91de3ef46de60b46dbad8c7db3df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeDisk</definition>
        <argsstring>(void)</argsstring>
        <name>removeDisk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all disk entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="305" column="5" bodyfile="src/acme_collection.cc" bodystart="633" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a2c352878015e00d4504960bb9acbe227" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countDisk</definition>
        <argsstring>(void) const</argsstring>
        <name>countDisk</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all disk entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="309" column="5" bodyfile="src/acme_collection.cc" bodystart="645" bodyend="655"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a23582c6ebeb1a72b19d16b76e68fdc7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containBall</definition>
        <argsstring>(void) const</argsstring>
        <name>containBall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any ball entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="313" column="5" bodyfile="src/acme_collection.cc" bodystart="660" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a28ec5025e6d428c6c4574c1d6f8f4017" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areBall</definition>
        <argsstring>(void) const</argsstring>
        <name>areBall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by ball entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="317" column="5" bodyfile="src/acme_collection.cc" bodystart="674" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a10961ec0f21f3ad71bd7435281c93d60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isBall</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isBall</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a ball entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="321" column="5" bodyfile="src/acme_collection.cc" bodystart="688" bodyend="693"/>
        <referencedby refid="a00141_1a28ec5025e6d428c6c4574c1d6f8f4017" compoundref="a00074" startline="674" endline="683">areBall</referencedby>
        <referencedby refid="a00141_1a3ff60938e98a2c350b0135293da739c5" compoundref="a00074" startline="479" endline="488">areSegment</referencedby>
        <referencedby refid="a00141_1a23582c6ebeb1a72b19d16b76e68fdc7e" compoundref="a00074" startline="660" endline="669">containBall</referencedby>
        <referencedby refid="a00141_1a8fa554b66cecb86c6b44be8a697277c5" compoundref="a00074" startline="710" endline="720">countBall</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a9e7caf309caacc1f96d298fa67fc8be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeBall</definition>
        <argsstring>(void)</argsstring>
        <name>removeBall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all ball entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="327" column="5" bodyfile="src/acme_collection.cc" bodystart="698" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8fa554b66cecb86c6b44be8a697277c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countBall</definition>
        <argsstring>(void) const</argsstring>
        <name>countBall</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all ball entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="331" column="5" bodyfile="src/acme_collection.cc" bodystart="710" bodyend="720"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8ddf36976681acfd09f96d271775de61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const</argsstring>
        <name>containDegenerated</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if one of the objects in the collection is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="335" column="5" bodyfile="src/acme_collection.cc" bodystart="725" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1af6fbfa2f20b271f2489701a82a9c8ac5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const</argsstring>
        <name>areDegenerated</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by degenerated entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="341" column="5" bodyfile="src/acme_collection.cc" bodystart="740" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1aa5084996b357d0f3168cdef890f35149" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isDegenerated</definition>
        <argsstring>(size_t i, real tolerance=EPSILON) const</argsstring>
        <name>isDegenerated</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a degenerated entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="347" column="5" bodyfile="src/acme_collection.cc" bodystart="755" bodyend="761"/>
        <referencedby refid="a00141_1af6fbfa2f20b271f2489701a82a9c8ac5" compoundref="a00074" startline="740" endline="750">areDegenerated</referencedby>
        <referencedby refid="a00141_1a8ddf36976681acfd09f96d271775de61" compoundref="a00074" startline="725" endline="735">containDegenerated</referencedby>
        <referencedby refid="a00141_1a4df1a17bd2c58c215e4e3d5267ec16e6" compoundref="a00074" startline="779" endline="790">countDegenerated</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a302973e99a9e591ccb30f4a62bc660cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeDegenerated</definition>
        <argsstring>(real tolerance=EPSILON)</argsstring>
        <name>removeDegenerated</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Remove all degenerated entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="354" column="5" bodyfile="src/acme_collection.cc" bodystart="766" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a4df1a17bd2c58c215e4e3d5267ec16e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const</argsstring>
        <name>countDegenerated</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Count all degenerated entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="360" column="5" bodyfile="src/acme_collection.cc" bodystart="779" bodyend="790"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a0f76aee7dee0d1a6ead3bf2ea401b8e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>containClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any clampable entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="366" column="5" bodyfile="src/acme_collection.cc" bodystart="795" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ae9f82162eb5b009eecbc6936a99e49b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>areClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by clampable entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="370" column="5" bodyfile="src/acme_collection.cc" bodystart="809" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a4850e3574b6a39f787b15d7e9e37138c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isClampable</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isClampable</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a clampable entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="374" column="5" bodyfile="src/acme_collection.cc" bodystart="823" bodyend="828"/>
        <referencedby refid="a00141_1ae9f82162eb5b009eecbc6936a99e49b3" compoundref="a00074" startline="809" endline="818">areClampable</referencedby>
        <referencedby refid="a00141_1a0f76aee7dee0d1a6ead3bf2ea401b8e9" compoundref="a00074" startline="795" endline="804">containClampable</referencedby>
        <referencedby refid="a00141_1ae054501f8d171abb06a958c7935f8cdf" compoundref="a00074" startline="845" endline="855">countClampable</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a44577592c034a090c148bcc0e572a169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeClampable</definition>
        <argsstring>(void)</argsstring>
        <name>removeClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all clampable entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="380" column="5" bodyfile="src/acme_collection.cc" bodystart="833" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ae054501f8d171abb06a958c7935f8cdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>countClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all clampable entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="384" column="5" bodyfile="src/acme_collection.cc" bodystart="845" bodyend="855"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a5eb3919f95c1a04d823f409de8e3d3f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::containNonClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>containNonClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the collection there are any non clampable entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="388" column="5" bodyfile="src/acme_collection.cc" bodystart="860" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1af715a46ba307dc56433d019ae55468d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::areNonClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>areNonClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the collection is composed only by non clampable entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="392" column="5" bodyfile="src/acme_collection.cc" bodystart="874" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a332a75b3b2daa36433c615b21b42f5de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::isNonClampable</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>isNonClampable</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check whether in the collection the i-th element is a non clampable entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="396" column="5" bodyfile="src/acme_collection.cc" bodystart="888" bodyend="893"/>
        <referencedby refid="a00141_1af715a46ba307dc56433d019ae55468d6" compoundref="a00074" startline="874" endline="883">areNonClampable</referencedby>
        <referencedby refid="a00141_1a5eb3919f95c1a04d823f409de8e3d3f4" compoundref="a00074" startline="860" endline="869">containNonClampable</referencedby>
        <referencedby refid="a00141_1ac0b6314c5e2ecbd950e772c4c70fbf37" compoundref="a00074" startline="910" endline="920">countNonClampable</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6e3e447aefe1d475393206ff70353117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::removeNonClampable</definition>
        <argsstring>(void)</argsstring>
        <name>removeNonClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove all non clampable entity objects from collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="402" column="5" bodyfile="src/acme_collection.cc" bodystart="898" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1ac0b6314c5e2ecbd950e772c4c70fbf37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::countNonClampable</definition>
        <argsstring>(void) const</argsstring>
        <name>countNonClampable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Count all non clampable entity objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="406" column="5" bodyfile="src/acme_collection.cc" bodystart="910" bodyend="920"/>
        <referencedby refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" compoundref="a00074" startline="934" endline="950">count</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1acc08235b7f571ab8a2fc52bf5b61e4f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::collection::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get collection size (number of entities) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="410" column="5" bodyfile="src/acme_collection.cc" bodystart="925" bodyend="929"/>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, <ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref> &gt;</type>
        <definition>std::map&lt; std::string, integer &gt; acme::collection::count</definition>
        <argsstring>(real tolerance=EPSILON) const</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Count all entity types objects in collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="414" column="5" bodyfile="src/acme_collection.cc" bodystart="934" bodyend="950"/>
        <referencedby refid="a00141_1a8fa554b66cecb86c6b44be8a697277c5" compoundref="a00074" startline="710" endline="720">countBall</referencedby>
        <referencedby refid="a00141_1ae054501f8d171abb06a958c7935f8cdf" compoundref="a00074" startline="845" endline="855">countClampable</referencedby>
        <referencedby refid="a00141_1a4df1a17bd2c58c215e4e3d5267ec16e6" compoundref="a00074" startline="779" endline="790">countDegenerated</referencedby>
        <referencedby refid="a00141_1a2c352878015e00d4504960bb9acbe227" compoundref="a00074" startline="645" endline="655">countDisk</referencedby>
        <referencedby refid="a00141_1a8a0101f8236a434c889f77994ee2e19c" compoundref="a00074" startline="320" endline="330">countLine</referencedby>
        <referencedby refid="a00141_1ac0b6314c5e2ecbd950e772c4c70fbf37" compoundref="a00074" startline="910" endline="920">countNonClampable</referencedby>
        <referencedby refid="a00141_1a5582716d9944e1d8efea6fdbaa93d542" compoundref="a00074" startline="190" endline="200">countNone</referencedby>
        <referencedby refid="a00141_1a7512c96440cbec19ac56946d60dcb046" compoundref="a00074" startline="450" endline="460">countPlane</referencedby>
        <referencedby refid="a00141_1a24be45419115c12bae3e688d2dc3b140" compoundref="a00074" startline="255" endline="265">countPoint</referencedby>
        <referencedby refid="a00141_1a8483c9f1e3b0350da6c787a8a21f0813" compoundref="a00074" startline="385" endline="395">countRay</referencedby>
        <referencedby refid="a00141_1ad977ddee9270a4fecab72ca98f1d52dd" compoundref="a00074" startline="515" endline="525">countSegment</referencedby>
        <referencedby refid="a00141_1aa89bf294b11cb8b711ba75cd59459f1a" compoundref="a00074" startline="580" endline="590">countTriangle</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ad83e78415297c52b6088677d65e997c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::clamp</definition>
        <argsstring>(aabb::vecptr &amp;boxes) const</argsstring>
        <name>clamp</name>
        <param>
          <type><ref refid="a00129_1a992e467202cf0239f3b089878518861a" kindref="member">aabb::vecptr</ref> &amp;</type>
          <declname>boxes</declname>
          <briefdescription><para>Vector of shered pointer to collection objects aabbs </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get vector of shered pointer to collection objects aabbs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="420" column="5" bodyfile="src/acme_collection.cc" bodystart="955" bodyend="969"/>
        <referencedby refid="a00141_1ad8944c2684db588e6441d85534e24cd7" compoundref="a00074" startline="974" endline="979">buildAABBtree</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ad8944c2684db588e6441d85534e24cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::buildAABBtree</definition>
        <argsstring>(void)</argsstring>
        <name>buildAABBtree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Build collection AABB tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="425" column="10" bodyfile="src/acme_collection.cc" bodystart="974" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a8c5a112a68340345ce6ffc9b0d5b4cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00133_1a7d335513f3bdca20441084d20d272e13" kindref="member">AABBtree::ptr</ref> const  &amp;</type>
        <definition>AABBtree::ptr const  &amp; acme::collection::ptrAABBtree</definition>
        <argsstring>(void)</argsstring>
        <name>ptrAABBtree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return collection AABB tree shared pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="429" column="5" bodyfile="src/acme_collection.cc" bodystart="984" bodyend="987"/>
        <referencedby refid="a00141_1ae9cc97bd7494310d38eb644b08937636" compoundref="a00074" startline="992" endline="1006">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1ae9cc97bd7494310d38eb644b08937636" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::intersection</definition>
        <argsstring>(collection &amp;entities, collection &amp;candidates) const</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>External entities collection </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>candidates</declname>
          <briefdescription><para>Intersection candidates </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersect the collection with an external collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="433" column="5" bodyfile="src/acme_collection.cc" bodystart="992" bodyend="1006"/>
        <referencedby refid="a00141_1a753d215b5764ec311919cf9e4cf5b374" compoundref="a00074" startline="1027" endline="1035">intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00141_1a6e6f7a8d51dcd9372459b57de5ee897c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::intersection</definition>
        <argsstring>(AABBtree::ptr const &amp;AABBtree, collection &amp;entities) const</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00133_1a7d335513f3bdca20441084d20d272e13" kindref="member">AABBtree::ptr</ref> const &amp;</type>
          <declname>AABBtree</declname>
          <briefdescription><para>External <ref refid="a00133" kindref="compound">AABBtree</ref> object pointer </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>Intersected entities vector list </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersect the collection AABB tree with an external AABB tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="439" column="10" bodyfile="src/acme_collection.cc" bodystart="1011" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a753d215b5764ec311919cf9e4cf5b374" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::intersection</definition>
        <argsstring>(aabb::vecptr const &amp;boxes, collection &amp;entities) const</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00129_1a992e467202cf0239f3b089878518861a" kindref="member">aabb::vecptr</ref> const &amp;</type>
          <declname>boxes</declname>
          <briefdescription><para>External aabb object pointer vector </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>Intersected entities vector list </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update the collection <ref refid="a00133" kindref="compound">AABBtree</ref> with an external aabb object pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="446" column="5" bodyfile="src/acme_collection.cc" bodystart="1027" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1a1f0833fbd2fe661dd4c8967925739e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::collection::intersection</definition>
        <argsstring>(aabb::ptr const box, collection &amp;entities) const</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00129_1a30c38d287590f2b2ab406bd922b23ebc" kindref="member">aabb::ptr</ref> const</type>
          <declname>box</declname>
          <briefdescription><para>External aabb object pointer </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>Intersected entities vector list </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update the collection <ref refid="a00133" kindref="compound">AABBtree</ref> with an external aabb object pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="453" column="5" bodyfile="src/acme_collection.cc" bodystart="1040" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="a00141_1aedbcc7c8d43b3da0e464d3d564a4d70d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::collection::intersection</definition>
        <argsstring>(collection &amp;entities, real tolerance=EPSILON) const</argsstring>
        <name>intersection</name>
        <param>
          <type><ref refid="a00141" kindref="compound">collection</ref> &amp;</type>
          <declname>entities</declname>
          <briefdescription><para>Intersection candidates </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Intersect all. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_collection.hh" line="460" column="5" bodyfile="src/acme_collection.cc" bodystart="1053" bodyend="1065"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collection class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Collection of entity objects in 3D space. </para>
    </detaileddescription>
    <location file="include/acme_collection.hh" line="58" column="3" bodyfile="include/acme_collection.hh" bodystart="59" bodyend="465"/>
    <listofallmembers>
      <member refid="a00141_1a28ec5025e6d428c6c4574c1d6f8f4017" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areBall</name></member>
      <member refid="a00141_1ae9f82162eb5b009eecbc6936a99e49b3" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areClampable</name></member>
      <member refid="a00141_1af6fbfa2f20b271f2489701a82a9c8ac5" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areDegenerated</name></member>
      <member refid="a00141_1a682eb08b6e66dff09667052a9fa09d8f" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areDisk</name></member>
      <member refid="a00141_1a09b314a685cac443bc8f1a44d6cf4d2d" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areLine</name></member>
      <member refid="a00141_1af715a46ba307dc56433d019ae55468d6" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areNonClampable</name></member>
      <member refid="a00141_1a7df0547c1bb1b8bcf507a71f8e8e0526" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areNone</name></member>
      <member refid="a00141_1a14a8fe4561c19fa62d7d9432a97242c6" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>arePlane</name></member>
      <member refid="a00141_1ace1975382b16ba2d425569bb13a1ec31" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>arePoint</name></member>
      <member refid="a00141_1a5df467fd92645db124a3d922688358dc" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areRay</name></member>
      <member refid="a00141_1a3ff60938e98a2c350b0135293da739c5" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areSegment</name></member>
      <member refid="a00141_1a6ddea160cd063150abafcc2645a923f5" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>areTriangle</name></member>
      <member refid="a00141_1ad8944c2684db588e6441d85534e24cd7" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>buildAABBtree</name></member>
      <member refid="a00141_1ad83e78415297c52b6088677d65e997c0" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>clamp</name></member>
      <member refid="a00141_1a7d1d35e9b34c5ddb8fe76c18e9203a9e" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>clear</name></member>
      <member refid="a00141_1adfef8df4f2f523271bbebd5e5ff2830d" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>collection</name></member>
      <member refid="a00141_1a6483e581f14d993934a432bd5719e374" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>collection</name></member>
      <member refid="a00141_1aab6c771e5a27bb30f26f753268f0b662" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>collection</name></member>
      <member refid="a00141_1a164f898e95ee9557bad7a868b9d15712" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>collection</name></member>
      <member refid="a00141_1a23582c6ebeb1a72b19d16b76e68fdc7e" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containBall</name></member>
      <member refid="a00141_1a0f76aee7dee0d1a6ead3bf2ea401b8e9" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containClampable</name></member>
      <member refid="a00141_1a8ddf36976681acfd09f96d271775de61" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containDegenerated</name></member>
      <member refid="a00141_1a9ca37739749ce2e7d4648208aede203e" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containDisk</name></member>
      <member refid="a00141_1a502bf656c0bf17bc52c29c6b8b890500" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containLine</name></member>
      <member refid="a00141_1a5eb3919f95c1a04d823f409de8e3d3f4" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containNonClampable</name></member>
      <member refid="a00141_1a5618af1573664ebb1676ea8dc2354cb7" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containNone</name></member>
      <member refid="a00141_1a43921e97780f912aff296f122f88881f" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containPlane</name></member>
      <member refid="a00141_1a8f64e6f73a8bf7c9d3815c7e544dd633" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containPoint</name></member>
      <member refid="a00141_1aea89f20da0c42193514dce154d7c01c8" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containRay</name></member>
      <member refid="a00141_1a6bf36cf6fcb20f8e2bc83d16a7dc2384" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containSegment</name></member>
      <member refid="a00141_1a411eb7006e3890908e35678f7599866d" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>containTriangle</name></member>
      <member refid="a00141_1ab99d6cc06ebd10d05ce283808faaa2bb" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>count</name></member>
      <member refid="a00141_1a8fa554b66cecb86c6b44be8a697277c5" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countBall</name></member>
      <member refid="a00141_1ae054501f8d171abb06a958c7935f8cdf" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countClampable</name></member>
      <member refid="a00141_1a4df1a17bd2c58c215e4e3d5267ec16e6" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countDegenerated</name></member>
      <member refid="a00141_1a2c352878015e00d4504960bb9acbe227" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countDisk</name></member>
      <member refid="a00141_1a8a0101f8236a434c889f77994ee2e19c" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countLine</name></member>
      <member refid="a00141_1ac0b6314c5e2ecbd950e772c4c70fbf37" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countNonClampable</name></member>
      <member refid="a00141_1a5582716d9944e1d8efea6fdbaa93d542" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countNone</name></member>
      <member refid="a00141_1a7512c96440cbec19ac56946d60dcb046" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countPlane</name></member>
      <member refid="a00141_1a24be45419115c12bae3e688d2dc3b140" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countPoint</name></member>
      <member refid="a00141_1a8483c9f1e3b0350da6c787a8a21f0813" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countRay</name></member>
      <member refid="a00141_1ad977ddee9270a4fecab72ca98f1d52dd" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countSegment</name></member>
      <member refid="a00141_1aa89bf294b11cb8b711ba75cd59459f1a" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>countTriangle</name></member>
      <member refid="a00141_1ae9cc97bd7494310d38eb644b08937636" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>intersection</name></member>
      <member refid="a00141_1a6e6f7a8d51dcd9372459b57de5ee897c" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>intersection</name></member>
      <member refid="a00141_1a753d215b5764ec311919cf9e4cf5b374" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>intersection</name></member>
      <member refid="a00141_1a1f0833fbd2fe661dd4c8967925739e11" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>intersection</name></member>
      <member refid="a00141_1aedbcc7c8d43b3da0e464d3d564a4d70d" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>intersection</name></member>
      <member refid="a00141_1a10961ec0f21f3ad71bd7435281c93d60" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isBall</name></member>
      <member refid="a00141_1a4850e3574b6a39f787b15d7e9e37138c" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isClampable</name></member>
      <member refid="a00141_1aa5084996b357d0f3168cdef890f35149" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isDegenerated</name></member>
      <member refid="a00141_1a7547abd98c281f856bbba8885c87c977" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isDisk</name></member>
      <member refid="a00141_1ad1344851c4187d7317c7cb89743399b6" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isLine</name></member>
      <member refid="a00141_1a332a75b3b2daa36433c615b21b42f5de" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isNonClampable</name></member>
      <member refid="a00141_1adb2f3249e5beec63bc3dee4360f032da" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isNone</name></member>
      <member refid="a00141_1a2d978081afbeb703d3d53cc43aaab962" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isPlane</name></member>
      <member refid="a00141_1a5cb1bc74f58b39f9f604dd2bedc5eea0" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isPoint</name></member>
      <member refid="a00141_1a0c0c0ee482c401a7a19c04a053ad2c96" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isRay</name></member>
      <member refid="a00141_1a1451ad4ec5f384e2eb26116816a71133" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isSegment</name></member>
      <member refid="a00141_1acb545002ec6c2d874e04bb58ad996a44" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>isTriangle</name></member>
      <member refid="a00141_1ac62e24eb22f8669c3e4e2cad6245bee9" prot="private" virt="non-virtual"><scope>acme::collection</scope><name>m_AABBtree</name></member>
      <member refid="a00141_1a76d7d962eb280c60081db06902432d49" prot="private" virt="non-virtual"><scope>acme::collection</scope><name>m_entities</name></member>
      <member refid="a00141_1ad8063c8a727d695a61bc9a52a70e123c" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>operator[]</name></member>
      <member refid="a00141_1ac4d8384ecfca8428b1f917f6e29d9bb6" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>operator[]</name></member>
      <member refid="a00141_1a8c5a112a68340345ce6ffc9b0d5b4cec" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>ptrAABBtree</name></member>
      <member refid="a00141_1ae8b6f7ee5aa4448bcc91d083e600e4aa" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>push_back</name></member>
      <member refid="a00141_1a9e7caf309caacc1f96d298fa67fc8be1" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeBall</name></member>
      <member refid="a00141_1a44577592c034a090c148bcc0e572a169" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeClampable</name></member>
      <member refid="a00141_1a302973e99a9e591ccb30f4a62bc660cb" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeDegenerated</name></member>
      <member refid="a00141_1abf2b91de3ef46de60b46dbad8c7db3df" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeDisk</name></member>
      <member refid="a00141_1acd81df1dc2a6fa7ddc99dd7d19c96651" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeLine</name></member>
      <member refid="a00141_1a6e3e447aefe1d475393206ff70353117" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeNonClampable</name></member>
      <member refid="a00141_1a0df56279a58a7b32ab033ab102918075" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeNone</name></member>
      <member refid="a00141_1adae6e3b8c3b7f19583569eaff3a34fe2" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removePlane</name></member>
      <member refid="a00141_1ac47886e5569493f7dbd092040c4207f8" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removePoint</name></member>
      <member refid="a00141_1abfb9f55452390f63c2a8f3c1208075aa" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeRay</name></member>
      <member refid="a00141_1a6ef98b5a347c64ccd05a21870751d3d5" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeSegment</name></member>
      <member refid="a00141_1a9d559550af559f8dd06cb08a288c5517" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>removeTriangle</name></member>
      <member refid="a00141_1ac17e91e662c98c16010753f5cccb47dc" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>resize</name></member>
      <member refid="a00141_1ae239f2487ee776be285b6d6711253785" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>rotate</name></member>
      <member refid="a00141_1a197c9fbf279a4492df39e40da8c14214" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>rotate</name></member>
      <member refid="a00141_1acc08235b7f571ab8a2fc52bf5b61e4f9" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>size</name></member>
      <member refid="a00141_1aa3fa51524f831b815fe90b49b7c27cf2" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>transform</name></member>
      <member refid="a00141_1a83373686cbb312a3645c23bb6226eedf" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>translate</name></member>
      <member refid="a00141_1a2c5b3f0337d52f04d1e984c259cb5cd3" prot="public" virt="non-virtual"><scope>acme::collection</scope><name>~collection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
