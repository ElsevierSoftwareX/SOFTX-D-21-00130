<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00137" kind="class" language="C++" prot="public">
    <compoundname>acme::ball</compoundname>
    <basecompoundref refid="a00149" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00011" local="no">acme_ball.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00137_1af62a5f11567f5ebd3e845e2f3cc5df2a" prot="private" static="no" mutable="no">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::ball::m_radius</definition>
        <argsstring></argsstring>
        <name>m_radius</name>
        <briefdescription>
<para>Ball radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="58" column="10" bodyfile="include/acme_ball.hh" bodystart="58" bodyend="-1"/>
        <referencedby refid="a00137_1ac8876b45cd1659684d8fe5832d0dac47" compoundref="a00071" startline="135" endline="139">area</referencedby>
        <referencedby refid="a00137_1ae6b4dc8859841aae58313165c9ca0c82" compoundref="a00071" startline="192" endline="205">clamp</referencedby>
        <referencedby refid="a00137_1a1e6a81d0e6d715fa932cabdbc62f14cd" compoundref="a00071" startline="89" endline="96">isApprox</referencedby>
        <referencedby refid="a00137_1a23df275e226d2cd1830523802a9baad5" compoundref="a00071" startline="182" endline="187">isDegenerated</referencedby>
        <referencedby refid="a00137_1afdd2e92c326b169062c209f809b4d931" compoundref="a00071" startline="171" endline="177">isInside</referencedby>
        <referencedby refid="a00137_1a5d5fb0ffcc901414a4b5efd8f80bb229" compoundref="a00071" startline="71" endline="84">operator=</referencedby>
        <referencedby refid="a00137_1a092b0258eae1daf6680af99ee3e50b38" compoundref="a00071" startline="101" endline="105">radius</referencedby>
        <referencedby refid="a00137_1ac2e9343a80459a53dc0d0bbc1a9d1de3" compoundref="a00071" startline="144" endline="148">volume</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00137_1a1f638ead1f66cce612fbd666d29be671" prot="private" static="no" mutable="no">
        <type><ref refid="a00165" kindref="compound">point</ref></type>
        <definition>point acme::ball::m_center</definition>
        <argsstring></argsstring>
        <name>m_center</name>
        <briefdescription>
<para>Ball center point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="59" column="11" bodyfile="include/acme_ball.hh" bodystart="59" bodyend="-1"/>
        <referencedby refid="a00137_1ac232d264b59561de5e1d2b72868c12fa" compoundref="a00071" startline="110" endline="114">center</referencedby>
        <referencedby refid="a00137_1ae6b4dc8859841aae58313165c9ca0c82" compoundref="a00071" startline="192" endline="205">clamp</referencedby>
        <referencedby refid="a00137_1a1e6a81d0e6d715fa932cabdbc62f14cd" compoundref="a00071" startline="89" endline="96">isApprox</referencedby>
        <referencedby refid="a00137_1afdd2e92c326b169062c209f809b4d931" compoundref="a00071" startline="171" endline="177">isInside</referencedby>
        <referencedby refid="a00137_1a5d5fb0ffcc901414a4b5efd8f80bb229" compoundref="a00071" startline="71" endline="84">operator=</referencedby>
        <referencedby refid="a00137_1aaa6ac36fbf4f5067e74e0301e50283cd" compoundref="a00071" startline="162" endline="166">transform</referencedby>
        <referencedby refid="a00137_1a441ee7c119a35fc85722a1bf25342abb" compoundref="a00071" startline="153" endline="157">translate</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00137_1a17dfea6a7c7660afa9c140faa07089db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::ball::~ball</definition>
        <argsstring>()</argsstring>
        <name>~ball</name>
        <briefdescription>
<para>Ball class deconstructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="63" column="5" bodyfile="include/acme_ball.hh" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ace1242cf608823cde91afefd6d1e9b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::ball::ball</definition>
        <argsstring>()</argsstring>
        <name>ball</name>
        <briefdescription>
<para>Ball class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="66" column="5" bodyfile="include/acme_ball.hh" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a0f6b031ede3ee3d4b78301e38511e0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ball::ball</definition>
        <argsstring>(ball const &amp;)=default</argsstring>
        <name>ball</name>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Ball copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="69" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a4f60c424249558b98324a7939181df98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ball::ball</definition>
        <argsstring>(ball &amp;&amp;)=default</argsstring>
        <name>ball</name>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Ball move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a277efd54d30cb0ad7fee8e0c1fb340b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ball::ball</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z)</argsstring>
        <name>ball</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>radius</declname>
          <briefdescription><para>Input ball radius </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_x</declname>
          <briefdescription><para>Input ball center x value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_y</declname>
          <briefdescription><para>Input ball center y value </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>center_z</declname>
          <briefdescription><para>Input ball center z value </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Ball class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="75" column="5" bodyfile="src/acme_ball.cc" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a9b88f699a31270d6831ad956aece6131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::ball::ball</definition>
        <argsstring>(real radius, point const &amp;center)</argsstring>
        <name>ball</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>radius</declname>
          <briefdescription><para>Input ball radius </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>center</declname>
          <briefdescription><para>Input ball center </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Ball class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="83" column="5" bodyfile="src/acme_ball.cc" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a5d5fb0ffcc901414a4b5efd8f80bb229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00137" kindref="compound">ball</ref> &amp;</type>
        <definition>ball &amp; acme::ball::operator=</definition>
        <argsstring>(ball const &amp;ball_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="90" column="5" bodyfile="src/acme_ball.cc" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a1e6a81d0e6d715fa932cabdbc62f14cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::ball::isApprox</definition>
        <argsstring>(ball const &amp;ball_in, real tolerance=EPSILON) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00137" kindref="compound">ball</ref> const &amp;</type>
          <declname>ball_in</declname>
          <briefdescription><para>Input ball object </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if disks are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="96" column="5" bodyfile="src/acme_ball.cc" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a092b0258eae1daf6680af99ee3e50b38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> const  &amp;</type>
        <definition>real const  &amp; acme::ball::radius</definition>
        <argsstring>(void) const</argsstring>
        <name>radius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ball radius const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="103" column="5" bodyfile="src/acme_ball.cc" bodystart="101" bodyend="105"/>
        <referencedby refid="a00125_1ae9f996d69e33e62da7e8c6a0094eca81" compoundref="a00089" startline="2309" endline="2332">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00137_1ae80a389d408ba65e17908ae27707adb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
        <definition>real &amp; acme::ball::radius</definition>
        <argsstring>(void)</argsstring>
        <name>radius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ball radius reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="107" column="5" bodyfile="src/acme_ball.cc" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ac232d264b59561de5e1d2b72868c12fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> const  &amp;</type>
        <definition>point const  &amp; acme::ball::center</definition>
        <argsstring>(void) const</argsstring>
        <name>center</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ball center point const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="111" column="5" bodyfile="src/acme_ball.cc" bodystart="110" bodyend="114"/>
        <referencedby refid="a00137_1ae6b4dc8859841aae58313165c9ca0c82" compoundref="a00071" startline="192" endline="205">clamp</referencedby>
        <referencedby refid="a00125_1ae9f996d69e33e62da7e8c6a0094eca81" compoundref="a00089" startline="2309" endline="2332">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00137_1a0f5f019e7c97dfc42717b831ec06fac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; acme::ball::center</definition>
        <argsstring>(void)</argsstring>
        <name>center</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ball center point reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="115" column="5" bodyfile="src/acme_ball.cc" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ac8876b45cd1659684d8fe5832d0dac47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::ball::area</definition>
        <argsstring>(void) const</argsstring>
        <name>area</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate ball area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="119" column="5" bodyfile="src/acme_ball.cc" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ac2e9343a80459a53dc0d0bbc1a9d1de3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::ball::volume</definition>
        <argsstring>(void) const</argsstring>
        <name>volume</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate ball volume. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="123" column="5" bodyfile="src/acme_ball.cc" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a441ee7c119a35fc85722a1bf25342abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::ball::translate</definition>
        <argsstring>(vec3 const &amp;vector_in) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00149_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="127" column="5" bodyfile="src/acme_ball.cc" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1aaa6ac36fbf4f5067e74e0301e50283cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::ball::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00149_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform ball with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="133" column="5" bodyfile="src/acme_ball.cc" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1afdd2e92c326b169062c209f809b4d931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::ball::isInside</definition>
        <argsstring>(point const &amp;point_in, real tolerance=EPSILON) const</argsstring>
        <name>isInside</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Query point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="139" column="5" bodyfile="src/acme_ball.cc" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a23df275e226d2cd1830523802a9baad5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00149_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if ball is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="146" column="5" bodyfile="src/acme_ball.cc" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a114549b1d1b27c87c94fbbf7cc401f9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::ball::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00149_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="151" column="13" bodyfile="include/acme_ball.hh" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a8445805caac9b4649ee10db912279dc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::ball::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00149_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="154" column="17" bodyfile="include/acme_ball.hh" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a72a78115bd000200c175fd4ed4018adc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00149_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="157" column="10" bodyfile="include/acme_ball.hh" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1aa08c4b0ee451baad399ad5c559865619" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00149_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="160" column="10" bodyfile="include/acme_ball.hh" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a7ec4546697e4938bb96c7f4652b904bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00149_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="163" column="10" bodyfile="include/acme_ball.hh" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a7327648ac4af52aff7b5d60e8ac22604" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00149_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="166" column="10" bodyfile="include/acme_ball.hh" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a6fd87ab0a633c4a4cc736db37f91917b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00149_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="169" column="10" bodyfile="include/acme_ball.hh" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a0fa7a43dc292bfe0a3952f3c2c107cc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00149_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="172" column="10" bodyfile="include/acme_ball.hh" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ab1823e260fb68f8b9077dfe89e7017c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00149_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="175" column="10" bodyfile="include/acme_ball.hh" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ae9a8f9ad8b4b7f4488a0359233b61319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00149_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="178" column="10" bodyfile="include/acme_ball.hh" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a8f2a4cfae7661cc405d6cff3a12f2cb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00149_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="181" column="10" bodyfile="include/acme_ball.hh" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1af57c21164690c5b8f9ddb94bd12120d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00149_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the ball is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="184" column="10" bodyfile="include/acme_ball.hh" bodystart="184" bodyend="184"/>
        <referencedby refid="a00137_1ae6b4dc8859841aae58313165c9ca0c82" compoundref="a00071" startline="192" endline="205">clamp</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00137_1aa6be7f0cf658040ce949c3034db2bfa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00149_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the ball is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="187" column="10" bodyfile="include/acme_ball.hh" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1ae6b4dc8859841aae58313165c9ca0c82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::clamp</definition>
        <argsstring>(vec3 &amp;min, vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="191" column="5" bodyfile="src/acme_ball.cc" bodystart="192" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="a00137_1a98cbdd951e9d0ffe9c6661f9964e4ee3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::ball::clamp</definition>
        <argsstring>(real &amp;min_x, real &amp;min_y, real &amp;min_z, real &amp;max_x, real &amp;max_y, real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_ball.hh" line="198" column="5" bodyfile="src/acme_ball.cc" bodystart="210" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5" bodyfile="src/acme_entity.cc" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10" bodyfile="src/acme_entity.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00149" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ball class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Ball in 3D space and defined by a radius and a plane (ball center + normal vector). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::ball</label>
        <link refid="a00137"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="3">
        <label>acme::point</label>
        <link refid="a00165"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>acme::ball</label>
        <link refid="a00137"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_center</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_ball.hh" line="55" column="3" bodyfile="include/acme_ball.hh" bodystart="56" bodyend="207"/>
    <listofallmembers>
      <member refid="a00137_1ac8876b45cd1659684d8fe5832d0dac47" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>area</name></member>
      <member refid="a00137_1ace1242cf608823cde91afefd6d1e9b98" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ball</name></member>
      <member refid="a00137_1a0f6b031ede3ee3d4b78301e38511e0e5" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ball</name></member>
      <member refid="a00137_1a4f60c424249558b98324a7939181df98" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ball</name></member>
      <member refid="a00137_1a277efd54d30cb0ad7fee8e0c1fb340b1" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ball</name></member>
      <member refid="a00137_1a9b88f699a31270d6831ad956aece6131" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ball</name></member>
      <member refid="a00137_1ac232d264b59561de5e1d2b72868c12fa" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>center</name></member>
      <member refid="a00137_1a0f5f019e7c97dfc42717b831ec06fac9" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>center</name></member>
      <member refid="a00137_1ae6b4dc8859841aae58313165c9ca0c82" prot="public" virt="virtual"><scope>acme::ball</scope><name>clamp</name></member>
      <member refid="a00137_1a98cbdd951e9d0ffe9c6661f9964e4ee3" prot="public" virt="virtual"><scope>acme::ball</scope><name>clamp</name></member>
      <member refid="a00149_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>entity</name></member>
      <member refid="a00137_1a1e6a81d0e6d715fa932cabdbc62f14cd" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>isApprox</name></member>
      <member refid="a00137_1a8f2a4cfae7661cc405d6cff3a12f2cb8" prot="public" virt="virtual"><scope>acme::ball</scope><name>isBall</name></member>
      <member refid="a00137_1af57c21164690c5b8f9ddb94bd12120d8" prot="public" virt="virtual"><scope>acme::ball</scope><name>isClampable</name></member>
      <member refid="a00137_1a23df275e226d2cd1830523802a9baad5" prot="public" virt="virtual"><scope>acme::ball</scope><name>isDegenerated</name></member>
      <member refid="a00137_1ae9a8f9ad8b4b7f4488a0359233b61319" prot="public" virt="virtual"><scope>acme::ball</scope><name>isDisk</name></member>
      <member refid="a00149_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>isEntity</name></member>
      <member refid="a00137_1afdd2e92c326b169062c209f809b4d931" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>isInside</name></member>
      <member refid="a00137_1a7ec4546697e4938bb96c7f4652b904bf" prot="public" virt="virtual"><scope>acme::ball</scope><name>isLine</name></member>
      <member refid="a00137_1aa6be7f0cf658040ce949c3034db2bfa3" prot="public" virt="virtual"><scope>acme::ball</scope><name>isNonClampable</name></member>
      <member refid="a00137_1a72a78115bd000200c175fd4ed4018adc" prot="public" virt="virtual"><scope>acme::ball</scope><name>isNone</name></member>
      <member refid="a00137_1a6fd87ab0a633c4a4cc736db37f91917b" prot="public" virt="virtual"><scope>acme::ball</scope><name>isPlane</name></member>
      <member refid="a00137_1aa08c4b0ee451baad399ad5c559865619" prot="public" virt="virtual"><scope>acme::ball</scope><name>isPoint</name></member>
      <member refid="a00137_1a7327648ac4af52aff7b5d60e8ac22604" prot="public" virt="virtual"><scope>acme::ball</scope><name>isRay</name></member>
      <member refid="a00137_1a0fa7a43dc292bfe0a3952f3c2c107cc5" prot="public" virt="virtual"><scope>acme::ball</scope><name>isSegment</name></member>
      <member refid="a00137_1ab1823e260fb68f8b9077dfe89e7017c8" prot="public" virt="virtual"><scope>acme::ball</scope><name>isTriangle</name></member>
      <member refid="a00137_1a114549b1d1b27c87c94fbbf7cc401f9c" prot="public" virt="virtual"><scope>acme::ball</scope><name>level</name></member>
      <member refid="a00137_1a1f638ead1f66cce612fbd666d29be671" prot="private" virt="non-virtual"><scope>acme::ball</scope><name>m_center</name></member>
      <member refid="a00137_1af62a5f11567f5ebd3e845e2f3cc5df2a" prot="private" virt="non-virtual"><scope>acme::ball</scope><name>m_radius</name></member>
      <member refid="a00137_1a5d5fb0ffcc901414a4b5efd8f80bb229" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>operator=</name></member>
      <member refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>ptr</name></member>
      <member refid="a00137_1a092b0258eae1daf6680af99ee3e50b38" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>radius</name></member>
      <member refid="a00137_1ae80a389d408ba65e17908ae27707adb9" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>radius</name></member>
      <member refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>rotate</name></member>
      <member refid="a00137_1aaa6ac36fbf4f5067e74e0301e50283cd" prot="public" virt="virtual"><scope>acme::ball</scope><name>transform</name></member>
      <member refid="a00137_1a441ee7c119a35fc85722a1bf25342abb" prot="public" virt="virtual"><scope>acme::ball</scope><name>translate</name></member>
      <member refid="a00137_1a8445805caac9b4649ee10db912279dc7" prot="public" virt="virtual"><scope>acme::ball</scope><name>type</name></member>
      <member refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>vecptr</name></member>
      <member refid="a00137_1ac2e9343a80459a53dc0d0bbc1a9d1de3" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>volume</name></member>
      <member refid="a00137_1a17dfea6a7c7660afa9c140faa07089db" prot="public" virt="non-virtual"><scope>acme::ball</scope><name>~ball</name></member>
      <member refid="a00149_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::ball</scope><name>~entity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
