<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00177" kind="class" language="C++" prot="public">
    <compoundname>acme::triangle</compoundname>
    <basecompoundref refid="a00149" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00059" local="no">acme_triangle.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00177_1a3fd2f286caf8cc6dbd595f953d708d4a" prot="private" static="no" mutable="no">
        <type><ref refid="a00165" kindref="compound">point</ref></type>
        <definition>point acme::triangle::m_vertex[3]</definition>
        <argsstring>[3]</argsstring>
        <name>m_vertex</name>
        <briefdescription>
<para>Triangle vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="60" column="11" bodyfile="include/acme_triangle.hh" bodystart="60" bodyend="-1"/>
        <referencedby refid="a00177_1a6674f8ea4ac34b64307904647b3e69ef" compoundref="a00119" startline="221" endline="225">area</referencedby>
        <referencedby refid="a00177_1a990dbd20633de178aab5ac265eb07899" compoundref="a00119" startline="230" endline="249">barycentric</referencedby>
        <referencedby refid="a00177_1af49ed4c9746da7b23b53c47ce304a0aa" compoundref="a00119" startline="163" endline="167">centroid</referencedby>
        <referencedby refid="a00177_1a6fce9b60e171791be1857c49ff06151c" compoundref="a00119" startline="315" endline="327">clamp</referencedby>
        <referencedby refid="a00177_1a5889e9385e27c0a35c902468680fca08" compoundref="a00119" startline="172" endline="183">edge</referencedby>
        <referencedby refid="a00177_1a1e69b5542afce8c605058115bf7cda82" compoundref="a00119" startline="108" endline="116">isApprox</referencedby>
        <referencedby refid="a00177_1a65ea29ad558880936a38ec30cc81c3ab" compoundref="a00119" startline="303" endline="310">isDegenerated</referencedby>
        <referencedby refid="a00177_1a5dfa6e5a394f26cf1a917ecc734ae76d" compoundref="a00119" startline="188" endline="192">normal</referencedby>
        <referencedby refid="a00177_1aa5b53101e6c454f34764a1f48e8fe49b" compoundref="a00119" startline="89" endline="103">operator=</referencedby>
        <referencedby refid="a00177_1adb19f947795a01ef2c9b9615b9bd59e3" compoundref="a00119" startline="142" endline="148">operator[]</referencedby>
        <referencedby refid="a00177_1a6189701a61e08b3d2d1b8c8ffd6e9bee" compoundref="a00119" startline="210" endline="216">perimeter</referencedby>
        <referencedby refid="a00177_1a595b4c64d0b91b9967293afa2bcfc46b" compoundref="a00119" startline="197" endline="205">swap</referencedby>
        <referencedby refid="a00177_1ac5425c9ec8c299cd11fe191c95e86d5a" compoundref="a00119" startline="274" endline="280">transform</referencedby>
        <referencedby refid="a00177_1a9f4c4dc5e8b5b4a2b478637b5a76d113" compoundref="a00119" startline="263" endline="269">translate</referencedby>
        <referencedby refid="a00177_1a77b03e21fe456d010c64144d537ee079" compoundref="a00119" startline="48" endline="62">triangle</referencedby>
        <referencedby refid="a00177_1a50caa67d79cdd9b8e0a629803ac1deae" compoundref="a00119" startline="121" endline="127">vertex</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00177_1a0ed70309074cada16c09824ac6ac7643" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::~triangle</definition>
        <argsstring>()</argsstring>
        <name>~triangle</name>
        <briefdescription>
<para>Triangle class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="64" column="5" bodyfile="include/acme_triangle.hh" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a75975f5b2071b1101f29a665aa65f681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>(triangle const &amp;)=default</argsstring>
        <name>triangle</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Triangle copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="67" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a303a7336de01a25ae9f1facf93602bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>(triangle &amp;&amp;)=default</argsstring>
        <name>triangle</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Triangle move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1aa7cd6328f9445db2e7d92f437cfc615c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>()</argsstring>
        <name>triangle</name>
        <briefdescription>
<para>Triangle class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="73" column="5" bodyfile="include/acme_triangle.hh" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a77b03e21fe456d010c64144d537ee079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>(real vertex0_x, real vertex0_y, real vertex0_z, real vertex1_x, real vertex1_y, real vertex1_z, real vertex2_x, real vertex2_y, real vertex2_z)</argsstring>
        <name>triangle</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex0_x</declname>
          <briefdescription><para>Input x value of first triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex0_y</declname>
          <briefdescription><para>Input y value of first triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex0_z</declname>
          <briefdescription><para>Input z value of first triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex1_x</declname>
          <briefdescription><para>Input x value of second triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex1_y</declname>
          <briefdescription><para>Input y value of second triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex1_z</declname>
          <briefdescription><para>Input z value of second triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex2_x</declname>
          <briefdescription><para>Input x value of third triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex2_y</declname>
          <briefdescription><para>Input y value of third triangle vertex </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>vertex2_z</declname>
          <briefdescription><para>Input z value of third triangle vertex </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Triangle class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="76" column="5" bodyfile="src/acme_triangle.cc" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a9b96ea368a5b4da7950783e58079e452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>(point const &amp;vertex0, point const &amp;vertex1, point const &amp;vertex2)</argsstring>
        <name>triangle</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>vertex0</declname>
          <briefdescription><para>Input first triangle vertex point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>vertex1</declname>
          <briefdescription><para>Input second triangle vertex point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>vertex2</declname>
          <briefdescription><para>Input third triangle vertex point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Triangle class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="89" column="5" bodyfile="src/acme_triangle.cc" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1abf8b0c972dd900307c3840eb5c8040ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>acme::triangle::triangle</definition>
        <argsstring>(point const vertex[3])</argsstring>
        <name>triangle</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const</type>
          <declname>vertex</declname>
          <array>[3]</array>
          <briefdescription><para>Input triangle verices </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Triangle class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="96" column="5" bodyfile="src/acme_triangle.cc" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1aa5b53101e6c454f34764a1f48e8fe49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00177" kindref="compound">triangle</ref> &amp;</type>
        <definition>triangle &amp; acme::triangle::operator=</definition>
        <argsstring>(triangle const &amp;triangle_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="102" column="5" bodyfile="src/acme_triangle.cc" bodystart="89" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a1e69b5542afce8c605058115bf7cda82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isApprox</definition>
        <argsstring>(triangle const &amp;triangle_in, real tolerance=EPSILON) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00177" kindref="compound">triangle</ref> const &amp;</type>
          <declname>triangle_in</declname>
          <briefdescription><para>Input triangle object </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="108" column="5" bodyfile="src/acme_triangle.cc" bodystart="108" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a50caa67d79cdd9b8e0a629803ac1deae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> const  &amp;</type>
        <definition>point const  &amp; acme::triangle::vertex</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>vertex</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>New triangle vertex </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th triangle vertex const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="115" column="5" bodyfile="src/acme_triangle.cc" bodystart="121" bodyend="127"/>
        <referencedby refid="a00125_1aee09fa5593575d0145839d708403f7e0" compoundref="a00089" startline="2254" endline="2286">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a35f2528c1e50d5b4d9bd2d95d09b5fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; acme::triangle::vertex</definition>
        <argsstring>(size_t i)</argsstring>
        <name>vertex</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>New triangle vertex </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th triangle vertex reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="121" column="5" bodyfile="src/acme_triangle.cc" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1adb19f947795a01ef2c9b9615b9bd59e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> const  &amp;</type>
        <definition>point const  &amp; acme::triangle::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>New triangle vertex </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th triangle vertex const reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="127" column="5" bodyfile="src/acme_triangle.cc" bodystart="142" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1aa0d5866afd49a82697441f5953832804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref> &amp;</type>
        <definition>point &amp; acme::triangle::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>New triangle vertex </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th triangle vertex reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="133" column="5" bodyfile="src/acme_triangle.cc" bodystart="153" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1af49ed4c9746da7b23b53c47ce304a0aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00165" kindref="compound">point</ref></type>
        <definition>point acme::triangle::centroid</definition>
        <argsstring>(void) const</argsstring>
        <name>centroid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get triangle centroid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="139" column="5" bodyfile="src/acme_triangle.cc" bodystart="163" bodyend="167"/>
        <referencedby refid="a00177_1aa5d00b22f53d33cbdd1473305bc81f56" compoundref="a00119" startline="254" endline="258">layingPlane</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a5889e9385e27c0a35c902468680fca08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00173" kindref="compound">segment</ref></type>
        <definition>segment acme::triangle::edge</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>edge</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Triangle i-th vertex index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get triangle edge created by i-th and j-th vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="143" column="5" bodyfile="src/acme_triangle.cc" bodystart="172" bodyend="183"/>
        <referencedby refid="a00125_1a35fa92fe8a8e1318904c3c26f2d44e0b" compoundref="a00089" startline="1781" endline="1840">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a5dfa6e5a394f26cf1a917ecc734ae76d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref></type>
        <definition>vec3 acme::triangle::normal</definition>
        <argsstring>(void) const</argsstring>
        <name>normal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get triangle face normal (normalized vector) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="149" column="5" bodyfile="src/acme_triangle.cc" bodystart="188" bodyend="192"/>
        <referencedby refid="a00125_1ad42537de4093cfca4cc960426354fab5" compoundref="a00101" startline="352" endline="358">acme::isOrthogonal</referencedby>
        <referencedby refid="a00125_1a63fce624afab00787fafe14518f37f38" compoundref="a00104" startline="352" endline="358">acme::isParallel</referencedby>
        <referencedby refid="a00177_1aa5d00b22f53d33cbdd1473305bc81f56" compoundref="a00119" startline="254" endline="258">layingPlane</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a595b4c64d0b91b9967293afa2bcfc46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::triangle::swap</definition>
        <argsstring>(size_t i, size_t j)</argsstring>
        <name>swap</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Triangle i-th vertex index </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>j</declname>
          <briefdescription><para>Triangle j-th vertex index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Swap triangle vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="153" column="5" bodyfile="src/acme_triangle.cc" bodystart="197" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a6189701a61e08b3d2d1b8c8ffd6e9bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::triangle::perimeter</definition>
        <argsstring>(void) const</argsstring>
        <name>perimeter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate triangle perimeter length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="160" column="5" bodyfile="src/acme_triangle.cc" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a6674f8ea4ac34b64307904647b3e69ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
        <definition>real acme::triangle::area</definition>
        <argsstring>(void) const</argsstring>
        <name>area</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate triangle area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="165" column="5" bodyfile="src/acme_triangle.cc" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a990dbd20633de178aab5ac265eb07899" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::triangle::barycentric</definition>
        <argsstring>(point const &amp;point_in, real &amp;u, real &amp;v, real &amp;w) const</argsstring>
        <name>barycentric</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Input point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>u</declname>
          <briefdescription><para>Output barycentric coordinate u </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>v</declname>
          <briefdescription><para>Output barycentric coordinate v </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>w</declname>
          <briefdescription><para>Output barycentric coordinate w </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Compute barycentric coordinates (u,v,w) for point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="169" column="5" bodyfile="src/acme_triangle.cc" bodystart="230" bodyend="249"/>
        <referencedby refid="a00177_1a288ed98e5708aa960f5620124ea94c5c" compoundref="a00119" startline="285" endline="298">isInside</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1aa5d00b22f53d33cbdd1473305bc81f56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00161" kindref="compound">plane</ref></type>
        <definition>plane acme::triangle::layingPlane</definition>
        <argsstring>(void) const</argsstring>
        <name>layingPlane</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get triangle laying plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="178" column="5" bodyfile="src/acme_triangle.cc" bodystart="254" bodyend="258"/>
        <referencedby refid="a00125_1a5daf84b1a693cc6fe32c5aaef0dcd06b" compoundref="a00089" startline="2178" endline="2199">acme::intersection</referencedby>
        <referencedby refid="a00125_1aa3b4a4c7d5960f62494c8ec60b422b46" compoundref="a00080" startline="343" endline="351">acme::isCoplanar</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a9f4c4dc5e8b5b4a2b478637b5a76d113" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::triangle::translate</definition>
        <argsstring>(vec3 const &amp;vector_in) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00149_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate triangle by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="182" column="5" bodyfile="src/acme_triangle.cc" bodystart="263" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1ac5425c9ec8c299cd11fe191c95e86d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void acme::triangle::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00149_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00125_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform triangle with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="188" column="5" bodyfile="src/acme_triangle.cc" bodystart="274" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a288ed98e5708aa960f5620124ea94c5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isInside</definition>
        <argsstring>(point const &amp;point_in, real tolerance=EPSILON) const</argsstring>
        <name>isInside</name>
        <param>
          <type><ref refid="a00165" kindref="compound">point</ref> const &amp;</type>
          <declname>point_in</declname>
          <briefdescription><para>Query point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if a point lays inside the triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="194" column="5" bodyfile="src/acme_triangle.cc" bodystart="285" bodyend="298"/>
        <referencedby refid="a00125_1a69d35a46abbd3ff950d3d6c4460456d7" compoundref="a00089" startline="1436" endline="1451">acme::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1a65ea29ad558880936a38ec30cc81c3ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isDegenerated</definition>
        <argsstring>(real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00149_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00125_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if triangle is degenerated to point or segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="201" column="5" bodyfile="src/acme_triangle.cc" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1ae9be42d532616b3485acdd090ce720fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00125_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::triangle::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00149_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="206" column="13" bodyfile="include/acme_triangle.hh" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a9caa7908cf57e1ed72574e7af012ee3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::triangle::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00149_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="209" column="17" bodyfile="include/acme_triangle.hh" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a4f94f560fcd6af803c1ca93fa0066b46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00149_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="212" column="10" bodyfile="include/acme_triangle.hh" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a7fa07a4c7e47cb61d5c9da06250e47a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00149_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="215" column="10" bodyfile="include/acme_triangle.hh" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a4499636a3846e588f0812a69514fa80f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00149_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="218" column="10" bodyfile="include/acme_triangle.hh" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a5d0ce1044912488c55ca98eb4cf43f34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00149_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="221" column="10" bodyfile="include/acme_triangle.hh" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a892afe9be05abd7ae45763d5959f51c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00149_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="224" column="10" bodyfile="include/acme_triangle.hh" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a297ebaf886d99449dd3779dacf119df2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00149_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="227" column="10" bodyfile="include/acme_triangle.hh" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a14c358962dbd123fcdf6c13ca280ddc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00149_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="230" column="10" bodyfile="include/acme_triangle.hh" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a7569e1b50c3507e9426f092de1c6e5d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00149_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="233" column="10" bodyfile="include/acme_triangle.hh" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a25f895caee1bc3dc755607ca964eedc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00149_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="236" column="10" bodyfile="include/acme_triangle.hh" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a8292848489d7ca19ee2ba43b1e711d52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00149_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the triangle is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="239" column="10" bodyfile="include/acme_triangle.hh" bodystart="239" bodyend="239"/>
        <referencedby refid="a00177_1a6fce9b60e171791be1857c49ff06151c" compoundref="a00119" startline="315" endline="327">clamp</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00177_1ae1800f631d42a325c8b76bd52bb39bf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00149_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the triangle is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="242" column="10" bodyfile="include/acme_triangle.hh" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1a6fce9b60e171791be1857c49ff06151c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::clamp</definition>
        <argsstring>(vec3 &amp;min, vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="246" column="5" bodyfile="src/acme_triangle.cc" bodystart="315" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="a00177_1af3f6a64c779ddccdb29619e7f915cf1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::triangle::clamp</definition>
        <argsstring>(real &amp;min_x, real &amp;min_y, real &amp;min_z, real &amp;max_x, real &amp;max_y, real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00149_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_triangle.hh" line="253" column="5" bodyfile="src/acme_triangle.cc" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00125_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00125_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5" bodyfile="src/acme_entity.cc" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a00149_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10" bodyfile="src/acme_entity.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00149" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Triangle class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Triangle in 3D space. The triangle is defined by three arbitrary points. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::triangle</label>
        <link refid="a00177"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="2">
        <label>acme::entity</label>
        <link refid="a00149"/>
      </node>
      <node id="1">
        <label>acme::triangle</label>
        <link refid="a00177"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_vertex</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>acme::point</label>
        <link refid="a00165"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_triangle.hh" line="57" column="3" bodyfile="include/acme_triangle.hh" bodystart="58" bodyend="262"/>
    <listofallmembers>
      <member refid="a00177_1a6674f8ea4ac34b64307904647b3e69ef" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>area</name></member>
      <member refid="a00177_1a990dbd20633de178aab5ac265eb07899" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>barycentric</name></member>
      <member refid="a00177_1af49ed4c9746da7b23b53c47ce304a0aa" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>centroid</name></member>
      <member refid="a00177_1a6fce9b60e171791be1857c49ff06151c" prot="public" virt="virtual"><scope>acme::triangle</scope><name>clamp</name></member>
      <member refid="a00177_1af3f6a64c779ddccdb29619e7f915cf1d" prot="public" virt="virtual"><scope>acme::triangle</scope><name>clamp</name></member>
      <member refid="a00177_1a5889e9385e27c0a35c902468680fca08" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>edge</name></member>
      <member refid="a00149_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>entity</name></member>
      <member refid="a00177_1a1e69b5542afce8c605058115bf7cda82" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>isApprox</name></member>
      <member refid="a00177_1a25f895caee1bc3dc755607ca964eedc5" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isBall</name></member>
      <member refid="a00177_1a8292848489d7ca19ee2ba43b1e711d52" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isClampable</name></member>
      <member refid="a00177_1a65ea29ad558880936a38ec30cc81c3ab" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isDegenerated</name></member>
      <member refid="a00177_1a7569e1b50c3507e9426f092de1c6e5d2" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isDisk</name></member>
      <member refid="a00149_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>isEntity</name></member>
      <member refid="a00177_1a288ed98e5708aa960f5620124ea94c5c" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>isInside</name></member>
      <member refid="a00177_1a4499636a3846e588f0812a69514fa80f" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isLine</name></member>
      <member refid="a00177_1ae1800f631d42a325c8b76bd52bb39bf6" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isNonClampable</name></member>
      <member refid="a00177_1a4f94f560fcd6af803c1ca93fa0066b46" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isNone</name></member>
      <member refid="a00177_1a892afe9be05abd7ae45763d5959f51c9" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isPlane</name></member>
      <member refid="a00177_1a7fa07a4c7e47cb61d5c9da06250e47a5" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isPoint</name></member>
      <member refid="a00177_1a5d0ce1044912488c55ca98eb4cf43f34" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isRay</name></member>
      <member refid="a00177_1a297ebaf886d99449dd3779dacf119df2" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isSegment</name></member>
      <member refid="a00177_1a14c358962dbd123fcdf6c13ca280ddc0" prot="public" virt="virtual"><scope>acme::triangle</scope><name>isTriangle</name></member>
      <member refid="a00177_1aa5d00b22f53d33cbdd1473305bc81f56" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>layingPlane</name></member>
      <member refid="a00177_1ae9be42d532616b3485acdd090ce720fc" prot="public" virt="virtual"><scope>acme::triangle</scope><name>level</name></member>
      <member refid="a00177_1a3fd2f286caf8cc6dbd595f953d708d4a" prot="private" virt="non-virtual"><scope>acme::triangle</scope><name>m_vertex</name></member>
      <member refid="a00177_1a5dfa6e5a394f26cf1a917ecc734ae76d" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>normal</name></member>
      <member refid="a00177_1aa5b53101e6c454f34764a1f48e8fe49b" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>operator=</name></member>
      <member refid="a00177_1adb19f947795a01ef2c9b9615b9bd59e3" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>operator[]</name></member>
      <member refid="a00177_1aa0d5866afd49a82697441f5953832804" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>operator[]</name></member>
      <member refid="a00177_1a6189701a61e08b3d2d1b8c8ffd6e9bee" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>perimeter</name></member>
      <member refid="a00149_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>ptr</name></member>
      <member refid="a00149_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>rotate</name></member>
      <member refid="a00177_1a595b4c64d0b91b9967293afa2bcfc46b" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>swap</name></member>
      <member refid="a00177_1ac5425c9ec8c299cd11fe191c95e86d5a" prot="public" virt="virtual"><scope>acme::triangle</scope><name>transform</name></member>
      <member refid="a00177_1a9f4c4dc5e8b5b4a2b478637b5a76d113" prot="public" virt="virtual"><scope>acme::triangle</scope><name>translate</name></member>
      <member refid="a00177_1a75975f5b2071b1101f29a665aa65f681" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1a303a7336de01a25ae9f1facf93602bf9" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1aa7cd6328f9445db2e7d92f437cfc615c" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1a77b03e21fe456d010c64144d537ee079" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1a9b96ea368a5b4da7950783e58079e452" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1abf8b0c972dd900307c3840eb5c8040ef" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>triangle</name></member>
      <member refid="a00177_1a9caa7908cf57e1ed72574e7af012ee3b" prot="public" virt="virtual"><scope>acme::triangle</scope><name>type</name></member>
      <member refid="a00149_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>vecptr</name></member>
      <member refid="a00177_1a50caa67d79cdd9b8e0a629803ac1deae" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>vertex</name></member>
      <member refid="a00177_1a35f2528c1e50d5b4d9bd2d95d09b5fb5" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>vertex</name></member>
      <member refid="a00149_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::triangle</scope><name>~entity</name></member>
      <member refid="a00177_1a0ed70309074cada16c09824ac6ac7643" prot="public" virt="non-virtual"><scope>acme::triangle</scope><name>~triangle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
