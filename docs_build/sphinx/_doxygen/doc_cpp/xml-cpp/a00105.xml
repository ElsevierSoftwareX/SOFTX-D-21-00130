<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="a00105" kind="class" language="C++" prot="public">
    <compoundname>acme::point</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Eigen::Matrix&lt; real, 3, 1 &gt;</basecompoundref>
    <basecompoundref refid="a00089" prot="public" virt="non-virtual">acme::entity</basecompoundref>
    <includes refid="a00050" local="no">acme_point.hh</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00105_1a091ad72ca550e4dae4aee8408741f3fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename derived</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>acme::point::point</definition>
        <argsstring>(Eigen::MatrixBase&lt; derived &gt; const &amp;other)</argsstring>
        <name>point</name>
        <param>
          <type>Eigen::MatrixBase&lt; derived &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="66" column="5" bodyfile="include/acme_point.hh" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1ab8aa66b8985752c984d47db196db9db9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename derived</type>
          </param>
        </templateparamlist>
        <type><ref refid="a00105" kindref="compound">point</ref> &amp;</type>
        <definition>point&amp; acme::point::operator=</definition>
        <argsstring>(Eigen::MatrixBase&lt; derived &gt; const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>Eigen::MatrixBase&lt; derived &gt; const &amp;</type>
          <declname>other</declname>
          <briefdescription><para>Matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="73" column="11" bodyfile="include/acme_point.hh" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1aa8be555cba335229fc9d9684bfb31558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void acme::point::translate</definition>
        <argsstring>(vec3 const &amp;vector_in) override</argsstring>
        <name>translate</name>
        <reimplements refid="a00089_1a9979154e5dfe4f69fc04f4b25ac76aea">translate</reimplements>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Input translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate point by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="83" column="5" bodyfile="include/acme_point.hh" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a805fe8db65915d7732a389ae2c562d15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void acme::point::transform</definition>
        <argsstring>(affine const &amp;affine_in) override</argsstring>
        <name>transform</name>
        <reimplements refid="a00089_1a48c8a3f95aaea32d4368e918fdadd021">transform</reimplements>
        <param>
          <type><ref refid="a00065_1a6b659ea9a43cbc19b6dd7ef2aae482dc" kindref="member">affine</ref> const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Transform point with affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="92" column="5" bodyfile="include/acme_point.hh" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1aff16e92d6455682e9b1c77c19fff4ab8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isDegenerated</definition>
        <argsstring>(acme::real tolerance=EPSILON) const override</argsstring>
        <name>isDegenerated</name>
        <reimplements refid="a00089_1a4535419695613294d8f946eb872bd5bd">isDegenerated</reimplements>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref></type>
          <declname>tolerance</declname>
          <defval><ref refid="a00065_1a5be47678e6c38184c3795d1ea41c489d" kindref="member">EPSILON</ref></defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if entity is degenerated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="100" column="10" bodyfile="include/acme_point.hh" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a29bb39638d6afe0ba61abac5827fc3bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="a00065_1a9223400d01496dcba963b2f723c89d4a" kindref="member">integer</ref></type>
        <definition>integer acme::point::level</definition>
        <argsstring>(void) const override</argsstring>
        <name>level</name>
        <reimplements refid="a00089_1a4b9630c90d73a823e2e0efd8e9a79cd0">level</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object hierarchical level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="109" column="13" bodyfile="include/acme_point.hh" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a50b0411bd3e7684ee0cc46b090a2e716" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string acme::point::type</definition>
        <argsstring>(void) const override</argsstring>
        <name>type</name>
        <reimplements refid="a00089_1ac2e74fd5ab901b53d8242d3bb70755a4">type</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return object type as string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="112" column="17" bodyfile="include/acme_point.hh" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a1a7a9b3e1aef73fac364e0aec646fc18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isNone</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNone</name>
        <reimplements refid="a00089_1a6dcf252926f1c1b1aad147d5caa5eed3">isNone</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is no entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="115" column="10" bodyfile="include/acme_point.hh" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a26f1135e4a5d0fde2f050770bc3cdbd7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isPoint</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPoint</name>
        <reimplements refid="a00089_1a0ca14dc6ba289cadc1207064eae92373">isPoint</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="118" column="10" bodyfile="include/acme_point.hh" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a5b95d2c6322bd656a6a701e8c3b35456" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isLine</definition>
        <argsstring>(void) const override</argsstring>
        <name>isLine</name>
        <reimplements refid="a00089_1a68bd00af11831aee5fef3531850ff433">isLine</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="121" column="10" bodyfile="include/acme_point.hh" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a47fcc5819f9c9764a07f5b8f945c37db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isRay</definition>
        <argsstring>(void) const override</argsstring>
        <name>isRay</name>
        <reimplements refid="a00089_1a9ab36cd844cde471a9c3908c1cee09a2">isRay</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="124" column="10" bodyfile="include/acme_point.hh" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a170670d9aca7bd2718536efbda15ed8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isPlane</definition>
        <argsstring>(void) const override</argsstring>
        <name>isPlane</name>
        <reimplements refid="a00089_1a9df7782cc14bf5d21cd85e59ef1c1d5c">isPlane</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="127" column="10" bodyfile="include/acme_point.hh" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a6746b01b9892b125007da6bee7cfb6b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isSegment</definition>
        <argsstring>(void) const override</argsstring>
        <name>isSegment</name>
        <reimplements refid="a00089_1ac7d126acf87e2da6a552814be7ebc126">isSegment</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a segment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="130" column="10" bodyfile="include/acme_point.hh" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a202dbe8b881bc0a7700489164aa7af86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isTriangle</definition>
        <argsstring>(void) const override</argsstring>
        <name>isTriangle</name>
        <reimplements refid="a00089_1a5d0657b831d799da5f6f2fed1ff12179">isTriangle</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="133" column="10" bodyfile="include/acme_point.hh" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a209f0ff7c2faba83c70dc081bfc039cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isDisk</definition>
        <argsstring>(void) const override</argsstring>
        <name>isDisk</name>
        <reimplements refid="a00089_1aed5ee0dee6a1a1c0a8c29e4d3a217894">isDisk</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a disk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="136" column="10" bodyfile="include/acme_point.hh" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a6079957c661df36ff7554c61ce88cc22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isBall</definition>
        <argsstring>(void) const override</argsstring>
        <name>isBall</name>
        <reimplements refid="a00089_1a73add88b6838e9b0a9a261a679da9515">isBall</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is a ball. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="139" column="10" bodyfile="include/acme_point.hh" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1ad08cb47e0831eb6532b9ceb546551623" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isClampable</name>
        <reimplements refid="a00089_1a2014bd40547fe4fd4a270b5e40c6cc07">isClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the point is clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="142" column="10" bodyfile="include/acme_point.hh" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a2b1bc3e61ec0b890f98d6e8508f45b5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::isNonClampable</definition>
        <argsstring>(void) const override</argsstring>
        <name>isNonClampable</name>
        <reimplements refid="a00089_1a5a5c33241ac3032efb4908744d3174dc">isNonClampable</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether in the point is non-clampable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="145" column="10" bodyfile="include/acme_point.hh" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a85576f7926ecb8744f1ec87b6338891b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::clamp</definition>
        <argsstring>(acme::vec3 &amp;min, acme::vec3 &amp;max) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00089_1afebc220f247db840f78b7df51e175a28">clamp</reimplements>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">acme::vec3</ref> &amp;</type>
          <declname>min</declname>
          <briefdescription><para>Input minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">acme::vec3</ref> &amp;</type>
          <declname>max</declname>
          <briefdescription><para>Input maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="149" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00105_1a48ca1b4ccc4b8d37c8401ada3a718296" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool acme::point::clamp</definition>
        <argsstring>(acme::real &amp;min_x, acme::real &amp;min_y, acme::real &amp;min_z, acme::real &amp;max_x, acme::real &amp;max_y, acme::real &amp;max_z) const override</argsstring>
        <name>clamp</name>
        <reimplements refid="a00089_1a071efafd454180bf95903a38029a5b6b">clamp</reimplements>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>min_x</declname>
          <briefdescription><para>Input x value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>min_y</declname>
          <briefdescription><para>Input y value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>min_z</declname>
          <briefdescription><para>Input z value of minimum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>max_x</declname>
          <briefdescription><para>Input x value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>max_y</declname>
          <briefdescription><para>Input y value of maximum point </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">acme::real</ref> &amp;</type>
          <declname>max_z</declname>
          <briefdescription><para>Input z value of maximum point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get minumum and maximum values along axes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_point.hh" line="156" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void acme::entity::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="a00065_1a91745012989657825bc70313039f90a0" kindref="member">real</ref></type>
          <declname>angle</declname>
          <briefdescription><para>Input angle [rad] </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00065_1a57043673330479bace38d40b1d93edb0" kindref="member">vec3</ref> const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate entity by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a534ab97324296ad976e253051482322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool acme::entity::isEntity</definition>
        <argsstring>(void) const</argsstring>
        <name>isEntity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check whether the object is an entity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="96" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00089" kindref="compound">entity</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;entity&gt; acme::entity::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Shared pointer to entity object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="56" column="29" bodyfile="include/acme_entity.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00089_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" kindref="member">ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;ptr&gt; acme::entity::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to entity objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/acme_entity.hh" line="57" column="25" bodyfile="include/acme_entity.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Point class container. </para>
    </briefdescription>
    <detaileddescription>
<para>Specialization of Eigen::Matrix class </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="3">
        <label>acme::entity</label>
        <link refid="a00089"/>
      </node>
      <node id="1">
        <label>acme::point</label>
        <link refid="a00105"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Eigen::Matrix&lt; real, 3, 1 &gt;</label>
      </node>
      <node id="3">
        <label>acme::entity</label>
        <link refid="a00089"/>
      </node>
      <node id="1">
        <label>acme::point</label>
        <link refid="a00105"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/acme_point.hh" line="59" column="3" bodyfile="include/acme_point.hh" bodystart="60" bodyend="165"/>
    <listofallmembers>
      <member refid="a00105_1a85576f7926ecb8744f1ec87b6338891b" prot="public" virt="virtual"><scope>acme::point</scope><name>clamp</name></member>
      <member refid="a00105_1a48ca1b4ccc4b8d37c8401ada3a718296" prot="public" virt="virtual"><scope>acme::point</scope><name>clamp</name></member>
      <member refid="a00089_1a8e7b0764a8cd9a367fd56231597fe517" prot="public" virt="non-virtual"><scope>acme::point</scope><name>entity</name></member>
      <member refid="a00105_1a6079957c661df36ff7554c61ce88cc22" prot="public" virt="virtual"><scope>acme::point</scope><name>isBall</name></member>
      <member refid="a00105_1ad08cb47e0831eb6532b9ceb546551623" prot="public" virt="virtual"><scope>acme::point</scope><name>isClampable</name></member>
      <member refid="a00105_1aff16e92d6455682e9b1c77c19fff4ab8" prot="public" virt="virtual"><scope>acme::point</scope><name>isDegenerated</name></member>
      <member refid="a00105_1a209f0ff7c2faba83c70dc081bfc039cc" prot="public" virt="virtual"><scope>acme::point</scope><name>isDisk</name></member>
      <member refid="a00089_1a534ab97324296ad976e253051482322f" prot="public" virt="non-virtual"><scope>acme::point</scope><name>isEntity</name></member>
      <member refid="a00105_1a5b95d2c6322bd656a6a701e8c3b35456" prot="public" virt="virtual"><scope>acme::point</scope><name>isLine</name></member>
      <member refid="a00105_1a2b1bc3e61ec0b890f98d6e8508f45b5e" prot="public" virt="virtual"><scope>acme::point</scope><name>isNonClampable</name></member>
      <member refid="a00105_1a1a7a9b3e1aef73fac364e0aec646fc18" prot="public" virt="virtual"><scope>acme::point</scope><name>isNone</name></member>
      <member refid="a00105_1a170670d9aca7bd2718536efbda15ed8f" prot="public" virt="virtual"><scope>acme::point</scope><name>isPlane</name></member>
      <member refid="a00105_1a26f1135e4a5d0fde2f050770bc3cdbd7" prot="public" virt="virtual"><scope>acme::point</scope><name>isPoint</name></member>
      <member refid="a00105_1a47fcc5819f9c9764a07f5b8f945c37db" prot="public" virt="virtual"><scope>acme::point</scope><name>isRay</name></member>
      <member refid="a00105_1a6746b01b9892b125007da6bee7cfb6b2" prot="public" virt="virtual"><scope>acme::point</scope><name>isSegment</name></member>
      <member refid="a00105_1a202dbe8b881bc0a7700489164aa7af86" prot="public" virt="virtual"><scope>acme::point</scope><name>isTriangle</name></member>
      <member refid="a00105_1a29bb39638d6afe0ba61abac5827fc3bd" prot="public" virt="virtual"><scope>acme::point</scope><name>level</name></member>
      <member refid="a00105_1ab8aa66b8985752c984d47db196db9db9" prot="public" virt="non-virtual"><scope>acme::point</scope><name>operator=</name></member>
      <member refid="a00105_1a091ad72ca550e4dae4aee8408741f3fe" prot="public" virt="non-virtual"><scope>acme::point</scope><name>point</name></member>
      <member refid="a00089_1a2e82edbaf0d05e2009a19330ba1cac91" prot="public" virt="non-virtual"><scope>acme::point</scope><name>ptr</name></member>
      <member refid="a00089_1a15e6ca15ee907e83f3eb13b53212b3ff" prot="public" virt="non-virtual"><scope>acme::point</scope><name>rotate</name></member>
      <member refid="a00105_1a805fe8db65915d7732a389ae2c562d15" prot="public" virt="virtual"><scope>acme::point</scope><name>transform</name></member>
      <member refid="a00105_1aa8be555cba335229fc9d9684bfb31558" prot="public" virt="virtual"><scope>acme::point</scope><name>translate</name></member>
      <member refid="a00105_1a50b0411bd3e7684ee0cc46b090a2e716" prot="public" virt="virtual"><scope>acme::point</scope><name>type</name></member>
      <member refid="a00089_1ad609d9c93a22dedc39d0e77ce2e53ff8" prot="public" virt="non-virtual"><scope>acme::point</scope><name>vecptr</name></member>
      <member refid="a00089_1a89e8a5f825d508d52f9e4423169f75ee" prot="public" virt="virtual"><scope>acme::point</scope><name>~entity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
